//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroCharacters/CharactersService.h"
#include "SSroCharacters/CharactersClient.h"
#include "CharactersService_Private.h"
#include "CharactersMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UCharactersService::UCharactersService()
	: d(new UCharactersService::Private())
{
}

UCharactersService::~UCharactersService()
{
	delete d;
}

void UCharactersService::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("CharactersService"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to CharactersService: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel(TCHAR_TO_UTF8(*serviceEndPoint), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = sro::characters::CharactersService::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UCharactersService::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UCharactersServiceClient* UCharactersService::MakeClient()
{
	auto client = UGrpcService::MakeClient<UCharactersServiceClient>();
	return client;
}

void UCharactersService::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void UCharactersService::CallGetGenders(const FGrpcGoogleProtobufEmpty& Request, FGetGendersLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UCharactersServiceGetGendersLambdaWrapper* lambdaWrapper = NewObject<UCharactersServiceGetGendersLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitGetGenders();
	InnerClient->OnGetGendersResponse.AddUniqueDynamic(lambdaWrapper, &UCharactersServiceGetGendersLambdaWrapper::OnResponse);
	InnerClient->GetGenders(lambdaWrapper->Handle, Request);
}

void UCharactersService::CallGetRealms(const FGrpcGoogleProtobufEmpty& Request, FGetRealmsLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UCharactersServiceGetRealmsLambdaWrapper* lambdaWrapper = NewObject<UCharactersServiceGetRealmsLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitGetRealms();
	InnerClient->OnGetRealmsResponse.AddUniqueDynamic(lambdaWrapper, &UCharactersServiceGetRealmsLambdaWrapper::OnResponse);
	InnerClient->GetRealms(lambdaWrapper->Handle, Request);
}

void UCharactersService::CallGetCharacters(const FGrpcGoogleProtobufEmpty& Request, FGetCharactersLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UCharactersServiceGetCharactersLambdaWrapper* lambdaWrapper = NewObject<UCharactersServiceGetCharactersLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitGetCharacters();
	InnerClient->OnGetCharactersResponse.AddUniqueDynamic(lambdaWrapper, &UCharactersServiceGetCharactersLambdaWrapper::OnResponse);
	InnerClient->GetCharacters(lambdaWrapper->Handle, Request);
}

void UCharactersService::CallGetCharacter(const FGrpcSroCharactersCharacterTarget& Request, FGetCharacterLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UCharactersServiceGetCharacterLambdaWrapper* lambdaWrapper = NewObject<UCharactersServiceGetCharacterLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitGetCharacter();
	InnerClient->OnGetCharacterResponse.AddUniqueDynamic(lambdaWrapper, &UCharactersServiceGetCharacterLambdaWrapper::OnResponse);
	InnerClient->GetCharacter(lambdaWrapper->Handle, Request);
}

void UCharactersService::CallCreateCharacter(const FGrpcSroCharactersCreateCharacterRequest& Request, FCreateCharacterLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UCharactersServiceCreateCharacterLambdaWrapper* lambdaWrapper = NewObject<UCharactersServiceCreateCharacterLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitCreateCharacter();
	InnerClient->OnCreateCharacterResponse.AddUniqueDynamic(lambdaWrapper, &UCharactersServiceCreateCharacterLambdaWrapper::OnResponse);
	InnerClient->CreateCharacter(lambdaWrapper->Handle, Request);
}

void UCharactersService::CallDeleteCharacter(const FGrpcSroCharactersCharacterTarget& Request, FDeleteCharacterLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UCharactersServiceDeleteCharacterLambdaWrapper* lambdaWrapper = NewObject<UCharactersServiceDeleteCharacterLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitDeleteCharacter();
	InnerClient->OnDeleteCharacterResponse.AddUniqueDynamic(lambdaWrapper, &UCharactersServiceDeleteCharacterLambdaWrapper::OnResponse);
	InnerClient->DeleteCharacter(lambdaWrapper->Handle, Request);
}

void UCharactersService::CallGetAllCharactersForUser(const FGrpcSroUserTarget& Request, FGetAllCharactersForUserLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UCharactersServiceGetAllCharactersForUserLambdaWrapper* lambdaWrapper = NewObject<UCharactersServiceGetAllCharactersForUserLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitGetAllCharactersForUser();
	InnerClient->OnGetAllCharactersForUserResponse.AddUniqueDynamic(lambdaWrapper, &UCharactersServiceGetAllCharactersForUserLambdaWrapper::OnResponse);
	InnerClient->GetAllCharactersForUser(lambdaWrapper->Handle, Request);
}

void UCharactersService::CallEditCharacter(const FGrpcSroCharactersEditCharacterRequest& Request, FEditCharacterLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UCharactersServiceEditCharacterLambdaWrapper* lambdaWrapper = NewObject<UCharactersServiceEditCharacterLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitEditCharacter();
	InnerClient->OnEditCharacterResponse.AddUniqueDynamic(lambdaWrapper, &UCharactersServiceEditCharacterLambdaWrapper::OnResponse);
	InnerClient->EditCharacter(lambdaWrapper->Handle, Request);
}

void UCharactersService::CallAddCharacterPlayTime(const FGrpcSroCharactersAddPlayTimeRequest& Request, FAddCharacterPlayTimeLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UCharactersServiceAddCharacterPlayTimeLambdaWrapper* lambdaWrapper = NewObject<UCharactersServiceAddCharacterPlayTimeLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitAddCharacterPlayTime();
	InnerClient->OnAddCharacterPlayTimeResponse.AddUniqueDynamic(lambdaWrapper, &UCharactersServiceAddCharacterPlayTimeLambdaWrapper::OnResponse);
	InnerClient->AddCharacterPlayTime(lambdaWrapper->Handle, Request);
}
