//Generated by TurboLink CodeGenerator, do not edit!
#include "CharactersMarshaling.h"
#include "SSro/GlobalsMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"

void GRPC_TO_TURBOLINK(const ::sro::characters::PlayTimeResponse* in, FGrpcSroCharactersPlayTimeResponse* out)
{
    out->Time=in->time();
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharactersPlayTimeResponse* in, ::sro::characters::PlayTimeResponse* out)
{
    out->set_time(in->Time);
}

void GRPC_TO_TURBOLINK(const ::sro::characters::AddPlayTimeRequest* in, FGrpcSroCharactersAddPlayTimeRequest* out)
{
    {
        FGrpcSroCharactersCharacterTarget field;
        GRPC_TO_TURBOLINK(&(in->character()), &field);
        out->Character = MakeShareable(new FGrpcSroCharactersCharacterTarget(field));
    }
    out->Time=in->time();
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharactersAddPlayTimeRequest* in, ::sro::characters::AddPlayTimeRequest* out)
{
    TURBOLINK_TO_GRPC(in->Character.Get(), out->mutable_character());
    out->set_time(in->Time);
}

void GRPC_TO_TURBOLINK(const ::sro::characters::CreateCharacterRequest* in, FGrpcSroCharactersCreateCharacterRequest* out)
{
    GRPC_TO_TURBOLINK(&(in->owner()), &(out->Owner));
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
    out->Gender=UTF8_TO_TCHAR(in->gender().c_str());
    out->Realm=UTF8_TO_TCHAR(in->realm().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharactersCreateCharacterRequest* in, ::sro::characters::CreateCharacterRequest* out)
{
    TURBOLINK_TO_GRPC(&(in->Owner), out->mutable_owner());
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
    out->set_gender(TCHAR_TO_UTF8(*(in->Gender)));
    out->set_realm(TCHAR_TO_UTF8(*(in->Realm)));
}

void GRPC_TO_TURBOLINK(const ::sro::characters::CharacterTarget* in, FGrpcSroCharactersCharacterTarget* out)
{
    switch(in->target_case())
    {
    case ::sro::characters::CharacterTarget::kId:
        out->Target.Id=in->id();
        out->Target.TargetCase = EGrpcSroCharactersCharacterTargetTarget::Id;
        break;
    case ::sro::characters::CharacterTarget::kName:
        out->Target.Name=UTF8_TO_TCHAR(in->name().c_str());
        out->Target.TargetCase = EGrpcSroCharactersCharacterTargetTarget::Name;
        break;
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharactersCharacterTarget* in, ::sro::characters::CharacterTarget* out)
{
    switch (in->Target.TargetCase)
    {
    case EGrpcSroCharactersCharacterTargetTarget::Id:
        out->set_id(in->Target.Id);
        break;
    case EGrpcSroCharactersCharacterTargetTarget::Name:
        out->set_name(TCHAR_TO_UTF8(*(in->Target.Name)));
        break;
    }
}

void GRPC_TO_TURBOLINK(const ::sro::characters::EditCharacterRequest* in, FGrpcSroCharactersEditCharacterRequest* out)
{
    GRPC_TO_TURBOLINK(&(in->target()), &(out->Target));
    switch(in->_owner_id_case())
    {
    case ::sro::characters::EditCharacterRequest::kOwnerId:
        out->_owner_id.OwnerId=UTF8_TO_TCHAR(in->owner_id().c_str());
        out->_owner_id._owner_idCase = EGrpcSroCharactersEditCharacterRequest_owner_id::OwnerId;
        break;
    }
    switch(in->_new_name_case())
    {
    case ::sro::characters::EditCharacterRequest::kNewName:
        out->_new_name.NewName=UTF8_TO_TCHAR(in->new_name().c_str());
        out->_new_name._new_nameCase = EGrpcSroCharactersEditCharacterRequest_new_name::NewName;
        break;
    }
    switch(in->_gender_case())
    {
    case ::sro::characters::EditCharacterRequest::kGender:
        out->_gender.Gender=UTF8_TO_TCHAR(in->gender().c_str());
        out->_gender._genderCase = EGrpcSroCharactersEditCharacterRequest_gender::Gender;
        break;
    }
    switch(in->_realm_case())
    {
    case ::sro::characters::EditCharacterRequest::kRealm:
        out->_realm.Realm=UTF8_TO_TCHAR(in->realm().c_str());
        out->_realm._realmCase = EGrpcSroCharactersEditCharacterRequest_realm::Realm;
        break;
    }
    switch(in->_play_time_case())
    {
    case ::sro::characters::EditCharacterRequest::kPlayTime:
        out->_play_time.PlayTime=in->play_time();
        out->_play_time._play_timeCase = EGrpcSroCharactersEditCharacterRequest_play_time::PlayTime;
        break;
    }
    switch(in->_location_case())
    {
    case ::sro::characters::EditCharacterRequest::kLocation:
    {
        FGrpcSroCharactersLocation field;
        GRPC_TO_TURBOLINK(&(in->location()), &field);
        out->_location.Location=MakeShareable(new FGrpcSroCharactersLocation(field));
        out->_location._locationCase = EGrpcSroCharactersEditCharacterRequest_location::Location;
    }
        break;
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharactersEditCharacterRequest* in, ::sro::characters::EditCharacterRequest* out)
{
    TURBOLINK_TO_GRPC(&(in->Target), out->mutable_target());
    switch (in->_owner_id._owner_idCase)
    {
    case EGrpcSroCharactersEditCharacterRequest_owner_id::OwnerId:
        out->set_owner_id(TCHAR_TO_UTF8(*(in->_owner_id.OwnerId)));
        break;
    }
    switch (in->_new_name._new_nameCase)
    {
    case EGrpcSroCharactersEditCharacterRequest_new_name::NewName:
        out->set_new_name(TCHAR_TO_UTF8(*(in->_new_name.NewName)));
        break;
    }
    switch (in->_gender._genderCase)
    {
    case EGrpcSroCharactersEditCharacterRequest_gender::Gender:
        out->set_gender(TCHAR_TO_UTF8(*(in->_gender.Gender)));
        break;
    }
    switch (in->_realm._realmCase)
    {
    case EGrpcSroCharactersEditCharacterRequest_realm::Realm:
        out->set_realm(TCHAR_TO_UTF8(*(in->_realm.Realm)));
        break;
    }
    switch (in->_play_time._play_timeCase)
    {
    case EGrpcSroCharactersEditCharacterRequest_play_time::PlayTime:
        out->set_play_time(in->_play_time.PlayTime);
        break;
    }
    switch (in->_location._locationCase)
    {
    case EGrpcSroCharactersEditCharacterRequest_location::Location:
        TURBOLINK_TO_GRPC(in->_location.Location.Get(), out->mutable_location());
        break;
    }
}

void GRPC_TO_TURBOLINK(const ::sro::characters::CharacterResponse* in, FGrpcSroCharactersCharacterResponse* out)
{
    out->Id=in->id();
    out->Owner=UTF8_TO_TCHAR(in->owner().c_str());
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
    out->Gender=UTF8_TO_TCHAR(in->gender().c_str());
    out->Realm=UTF8_TO_TCHAR(in->realm().c_str());
    out->PlayTime=in->play_time();
    {
        FGrpcSroCharactersLocation field;
        GRPC_TO_TURBOLINK(&(in->location()), &field);
        out->Location = MakeShareable(new FGrpcSroCharactersLocation(field));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharactersCharacterResponse* in, ::sro::characters::CharacterResponse* out)
{
    out->set_id(in->Id);
    out->set_owner(TCHAR_TO_UTF8(*(in->Owner)));
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
    out->set_gender(TCHAR_TO_UTF8(*(in->Gender)));
    out->set_realm(TCHAR_TO_UTF8(*(in->Realm)));
    out->set_play_time(in->PlayTime);
    TURBOLINK_TO_GRPC(in->Location.Get(), out->mutable_location());
}

void GRPC_TO_TURBOLINK(const ::sro::characters::Location* in, FGrpcSroCharactersLocation* out)
{
    out->World=UTF8_TO_TCHAR(in->world().c_str());
    out->X=in->x();
    out->Y=in->y();
    out->Z=in->z();
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharactersLocation* in, ::sro::characters::Location* out)
{
    out->set_world(TCHAR_TO_UTF8(*(in->World)));
    out->set_x(in->X);
    out->set_y(in->Y);
    out->set_z(in->Z);
}

void GRPC_TO_TURBOLINK(const ::sro::characters::CharactersResponse* in, FGrpcSroCharactersCharactersResponse* out)
{
    out->Characters.Empty();
    for (int i=0; i<in->characters_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->characters(i)), &(out->Characters.AddZeroed_GetRef()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharactersCharactersResponse* in, ::sro::characters::CharactersResponse* out)
{
    for(const auto& value : in->Characters) {
        TURBOLINK_TO_GRPC(&value, out->add_characters());
    } 
}

void GRPC_TO_TURBOLINK(const ::sro::characters::Gender* in, FGrpcSroCharactersGender* out)
{
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharactersGender* in, ::sro::characters::Gender* out)
{
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
}

void GRPC_TO_TURBOLINK(const ::sro::characters::Realm* in, FGrpcSroCharactersRealm* out)
{
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharactersRealm* in, ::sro::characters::Realm* out)
{
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
}

void GRPC_TO_TURBOLINK(const ::sro::characters::Genders* in, FGrpcSroCharactersGenders* out)
{
    out->Genders.Empty();
    for (int i=0; i<in->genders_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->genders(i)), &(out->Genders.AddZeroed_GetRef()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharactersGenders* in, ::sro::characters::Genders* out)
{
    for(const auto& value : in->Genders) {
        TURBOLINK_TO_GRPC(&value, out->add_genders());
    } 
}

void GRPC_TO_TURBOLINK(const ::sro::characters::Realms* in, FGrpcSroCharactersRealms* out)
{
    out->Realms.Empty();
    for (int i=0; i<in->realms_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->realms(i)), &(out->Realms.AddZeroed_GetRef()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharactersRealms* in, ::sro::characters::Realms* out)
{
    for(const auto& value : in->Realms) {
        TURBOLINK_TO_GRPC(&value, out->add_realms());
    } 
}

