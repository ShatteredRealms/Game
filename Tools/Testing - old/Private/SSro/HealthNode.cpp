//Generated by TurboLink CodeGenerator, do not edit!
#include "SSro/HealthNode.h"
#include "SSro/HealthService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"

UCallHealthServiceHealth* UCallHealthServiceHealth::Health(UObject* WorldContextObject, const FGrpcGoogleProtobufEmpty& Request)
{
	UCallHealthServiceHealth* node = NewObject<UCallHealthServiceHealth>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->HealthService = Cast<UHealthService>(turboLinkManager->MakeService("HealthService"));
	if (node->HealthService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->HealthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallHealthServiceHealth::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->HealthService->Connect();
	}));
	return node;
}

void UCallHealthServiceHealth::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroHealthMessage response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		HealthServiceClient = HealthService->MakeClient();
		HealthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallHealthServiceHealth::OnContextStateChange);
		HealthServiceClient->OnHealthResponse.AddUniqueDynamic(this, &UCallHealthServiceHealth::OnResponse);

		Context = HealthServiceClient->InitHealth();
		HealthServiceClient->Health(Context, Request);
	}
}

void UCallHealthServiceHealth::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallHealthServiceHealth::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroHealthMessage& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallHealthServiceHealth::Shutdown()
{
	HealthService->OnServiceStateChanged.RemoveDynamic(this, &UCallHealthServiceHealth::OnServiceStateChanged);
	if (HealthServiceClient != nullptr)
	{
		HealthService->RemoveClient(HealthServiceClient);
		HealthServiceClient->Shutdown();
		HealthServiceClient = nullptr;
	}

	if (HealthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(HealthService);
		HealthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
