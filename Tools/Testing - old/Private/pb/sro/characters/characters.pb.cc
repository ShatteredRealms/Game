#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sro/characters/characters.proto

#include "sro/characters/characters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sro {
namespace characters {
constexpr PlayTimeResponse::PlayTimeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(uint64_t{0u}){}
struct PlayTimeResponseDefaultTypeInternal {
  constexpr PlayTimeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayTimeResponseDefaultTypeInternal() {}
  union {
    PlayTimeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayTimeResponseDefaultTypeInternal _PlayTimeResponse_default_instance_;
constexpr AddPlayTimeRequest::AddPlayTimeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : character_(nullptr)
  , time_(uint64_t{0u}){}
struct AddPlayTimeRequestDefaultTypeInternal {
  constexpr AddPlayTimeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddPlayTimeRequestDefaultTypeInternal() {}
  union {
    AddPlayTimeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddPlayTimeRequestDefaultTypeInternal _AddPlayTimeRequest_default_instance_;
constexpr CreateCharacterRequest::CreateCharacterRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , realm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_(nullptr){}
struct CreateCharacterRequestDefaultTypeInternal {
  constexpr CreateCharacterRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateCharacterRequestDefaultTypeInternal() {}
  union {
    CreateCharacterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateCharacterRequestDefaultTypeInternal _CreateCharacterRequest_default_instance_;
constexpr CharacterTarget::CharacterTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CharacterTargetDefaultTypeInternal {
  constexpr CharacterTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CharacterTargetDefaultTypeInternal() {}
  union {
    CharacterTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CharacterTargetDefaultTypeInternal _CharacterTarget_default_instance_;
constexpr EditCharacterRequest::EditCharacterRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , new_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , realm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_(nullptr)
  , location_(nullptr)
  , play_time_(uint64_t{0u}){}
struct EditCharacterRequestDefaultTypeInternal {
  constexpr EditCharacterRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EditCharacterRequestDefaultTypeInternal() {}
  union {
    EditCharacterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EditCharacterRequestDefaultTypeInternal _EditCharacterRequest_default_instance_;
constexpr CharacterResponse::CharacterResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , realm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , location_(nullptr)
  , id_(uint64_t{0u})
  , play_time_(uint64_t{0u}){}
struct CharacterResponseDefaultTypeInternal {
  constexpr CharacterResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CharacterResponseDefaultTypeInternal() {}
  union {
    CharacterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CharacterResponseDefaultTypeInternal _CharacterResponse_default_instance_;
constexpr Location::Location(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : world_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_(0)
  , y_(0)
  , z_(0){}
struct LocationDefaultTypeInternal {
  constexpr LocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocationDefaultTypeInternal _Location_default_instance_;
constexpr CharactersResponse::CharactersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : characters_(){}
struct CharactersResponseDefaultTypeInternal {
  constexpr CharactersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CharactersResponseDefaultTypeInternal() {}
  union {
    CharactersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CharactersResponseDefaultTypeInternal _CharactersResponse_default_instance_;
constexpr Gender::Gender(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GenderDefaultTypeInternal {
  constexpr GenderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenderDefaultTypeInternal() {}
  union {
    Gender _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenderDefaultTypeInternal _Gender_default_instance_;
constexpr Realm::Realm(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RealmDefaultTypeInternal {
  constexpr RealmDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RealmDefaultTypeInternal() {}
  union {
    Realm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RealmDefaultTypeInternal _Realm_default_instance_;
constexpr Genders::Genders(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : genders_(){}
struct GendersDefaultTypeInternal {
  constexpr GendersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GendersDefaultTypeInternal() {}
  union {
    Genders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GendersDefaultTypeInternal _Genders_default_instance_;
constexpr Realms::Realms(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : realms_(){}
struct RealmsDefaultTypeInternal {
  constexpr RealmsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RealmsDefaultTypeInternal() {}
  union {
    Realms _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RealmsDefaultTypeInternal _Realms_default_instance_;
}  // namespace characters
}  // namespace sro
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sro_2fcharacters_2fcharacters_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sro_2fcharacters_2fcharacters_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sro_2fcharacters_2fcharacters_2eproto = nullptr;

const uint32_t TableStruct_sro_2fcharacters_2fcharacters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::PlayTimeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::PlayTimeResponse, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::AddPlayTimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::AddPlayTimeRequest, character_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::AddPlayTimeRequest, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::CreateCharacterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::CreateCharacterRequest, owner_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::CreateCharacterRequest, name_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::CreateCharacterRequest, gender_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::CreateCharacterRequest, realm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::CharacterTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sro::characters::CharacterTarget, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sro::characters::CharacterTarget, target_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::EditCharacterRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::EditCharacterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::EditCharacterRequest, target_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::EditCharacterRequest, owner_id_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::EditCharacterRequest, new_name_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::EditCharacterRequest, gender_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::EditCharacterRequest, realm_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::EditCharacterRequest, play_time_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::EditCharacterRequest, location_),
  ~0u,
  0,
  1,
  2,
  3,
  5,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::CharacterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::CharacterResponse, id_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::CharacterResponse, owner_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::CharacterResponse, name_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::CharacterResponse, gender_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::CharacterResponse, realm_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::CharacterResponse, play_time_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::CharacterResponse, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Location, world_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::Location, x_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::Location, y_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::Location, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::CharactersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::CharactersResponse, characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Gender, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Gender, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Realm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Realm, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Genders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Genders, genders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Realms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Realms, realms_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sro::characters::PlayTimeResponse)},
  { 7, -1, -1, sizeof(::sro::characters::AddPlayTimeRequest)},
  { 15, -1, -1, sizeof(::sro::characters::CreateCharacterRequest)},
  { 25, -1, -1, sizeof(::sro::characters::CharacterTarget)},
  { 34, 47, -1, sizeof(::sro::characters::EditCharacterRequest)},
  { 54, -1, -1, sizeof(::sro::characters::CharacterResponse)},
  { 67, -1, -1, sizeof(::sro::characters::Location)},
  { 77, -1, -1, sizeof(::sro::characters::CharactersResponse)},
  { 84, -1, -1, sizeof(::sro::characters::Gender)},
  { 91, -1, -1, sizeof(::sro::characters::Realm)},
  { 98, -1, -1, sizeof(::sro::characters::Genders)},
  { 105, -1, -1, sizeof(::sro::characters::Realms)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_PlayTimeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_AddPlayTimeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_CreateCharacterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_CharacterTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_EditCharacterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_CharacterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_CharactersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_Gender_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_Realm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_Genders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_Realms_default_instance_),
};

const char descriptor_table_protodef_sro_2fcharacters_2fcharacters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037sro/characters/characters.proto\022\016sro.c"
  "haracters\032\021sro/globals.proto\032\034google/api"
  "/annotations.proto\032\033google/protobuf/empt"
  "y.proto\" \n\020PlayTimeResponse\022\014\n\004time\030\001 \001("
  "\004\"V\n\022AddPlayTimeRequest\0222\n\tcharacter\030\001 \001"
  "(\0132\037.sro.characters.CharacterTarget\022\014\n\004t"
  "ime\030\002 \001(\004\"e\n\026CreateCharacterRequest\022\036\n\005o"
  "wner\030\001 \001(\0132\017.sro.UserTarget\022\014\n\004name\030\002 \001("
  "\t\022\016\n\006gender\030\003 \001(\t\022\r\n\005realm\030\004 \001(\t\"9\n\017Char"
  "acterTarget\022\014\n\002id\030\001 \001(\004H\000\022\016\n\004name\030\002 \001(\tH"
  "\000B\010\n\006target\"\261\002\n\024EditCharacterRequest\022/\n\006"
  "target\030\001 \001(\0132\037.sro.characters.CharacterT"
  "arget\022\025\n\010owner_id\030\003 \001(\tH\000\210\001\001\022\025\n\010new_name"
  "\030\004 \001(\tH\001\210\001\001\022\023\n\006gender\030\005 \001(\tH\002\210\001\001\022\022\n\005real"
  "m\030\006 \001(\tH\003\210\001\001\022\026\n\tplay_time\030\007 \001(\004H\004\210\001\001\022/\n\010"
  "location\030\010 \001(\0132\030.sro.characters.Location"
  "H\005\210\001\001B\013\n\t_owner_idB\013\n\t_new_nameB\t\n\007_gend"
  "erB\010\n\006_realmB\014\n\n_play_timeB\013\n\t_location\""
  "\232\001\n\021CharacterResponse\022\n\n\002id\030\001 \001(\004\022\r\n\005own"
  "er\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\016\n\006gender\030\004 \001(\t\022\r"
  "\n\005realm\030\005 \001(\t\022\021\n\tplay_time\030\006 \001(\004\022*\n\010loca"
  "tion\030\010 \001(\0132\030.sro.characters.Location\":\n\010"
  "Location\022\r\n\005world\030\001 \001(\t\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030"
  "\003 \001(\002\022\t\n\001z\030\004 \001(\002\"K\n\022CharactersResponse\0225"
  "\n\ncharacters\030\001 \003(\0132!.sro.characters.Char"
  "acterResponse\"\026\n\006Gender\022\014\n\004name\030\001 \001(\t\"\025\n"
  "\005Realm\022\014\n\004name\030\001 \001(\t\"2\n\007Genders\022\'\n\007gende"
  "rs\030\001 \003(\0132\026.sro.characters.Gender\"/\n\006Real"
  "ms\022%\n\006realms\030\001 \003(\0132\025.sro.characters.Real"
  "m2\210\n\n\021CharactersService\022R\n\nGetGenders\022\026."
  "google.protobuf.Empty\032\027.sro.characters.G"
  "enders\"\023\202\323\344\223\002\r\022\013/v1/genders\022O\n\tGetRealms"
  "\022\026.google.protobuf.Empty\032\026.sro.character"
  "s.Realms\"\022\202\323\344\223\002\014\022\n/v1/realms\022c\n\rGetChara"
  "cters\022\026.google.protobuf.Empty\032\".sro.char"
  "acters.CharactersResponse\"\026\202\323\344\223\002\020\022\016/v1/c"
  "haracters\022\220\001\n\014GetCharacter\022\037.sro.charact"
  "ers.CharacterTarget\032!.sro.characters.Cha"
  "racterResponse\"<\202\323\344\223\0026\022\026/v1/characters/i"
  "d/{id}Z\034\022\032/v1/characters/name/{name}\022\274\001\n"
  "\017CreateCharacter\022&.sro.characters.Create"
  "CharacterRequest\032!.sro.characters.Charac"
  "terResponse\"^\202\323\344\223\002X\"\"/v1/users/id/{owner"
  ".id}/characters:\001*Z/\"*/v1/users/name/{ow"
  "ner.username}/characters:\001*\022\210\001\n\017DeleteCh"
  "aracter\022\037.sro.characters.CharacterTarget"
  "\032\026.google.protobuf.Empty\"<\202\323\344\223\0026*\026/v1/ch"
  "aracters/id/{id}Z\034*\032/v1/characters/name/"
  "{name}\022\240\001\n\027GetAllCharactersForUser\022\017.sro"
  ".UserTarget\032\".sro.characters.CharactersR"
  "esponse\"P\202\323\344\223\002J\022\034/v1/users/id/{id}/chara"
  "ctersZ*\022(/v1/users/username/{username}/c"
  "haracters\022\237\001\n\rEditCharacter\022$.sro.charac"
  "ters.EditCharacterRequest\032\026.google.proto"
  "buf.Empty\"P\202\323\344\223\002J\032\035/v1/characters/id/{ta"
  "rget.id}:\001*Z&\032!/v1/characters/name/{targ"
  "et.name}:\001*\022\306\001\n\024AddCharacterPlayTime\022\".s"
  "ro.characters.AddPlayTimeRequest\032 .sro.c"
  "haracters.PlayTimeResponse\"h\202\323\344\223\002b\032)/v1/"
  "characters/id/{character.id}/playtime:\001*"
  "Z2\032-/v1/characters/name/{character.name}"
  "/playtime:\001*B\010Z\006pkg/pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sro_2fcharacters_2fcharacters_2eproto_deps[3] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_sro_2fglobals_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sro_2fcharacters_2fcharacters_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sro_2fcharacters_2fcharacters_2eproto = {
  false, false, 2470, descriptor_table_protodef_sro_2fcharacters_2fcharacters_2eproto, "sro/characters/characters.proto", 
  &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_once, descriptor_table_sro_2fcharacters_2fcharacters_2eproto_deps, 3, 12,
  schemas, file_default_instances, TableStruct_sro_2fcharacters_2fcharacters_2eproto::offsets,
  file_level_metadata_sro_2fcharacters_2fcharacters_2eproto, file_level_enum_descriptors_sro_2fcharacters_2fcharacters_2eproto, file_level_service_descriptors_sro_2fcharacters_2fcharacters_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sro_2fcharacters_2fcharacters_2eproto_getter() {
  return &descriptor_table_sro_2fcharacters_2fcharacters_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sro_2fcharacters_2fcharacters_2eproto(&descriptor_table_sro_2fcharacters_2fcharacters_2eproto);
namespace sro {
namespace characters {

// ===================================================================

class PlayTimeResponse::_Internal {
 public:
};

PlayTimeResponse::PlayTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.PlayTimeResponse)
}
PlayTimeResponse::PlayTimeResponse(const PlayTimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:sro.characters.PlayTimeResponse)
}

inline void PlayTimeResponse::SharedCtor() {
time_ = uint64_t{0u};
}

PlayTimeResponse::~PlayTimeResponse() {
  // @@protoc_insertion_point(destructor:sro.characters.PlayTimeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayTimeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayTimeResponse::ArenaDtor(void* object) {
  PlayTimeResponse* _this = reinterpret_cast< PlayTimeResponse* >(object);
  (void)_this;
}
void PlayTimeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayTimeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.PlayTimeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayTimeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayTimeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.PlayTimeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.PlayTimeResponse)
  return target;
}

size_t PlayTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.PlayTimeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayTimeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayTimeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayTimeResponse::GetClassData() const { return &_class_data_; }

void PlayTimeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayTimeResponse *>(to)->MergeFrom(
      static_cast<const PlayTimeResponse &>(from));
}


void PlayTimeResponse::MergeFrom(const PlayTimeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.PlayTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayTimeResponse::CopyFrom(const PlayTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.PlayTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayTimeResponse::IsInitialized() const {
  return true;
}

void PlayTimeResponse::InternalSwap(PlayTimeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayTimeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_getter, &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_once,
      file_level_metadata_sro_2fcharacters_2fcharacters_2eproto[0]);
}

// ===================================================================

class AddPlayTimeRequest::_Internal {
 public:
  static const ::sro::characters::CharacterTarget& character(const AddPlayTimeRequest* msg);
};

const ::sro::characters::CharacterTarget&
AddPlayTimeRequest::_Internal::character(const AddPlayTimeRequest* msg) {
  return *msg->character_;
}
AddPlayTimeRequest::AddPlayTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.AddPlayTimeRequest)
}
AddPlayTimeRequest::AddPlayTimeRequest(const AddPlayTimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_character()) {
    character_ = new ::sro::characters::CharacterTarget(*from.character_);
  } else {
    character_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:sro.characters.AddPlayTimeRequest)
}

inline void AddPlayTimeRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&character_)) + sizeof(time_));
}

AddPlayTimeRequest::~AddPlayTimeRequest() {
  // @@protoc_insertion_point(destructor:sro.characters.AddPlayTimeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddPlayTimeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete character_;
}

void AddPlayTimeRequest::ArenaDtor(void* object) {
  AddPlayTimeRequest* _this = reinterpret_cast< AddPlayTimeRequest* >(object);
  (void)_this;
}
void AddPlayTimeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPlayTimeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddPlayTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.AddPlayTimeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
  time_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPlayTimeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sro.characters.CharacterTarget character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_character(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddPlayTimeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.AddPlayTimeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sro.characters.CharacterTarget character = 1;
  if (this->_internal_has_character()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::character(this), target, stream);
  }

  // uint64 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.AddPlayTimeRequest)
  return target;
}

size_t AddPlayTimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.AddPlayTimeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sro.characters.CharacterTarget character = 1;
  if (this->_internal_has_character()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *character_);
  }

  // uint64 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddPlayTimeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddPlayTimeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddPlayTimeRequest::GetClassData() const { return &_class_data_; }

void AddPlayTimeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddPlayTimeRequest *>(to)->MergeFrom(
      static_cast<const AddPlayTimeRequest &>(from));
}


void AddPlayTimeRequest::MergeFrom(const AddPlayTimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.AddPlayTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_character()) {
    _internal_mutable_character()->::sro::characters::CharacterTarget::MergeFrom(from._internal_character());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddPlayTimeRequest::CopyFrom(const AddPlayTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.AddPlayTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPlayTimeRequest::IsInitialized() const {
  return true;
}

void AddPlayTimeRequest::InternalSwap(AddPlayTimeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddPlayTimeRequest, time_)
      + sizeof(AddPlayTimeRequest::time_)
      - PROTOBUF_FIELD_OFFSET(AddPlayTimeRequest, character_)>(
          reinterpret_cast<char*>(&character_),
          reinterpret_cast<char*>(&other->character_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPlayTimeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_getter, &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_once,
      file_level_metadata_sro_2fcharacters_2fcharacters_2eproto[1]);
}

// ===================================================================

class CreateCharacterRequest::_Internal {
 public:
  static const ::sro::UserTarget& owner(const CreateCharacterRequest* msg);
};

const ::sro::UserTarget&
CreateCharacterRequest::_Internal::owner(const CreateCharacterRequest* msg) {
  return *msg->owner_;
}
void CreateCharacterRequest::clear_owner() {
  if (GetArenaForAllocation() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
CreateCharacterRequest::CreateCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.CreateCharacterRequest)
}
CreateCharacterRequest::CreateCharacterRequest(const CreateCharacterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  gender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gender().empty()) {
    gender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gender(), 
      GetArenaForAllocation());
  }
  realm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    realm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_realm().empty()) {
    realm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_realm(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_owner()) {
    owner_ = new ::sro::UserTarget(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sro.characters.CreateCharacterRequest)
}

inline void CreateCharacterRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
realm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  realm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
owner_ = nullptr;
}

CreateCharacterRequest::~CreateCharacterRequest() {
  // @@protoc_insertion_point(destructor:sro.characters.CreateCharacterRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateCharacterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  realm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_;
}

void CreateCharacterRequest::ArenaDtor(void* object) {
  CreateCharacterRequest* _this = reinterpret_cast< CreateCharacterRequest* >(object);
  (void)_this;
}
void CreateCharacterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateCharacterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateCharacterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.CreateCharacterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  gender_.ClearToEmpty();
  realm_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCharacterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sro.UserTarget owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.CreateCharacterRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.CreateCharacterRequest.gender"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string realm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_realm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.CreateCharacterRequest.realm"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateCharacterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.CreateCharacterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sro.UserTarget owner = 1;
  if (this->_internal_has_owner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::owner(this), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.CreateCharacterRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string gender = 3;
  if (!this->_internal_gender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gender().data(), static_cast<int>(this->_internal_gender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.CreateCharacterRequest.gender");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gender(), target);
  }

  // string realm = 4;
  if (!this->_internal_realm().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_realm().data(), static_cast<int>(this->_internal_realm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.CreateCharacterRequest.realm");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_realm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.CreateCharacterRequest)
  return target;
}

size_t CreateCharacterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.CreateCharacterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string gender = 3;
  if (!this->_internal_gender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gender());
  }

  // string realm = 4;
  if (!this->_internal_realm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_realm());
  }

  // .sro.UserTarget owner = 1;
  if (this->_internal_has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateCharacterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateCharacterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateCharacterRequest::GetClassData() const { return &_class_data_; }

void CreateCharacterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateCharacterRequest *>(to)->MergeFrom(
      static_cast<const CreateCharacterRequest &>(from));
}


void CreateCharacterRequest::MergeFrom(const CreateCharacterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.CreateCharacterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_gender().empty()) {
    _internal_set_gender(from._internal_gender());
  }
  if (!from._internal_realm().empty()) {
    _internal_set_realm(from._internal_realm());
  }
  if (from._internal_has_owner()) {
    _internal_mutable_owner()->::sro::UserTarget::MergeFrom(from._internal_owner());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateCharacterRequest::CopyFrom(const CreateCharacterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.CreateCharacterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCharacterRequest::IsInitialized() const {
  return true;
}

void CreateCharacterRequest::InternalSwap(CreateCharacterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gender_, lhs_arena,
      &other->gender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &realm_, lhs_arena,
      &other->realm_, rhs_arena
  );
  swap(owner_, other->owner_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCharacterRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_getter, &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_once,
      file_level_metadata_sro_2fcharacters_2fcharacters_2eproto[2]);
}

// ===================================================================

class CharacterTarget::_Internal {
 public:
};

CharacterTarget::CharacterTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.CharacterTarget)
}
CharacterTarget::CharacterTarget(const CharacterTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_target();
  switch (from.target_case()) {
    case kId: {
      _internal_set_id(from._internal_id());
      break;
    }
    case kName: {
      _internal_set_name(from._internal_name());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sro.characters.CharacterTarget)
}

inline void CharacterTarget::SharedCtor() {
clear_has_target();
}

CharacterTarget::~CharacterTarget() {
  // @@protoc_insertion_point(destructor:sro.characters.CharacterTarget)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CharacterTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_target()) {
    clear_target();
  }
}

void CharacterTarget::ArenaDtor(void* object) {
  CharacterTarget* _this = reinterpret_cast< CharacterTarget* >(object);
  (void)_this;
}
void CharacterTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CharacterTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CharacterTarget::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:sro.characters.CharacterTarget)
  switch (target_case()) {
    case kId: {
      // No need to clear
      break;
    }
    case kName: {
      target_.name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void CharacterTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.CharacterTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_target();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.CharacterTarget.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.CharacterTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.CharacterTarget.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.CharacterTarget)
  return target;
}

size_t CharacterTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.CharacterTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (target_case()) {
    // uint64 id = 1;
    case kId: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
      break;
    }
    // string name = 2;
    case kName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CharacterTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterTarget::GetClassData() const { return &_class_data_; }

void CharacterTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CharacterTarget *>(to)->MergeFrom(
      static_cast<const CharacterTarget &>(from));
}


void CharacterTarget::MergeFrom(const CharacterTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.CharacterTarget)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.target_case()) {
    case kId: {
      _internal_set_id(from._internal_id());
      break;
    }
    case kName: {
      _internal_set_name(from._internal_name());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterTarget::CopyFrom(const CharacterTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.CharacterTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterTarget::IsInitialized() const {
  return true;
}

void CharacterTarget::InternalSwap(CharacterTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterTarget::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_getter, &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_once,
      file_level_metadata_sro_2fcharacters_2fcharacters_2eproto[3]);
}

// ===================================================================

class EditCharacterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EditCharacterRequest>()._has_bits_);
  static const ::sro::characters::CharacterTarget& target(const EditCharacterRequest* msg);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gender(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_realm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_play_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::sro::characters::Location& location(const EditCharacterRequest* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::sro::characters::CharacterTarget&
EditCharacterRequest::_Internal::target(const EditCharacterRequest* msg) {
  return *msg->target_;
}
const ::sro::characters::Location&
EditCharacterRequest::_Internal::location(const EditCharacterRequest* msg) {
  return *msg->location_;
}
EditCharacterRequest::EditCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.EditCharacterRequest)
}
EditCharacterRequest::EditCharacterRequest(const EditCharacterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_owner_id()) {
    owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_id(), 
      GetArenaForAllocation());
  }
  new_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    new_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_new_name()) {
    new_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_name(), 
      GetArenaForAllocation());
  }
  gender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gender()) {
    gender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gender(), 
      GetArenaForAllocation());
  }
  realm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    realm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_realm()) {
    realm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_realm(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_target()) {
    target_ = new ::sro::characters::CharacterTarget(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from._internal_has_location()) {
    location_ = new ::sro::characters::Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  play_time_ = from.play_time_;
  // @@protoc_insertion_point(copy_constructor:sro.characters.EditCharacterRequest)
}

inline void EditCharacterRequest::SharedCtor() {
owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
new_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  new_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
realm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  realm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&play_time_) -
    reinterpret_cast<char*>(&target_)) + sizeof(play_time_));
}

EditCharacterRequest::~EditCharacterRequest() {
  // @@protoc_insertion_point(destructor:sro.characters.EditCharacterRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EditCharacterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  realm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete location_;
}

void EditCharacterRequest::ArenaDtor(void* object) {
  EditCharacterRequest* _this = reinterpret_cast< EditCharacterRequest* >(object);
  (void)_this;
}
void EditCharacterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditCharacterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EditCharacterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.EditCharacterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      owner_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      new_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      gender_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      realm_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArenaForAllocation() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  if (cached_has_bits & 0x00000010u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  play_time_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditCharacterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sro.characters.CharacterTarget target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string owner_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_owner_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.EditCharacterRequest.owner_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string new_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_new_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.EditCharacterRequest.new_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string gender = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_gender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.EditCharacterRequest.gender"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string realm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_realm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.EditCharacterRequest.realm"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 play_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_play_time(&has_bits);
          play_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sro.characters.Location location = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EditCharacterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.EditCharacterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sro.characters.CharacterTarget target = 1;
  if (this->_internal_has_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  // optional string owner_id = 3;
  if (_internal_has_owner_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_id().data(), static_cast<int>(this->_internal_owner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.EditCharacterRequest.owner_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_owner_id(), target);
  }

  // optional string new_name = 4;
  if (_internal_has_new_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_name().data(), static_cast<int>(this->_internal_new_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.EditCharacterRequest.new_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_new_name(), target);
  }

  // optional string gender = 5;
  if (_internal_has_gender()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gender().data(), static_cast<int>(this->_internal_gender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.EditCharacterRequest.gender");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_gender(), target);
  }

  // optional string realm = 6;
  if (_internal_has_realm()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_realm().data(), static_cast<int>(this->_internal_realm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.EditCharacterRequest.realm");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_realm(), target);
  }

  // optional uint64 play_time = 7;
  if (_internal_has_play_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_play_time(), target);
  }

  // optional .sro.characters.Location location = 8;
  if (_internal_has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.EditCharacterRequest)
  return target;
}

size_t EditCharacterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.EditCharacterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string owner_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_owner_id());
    }

    // optional string new_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_new_name());
    }

    // optional string gender = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gender());
    }

    // optional string realm = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_realm());
    }

  }
  // .sro.characters.CharacterTarget target = 1;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  if (cached_has_bits & 0x00000030u) {
    // optional .sro.characters.Location location = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional uint64 play_time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_play_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditCharacterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EditCharacterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditCharacterRequest::GetClassData() const { return &_class_data_; }

void EditCharacterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EditCharacterRequest *>(to)->MergeFrom(
      static_cast<const EditCharacterRequest &>(from));
}


void EditCharacterRequest::MergeFrom(const EditCharacterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.EditCharacterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_owner_id(from._internal_owner_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_new_name(from._internal_new_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_gender(from._internal_gender());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_realm(from._internal_realm());
    }
  }
  if (from._internal_has_target()) {
    _internal_mutable_target()->::sro::characters::CharacterTarget::MergeFrom(from._internal_target());
  }
  if (cached_has_bits & 0x00000030u) {
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_location()->::sro::characters::Location::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000020u) {
      play_time_ = from.play_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditCharacterRequest::CopyFrom(const EditCharacterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.EditCharacterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditCharacterRequest::IsInitialized() const {
  return true;
}

void EditCharacterRequest::InternalSwap(EditCharacterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_id_, lhs_arena,
      &other->owner_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &new_name_, lhs_arena,
      &other->new_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gender_, lhs_arena,
      &other->gender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &realm_, lhs_arena,
      &other->realm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EditCharacterRequest, play_time_)
      + sizeof(EditCharacterRequest::play_time_)
      - PROTOBUF_FIELD_OFFSET(EditCharacterRequest, target_)>(
          reinterpret_cast<char*>(&target_),
          reinterpret_cast<char*>(&other->target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EditCharacterRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_getter, &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_once,
      file_level_metadata_sro_2fcharacters_2fcharacters_2eproto[4]);
}

// ===================================================================

class CharacterResponse::_Internal {
 public:
  static const ::sro::characters::Location& location(const CharacterResponse* msg);
};

const ::sro::characters::Location&
CharacterResponse::_Internal::location(const CharacterResponse* msg) {
  return *msg->location_;
}
CharacterResponse::CharacterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.CharacterResponse)
}
CharacterResponse::CharacterResponse(const CharacterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  gender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gender().empty()) {
    gender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gender(), 
      GetArenaForAllocation());
  }
  realm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    realm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_realm().empty()) {
    realm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_realm(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    location_ = new ::sro::characters::Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(play_time_));
  // @@protoc_insertion_point(copy_constructor:sro.characters.CharacterResponse)
}

inline void CharacterResponse::SharedCtor() {
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
realm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  realm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&play_time_) -
    reinterpret_cast<char*>(&location_)) + sizeof(play_time_));
}

CharacterResponse::~CharacterResponse() {
  // @@protoc_insertion_point(destructor:sro.characters.CharacterResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CharacterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  realm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void CharacterResponse::ArenaDtor(void* object) {
  CharacterResponse* _this = reinterpret_cast< CharacterResponse* >(object);
  (void)_this;
}
void CharacterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CharacterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CharacterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.CharacterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  name_.ClearToEmpty();
  gender_.ClearToEmpty();
  realm_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(play_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.CharacterResponse.owner"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.CharacterResponse.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string gender = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_gender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.CharacterResponse.gender"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string realm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_realm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.CharacterResponse.realm"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 play_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          play_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sro.characters.Location location = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.CharacterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string owner = 2;
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.CharacterResponse.owner");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.CharacterResponse.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string gender = 4;
  if (!this->_internal_gender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gender().data(), static_cast<int>(this->_internal_gender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.CharacterResponse.gender");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_gender(), target);
  }

  // string realm = 5;
  if (!this->_internal_realm().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_realm().data(), static_cast<int>(this->_internal_realm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.CharacterResponse.realm");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_realm(), target);
  }

  // uint64 play_time = 6;
  if (this->_internal_play_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_play_time(), target);
  }

  // .sro.characters.Location location = 8;
  if (this->_internal_has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.CharacterResponse)
  return target;
}

size_t CharacterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.CharacterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner = 2;
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string gender = 4;
  if (!this->_internal_gender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gender());
  }

  // string realm = 5;
  if (!this->_internal_realm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_realm());
  }

  // .sro.characters.Location location = 8;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 play_time = 6;
  if (this->_internal_play_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_play_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CharacterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterResponse::GetClassData() const { return &_class_data_; }

void CharacterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CharacterResponse *>(to)->MergeFrom(
      static_cast<const CharacterResponse &>(from));
}


void CharacterResponse::MergeFrom(const CharacterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.CharacterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_gender().empty()) {
    _internal_set_gender(from._internal_gender());
  }
  if (!from._internal_realm().empty()) {
    _internal_set_realm(from._internal_realm());
  }
  if (from._internal_has_location()) {
    _internal_mutable_location()->::sro::characters::Location::MergeFrom(from._internal_location());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_play_time() != 0) {
    _internal_set_play_time(from._internal_play_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterResponse::CopyFrom(const CharacterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.CharacterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterResponse::IsInitialized() const {
  return true;
}

void CharacterResponse::InternalSwap(CharacterResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, lhs_arena,
      &other->owner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gender_, lhs_arena,
      &other->gender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &realm_, lhs_arena,
      &other->realm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterResponse, play_time_)
      + sizeof(CharacterResponse::play_time_)
      - PROTOBUF_FIELD_OFFSET(CharacterResponse, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_getter, &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_once,
      file_level_metadata_sro_2fcharacters_2fcharacters_2eproto[5]);
}

// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  world_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    world_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_world().empty()) {
    world_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_world(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:sro.characters.Location)
}

inline void Location::SharedCtor() {
world_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  world_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:sro.characters.Location)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  world_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Location::ArenaDtor(void* object) {
  Location* _this = reinterpret_cast< Location* >(object);
  (void)_this;
}
void Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  world_.ClearToEmpty();
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string world = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_world();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.Location.world"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string world = 1;
  if (!this->_internal_world().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_world().data(), static_cast<int>(this->_internal_world().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.Location.world");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_world(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string world = 1;
  if (!this->_internal_world().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_world());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }

void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Location *>(to)->MergeFrom(
      static_cast<const Location &>(from));
}


void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.Location)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_world().empty()) {
    _internal_set_world(from._internal_world());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &world_, lhs_arena,
      &other->world_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, z_)
      + sizeof(Location::z_)
      - PROTOBUF_FIELD_OFFSET(Location, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_getter, &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_once,
      file_level_metadata_sro_2fcharacters_2fcharacters_2eproto[6]);
}

// ===================================================================

class CharactersResponse::_Internal {
 public:
};

CharactersResponse::CharactersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  characters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.CharactersResponse)
}
CharactersResponse::CharactersResponse(const CharactersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      characters_(from.characters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.characters.CharactersResponse)
}

inline void CharactersResponse::SharedCtor() {
}

CharactersResponse::~CharactersResponse() {
  // @@protoc_insertion_point(destructor:sro.characters.CharactersResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CharactersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CharactersResponse::ArenaDtor(void* object) {
  CharactersResponse* _this = reinterpret_cast< CharactersResponse* >(object);
  (void)_this;
}
void CharactersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CharactersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CharactersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.CharactersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  characters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharactersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sro.characters.CharacterResponse characters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharactersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.CharactersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sro.characters.CharacterResponse characters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_characters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_characters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.CharactersResponse)
  return target;
}

size_t CharactersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.CharactersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.characters.CharacterResponse characters = 1;
  total_size += 1UL * this->_internal_characters_size();
  for (const auto& msg : this->characters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharactersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CharactersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharactersResponse::GetClassData() const { return &_class_data_; }

void CharactersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CharactersResponse *>(to)->MergeFrom(
      static_cast<const CharactersResponse &>(from));
}


void CharactersResponse::MergeFrom(const CharactersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.CharactersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  characters_.MergeFrom(from.characters_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharactersResponse::CopyFrom(const CharactersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.CharactersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharactersResponse::IsInitialized() const {
  return true;
}

void CharactersResponse::InternalSwap(CharactersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  characters_.InternalSwap(&other->characters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CharactersResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_getter, &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_once,
      file_level_metadata_sro_2fcharacters_2fcharacters_2eproto[7]);
}

// ===================================================================

class Gender::_Internal {
 public:
};

Gender::Gender(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.Gender)
}
Gender::Gender(const Gender& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sro.characters.Gender)
}

inline void Gender::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Gender::~Gender() {
  // @@protoc_insertion_point(destructor:sro.characters.Gender)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Gender::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Gender::ArenaDtor(void* object) {
  Gender* _this = reinterpret_cast< Gender* >(object);
  (void)_this;
}
void Gender::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Gender::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Gender::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.Gender)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gender::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.Gender.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gender::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.Gender)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.Gender.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.Gender)
  return target;
}

size_t Gender::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.Gender)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gender::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Gender::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gender::GetClassData() const { return &_class_data_; }

void Gender::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Gender *>(to)->MergeFrom(
      static_cast<const Gender &>(from));
}


void Gender::MergeFrom(const Gender& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.Gender)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gender::CopyFrom(const Gender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.Gender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gender::IsInitialized() const {
  return true;
}

void Gender::InternalSwap(Gender* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Gender::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_getter, &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_once,
      file_level_metadata_sro_2fcharacters_2fcharacters_2eproto[8]);
}

// ===================================================================

class Realm::_Internal {
 public:
};

Realm::Realm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.Realm)
}
Realm::Realm(const Realm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sro.characters.Realm)
}

inline void Realm::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Realm::~Realm() {
  // @@protoc_insertion_point(destructor:sro.characters.Realm)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Realm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Realm::ArenaDtor(void* object) {
  Realm* _this = reinterpret_cast< Realm* >(object);
  (void)_this;
}
void Realm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Realm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Realm::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.Realm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Realm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.Realm.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Realm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.Realm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.Realm.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.Realm)
  return target;
}

size_t Realm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.Realm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Realm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Realm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Realm::GetClassData() const { return &_class_data_; }

void Realm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Realm *>(to)->MergeFrom(
      static_cast<const Realm &>(from));
}


void Realm::MergeFrom(const Realm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.Realm)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Realm::CopyFrom(const Realm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.Realm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Realm::IsInitialized() const {
  return true;
}

void Realm::InternalSwap(Realm* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Realm::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_getter, &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_once,
      file_level_metadata_sro_2fcharacters_2fcharacters_2eproto[9]);
}

// ===================================================================

class Genders::_Internal {
 public:
};

Genders::Genders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  genders_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.Genders)
}
Genders::Genders(const Genders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      genders_(from.genders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.characters.Genders)
}

inline void Genders::SharedCtor() {
}

Genders::~Genders() {
  // @@protoc_insertion_point(destructor:sro.characters.Genders)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Genders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Genders::ArenaDtor(void* object) {
  Genders* _this = reinterpret_cast< Genders* >(object);
  (void)_this;
}
void Genders::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Genders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Genders::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.Genders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  genders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Genders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sro.characters.Gender genders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_genders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Genders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.Genders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sro.characters.Gender genders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_genders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_genders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.Genders)
  return target;
}

size_t Genders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.Genders)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.characters.Gender genders = 1;
  total_size += 1UL * this->_internal_genders_size();
  for (const auto& msg : this->genders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Genders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Genders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Genders::GetClassData() const { return &_class_data_; }

void Genders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Genders *>(to)->MergeFrom(
      static_cast<const Genders &>(from));
}


void Genders::MergeFrom(const Genders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.Genders)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  genders_.MergeFrom(from.genders_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Genders::CopyFrom(const Genders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.Genders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Genders::IsInitialized() const {
  return true;
}

void Genders::InternalSwap(Genders* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  genders_.InternalSwap(&other->genders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Genders::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_getter, &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_once,
      file_level_metadata_sro_2fcharacters_2fcharacters_2eproto[10]);
}

// ===================================================================

class Realms::_Internal {
 public:
};

Realms::Realms(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  realms_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.Realms)
}
Realms::Realms(const Realms& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      realms_(from.realms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.characters.Realms)
}

inline void Realms::SharedCtor() {
}

Realms::~Realms() {
  // @@protoc_insertion_point(destructor:sro.characters.Realms)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Realms::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Realms::ArenaDtor(void* object) {
  Realms* _this = reinterpret_cast< Realms* >(object);
  (void)_this;
}
void Realms::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Realms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Realms::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.Realms)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  realms_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Realms::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sro.characters.Realm realms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_realms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Realms::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.Realms)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sro.characters.Realm realms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_realms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_realms(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.Realms)
  return target;
}

size_t Realms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.Realms)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.characters.Realm realms = 1;
  total_size += 1UL * this->_internal_realms_size();
  for (const auto& msg : this->realms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Realms::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Realms::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Realms::GetClassData() const { return &_class_data_; }

void Realms::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Realms *>(to)->MergeFrom(
      static_cast<const Realms &>(from));
}


void Realms::MergeFrom(const Realms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.Realms)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  realms_.MergeFrom(from.realms_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Realms::CopyFrom(const Realms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.Realms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Realms::IsInitialized() const {
  return true;
}

void Realms::InternalSwap(Realms* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  realms_.InternalSwap(&other->realms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Realms::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_getter, &descriptor_table_sro_2fcharacters_2fcharacters_2eproto_once,
      file_level_metadata_sro_2fcharacters_2fcharacters_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace characters
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sro::characters::PlayTimeResponse* Arena::CreateMaybeMessage< ::sro::characters::PlayTimeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::PlayTimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::AddPlayTimeRequest* Arena::CreateMaybeMessage< ::sro::characters::AddPlayTimeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::AddPlayTimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::CreateCharacterRequest* Arena::CreateMaybeMessage< ::sro::characters::CreateCharacterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::CreateCharacterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::CharacterTarget* Arena::CreateMaybeMessage< ::sro::characters::CharacterTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::CharacterTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::EditCharacterRequest* Arena::CreateMaybeMessage< ::sro::characters::EditCharacterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::EditCharacterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::CharacterResponse* Arena::CreateMaybeMessage< ::sro::characters::CharacterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::CharacterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::Location* Arena::CreateMaybeMessage< ::sro::characters::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::CharactersResponse* Arena::CreateMaybeMessage< ::sro::characters::CharactersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::CharactersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::Gender* Arena::CreateMaybeMessage< ::sro::characters::Gender >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::Gender >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::Realm* Arena::CreateMaybeMessage< ::sro::characters::Realm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::Realm >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::Genders* Arena::CreateMaybeMessage< ::sro::characters::Genders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::Genders >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::Realms* Arena::CreateMaybeMessage< ::sro::characters::Realms >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::Realms >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
