// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sro/chat/chat.proto
#ifndef GRPC_sro_2fchat_2fchat_2eproto__INCLUDED
#define GRPC_sro_2fchat_2fchat_2eproto__INCLUDED

#include "sro/chat/chat.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace sro {
namespace chat {

class ChatService final {
 public:
  static constexpr char const* service_full_name() {
    return "sro.chat.ChatService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::sro::chat::ChatMessage>> ConnectChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::sro::chat::ChatMessage>>(ConnectChannelRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>> AsyncConnectChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>>(AsyncConnectChannelRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>> PrepareAsyncConnectChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>>(PrepareAsyncConnectChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::sro::chat::ChatMessage>> ConnectDirectMessage(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::sro::chat::ChatMessage>>(ConnectDirectMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>> AsyncConnectDirectMessage(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>>(AsyncConnectDirectMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>> PrepareAsyncConnectDirectMessage(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>>(PrepareAsyncConnectDirectMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status SendChatMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncSendChatMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncSendChatMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncSendChatMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncSendChatMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncSendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncSendDirectMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncSendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncSendDirectMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status GetChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::sro::chat::ChatChannel* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>> AsyncGetChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>>(AsyncGetChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>> PrepareAsyncGetChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>>(PrepareAsyncGetChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status AllChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::chat::ChatChannels* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>> AsyncAllChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>>(AsyncAllChatChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>> PrepareAsyncAllChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>>(PrepareAsyncAllChatChannelsRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncCreateChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncCreateChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncCreateChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncCreateChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status EditChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncEditChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncEditChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncEditChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncEditChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::sro::chat::ChatChannels* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>> AsyncGetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>>(AsyncGetAuthorizedChatChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>> PrepareAsyncGetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>>(PrepareAsyncGetAuthorizedChatChannelsRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateUserChatChannelAuthorizations(::grpc::ClientContext* context, const ::sro::chat::RequestChatChannelAuthChange& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncUpdateUserChatChannelAuthorizations(::grpc::ClientContext* context, const ::sro::chat::RequestChatChannelAuthChange& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncUpdateUserChatChannelAuthorizationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncUpdateUserChatChannelAuthorizations(::grpc::ClientContext* context, const ::sro::chat::RequestChatChannelAuthChange& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncUpdateUserChatChannelAuthorizationsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ConnectChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget* request, ::grpc::ClientReadReactor< ::sro::chat::ChatMessage>* reactor) = 0;
      virtual void ConnectDirectMessage(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget* request, ::grpc::ClientReadReactor< ::sro::chat::ChatMessage>* reactor) = 0;
      virtual void SendChatMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendChatMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget* request, ::sro::chat::ChatChannel* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget* request, ::sro::chat::ChatChannel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AllChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AllChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EditChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EditChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget* request, ::sro::chat::ChatChannels* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget* request, ::sro::chat::ChatChannels* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateUserChatChannelAuthorizations(::grpc::ClientContext* context, const ::sro::chat::RequestChatChannelAuthChange* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateUserChatChannelAuthorizations(::grpc::ClientContext* context, const ::sro::chat::RequestChatChannelAuthChange* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::sro::chat::ChatMessage>* ConnectChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>* AsyncConnectChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>* PrepareAsyncConnectChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::sro::chat::ChatMessage>* ConnectDirectMessageRaw(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>* AsyncConnectDirectMessageRaw(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>* PrepareAsyncConnectDirectMessageRaw(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncSendChatMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncSendChatMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>* AsyncGetChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>* PrepareAsyncGetChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>* AsyncAllChatChannelsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>* PrepareAsyncAllChatChannelsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncCreateChannelRaw(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncCreateChannelRaw(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncEditChannelRaw(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncEditChannelRaw(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>* AsyncGetAuthorizedChatChannelsRaw(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>* PrepareAsyncGetAuthorizedChatChannelsRaw(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncUpdateUserChatChannelAuthorizationsRaw(::grpc::ClientContext* context, const ::sro::chat::RequestChatChannelAuthChange& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncUpdateUserChatChannelAuthorizationsRaw(::grpc::ClientContext* context, const ::sro::chat::RequestChatChannelAuthChange& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::sro::chat::ChatMessage>> ConnectChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::sro::chat::ChatMessage>>(ConnectChannelRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>> AsyncConnectChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>>(AsyncConnectChannelRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>> PrepareAsyncConnectChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>>(PrepareAsyncConnectChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::sro::chat::ChatMessage>> ConnectDirectMessage(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::sro::chat::ChatMessage>>(ConnectDirectMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>> AsyncConnectDirectMessage(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>>(AsyncConnectDirectMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>> PrepareAsyncConnectDirectMessage(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>>(PrepareAsyncConnectDirectMessageRaw(context, request, cq));
    }
    ::grpc::Status SendChatMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncSendChatMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncSendChatMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncSendChatMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncSendChatMessageRaw(context, request, cq));
    }
    ::grpc::Status SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncSendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncSendDirectMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncSendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncSendDirectMessageRaw(context, request, cq));
    }
    ::grpc::Status GetChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::sro::chat::ChatChannel* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>> AsyncGetChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>>(AsyncGetChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>> PrepareAsyncGetChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>>(PrepareAsyncGetChannelRaw(context, request, cq));
    }
    ::grpc::Status AllChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::chat::ChatChannels* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>> AsyncAllChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>>(AsyncAllChatChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>> PrepareAsyncAllChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>>(PrepareAsyncAllChatChannelsRaw(context, request, cq));
    }
    ::grpc::Status CreateChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncCreateChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncCreateChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncCreateChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncCreateChannelRaw(context, request, cq));
    }
    ::grpc::Status DeleteChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteChannelRaw(context, request, cq));
    }
    ::grpc::Status EditChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncEditChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncEditChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncEditChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncEditChannelRaw(context, request, cq));
    }
    ::grpc::Status GetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::sro::chat::ChatChannels* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>> AsyncGetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>>(AsyncGetAuthorizedChatChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>> PrepareAsyncGetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>>(PrepareAsyncGetAuthorizedChatChannelsRaw(context, request, cq));
    }
    ::grpc::Status UpdateUserChatChannelAuthorizations(::grpc::ClientContext* context, const ::sro::chat::RequestChatChannelAuthChange& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncUpdateUserChatChannelAuthorizations(::grpc::ClientContext* context, const ::sro::chat::RequestChatChannelAuthChange& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncUpdateUserChatChannelAuthorizationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncUpdateUserChatChannelAuthorizations(::grpc::ClientContext* context, const ::sro::chat::RequestChatChannelAuthChange& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncUpdateUserChatChannelAuthorizationsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ConnectChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget* request, ::grpc::ClientReadReactor< ::sro::chat::ChatMessage>* reactor) override;
      void ConnectDirectMessage(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget* request, ::grpc::ClientReadReactor< ::sro::chat::ChatMessage>* reactor) override;
      void SendChatMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void SendChatMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget* request, ::sro::chat::ChatChannel* response, std::function<void(::grpc::Status)>) override;
      void GetChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget* request, ::sro::chat::ChatChannel* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AllChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response, std::function<void(::grpc::Status)>) override;
      void AllChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void CreateChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteChannel(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EditChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void EditChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget* request, ::sro::chat::ChatChannels* response, std::function<void(::grpc::Status)>) override;
      void GetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget* request, ::sro::chat::ChatChannels* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateUserChatChannelAuthorizations(::grpc::ClientContext* context, const ::sro::chat::RequestChatChannelAuthChange* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void UpdateUserChatChannelAuthorizations(::grpc::ClientContext* context, const ::sro::chat::RequestChatChannelAuthChange* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::sro::chat::ChatMessage>* ConnectChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request) override;
    ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>* AsyncConnectChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>* PrepareAsyncConnectChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::sro::chat::ChatMessage>* ConnectDirectMessageRaw(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request) override;
    ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>* AsyncConnectDirectMessageRaw(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>* PrepareAsyncConnectDirectMessageRaw(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncSendChatMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncSendChatMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* AsyncGetChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* PrepareAsyncGetChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>* AsyncAllChatChannelsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>* PrepareAsyncAllChatChannelsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncCreateChannelRaw(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncCreateChannelRaw(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChatChannelTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncEditChannelRaw(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncEditChannelRaw(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>* AsyncGetAuthorizedChatChannelsRaw(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>* PrepareAsyncGetAuthorizedChatChannelsRaw(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncUpdateUserChatChannelAuthorizationsRaw(::grpc::ClientContext* context, const ::sro::chat::RequestChatChannelAuthChange& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncUpdateUserChatChannelAuthorizationsRaw(::grpc::ClientContext* context, const ::sro::chat::RequestChatChannelAuthChange& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ConnectChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_ConnectDirectMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_SendChatMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_SendDirectMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_AllChatChannels_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_EditChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAuthorizedChatChannels_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateUserChatChannelAuthorizations_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ConnectChannel(::grpc::ServerContext* context, const ::sro::chat::ChatChannelTarget* request, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* writer);
    virtual ::grpc::Status ConnectDirectMessage(::grpc::ServerContext* context, const ::sro::characters::CharacterTarget* request, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* writer);
    virtual ::grpc::Status SendChatMessage(::grpc::ServerContext* context, const ::sro::chat::SendChatMessageRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status SendDirectMessage(::grpc::ServerContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status GetChannel(::grpc::ServerContext* context, const ::sro::chat::ChatChannelTarget* request, ::sro::chat::ChatChannel* response);
    virtual ::grpc::Status AllChatChannels(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response);
    virtual ::grpc::Status CreateChannel(::grpc::ServerContext* context, const ::sro::chat::CreateChannelMessage* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status DeleteChannel(::grpc::ServerContext* context, const ::sro::chat::ChatChannelTarget* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status EditChannel(::grpc::ServerContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status GetAuthorizedChatChannels(::grpc::ServerContext* context, const ::sro::characters::CharacterTarget* request, ::sro::chat::ChatChannels* response);
    virtual ::grpc::Status UpdateUserChatChannelAuthorizations(::grpc::ServerContext* context, const ::sro::chat::RequestChatChannelAuthChange* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ConnectChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConnectChannel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ConnectChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectChannel(::grpc::ServerContext* context, ::sro::chat::ChatChannelTarget* request, ::grpc::ServerAsyncWriter< ::sro::chat::ChatMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConnectDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConnectDirectMessage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ConnectDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectDirectMessage(::grpc::ServerContext* context, ::sro::characters::CharacterTarget* request, ::grpc::ServerAsyncWriter< ::sro::chat::ChatMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendChatMessage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChatMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendChatMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendChatMessage(::grpc::ServerContext* context, ::sro::chat::SendChatMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendDirectMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDirectMessage(::grpc::ServerContext* context, ::sro::chat::SendDirectMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetChannel() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChannel(::grpc::ServerContext* context, ::sro::chat::ChatChannelTarget* request, ::grpc::ServerAsyncResponseWriter< ::sro::chat::ChatChannel>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AllChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AllChatChannels() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AllChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllChatChannels(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllChatChannels(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::sro::chat::ChatChannels>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateChannel() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::CreateChannelMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateChannel(::grpc::ServerContext* context, ::sro::chat::CreateChannelMessage* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteChannel() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DeleteChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteChannel(::grpc::ServerContext* context, ::sro::chat::ChatChannelTarget* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EditChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EditChannel() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_EditChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::UpdateChatChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditChannel(::grpc::ServerContext* context, ::sro::chat::UpdateChatChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAuthorizedChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAuthorizedChatChannels() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetAuthorizedChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthorizedChatChannels(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAuthorizedChatChannels(::grpc::ServerContext* context, ::sro::characters::CharacterTarget* request, ::grpc::ServerAsyncResponseWriter< ::sro::chat::ChatChannels>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateUserChatChannelAuthorizations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateUserChatChannelAuthorizations() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_UpdateUserChatChannelAuthorizations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserChatChannelAuthorizations(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestChatChannelAuthChange* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserChatChannelAuthorizations(::grpc::ServerContext* context, ::sro::chat::RequestChatChannelAuthChange* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ConnectChannel<WithAsyncMethod_ConnectDirectMessage<WithAsyncMethod_SendChatMessage<WithAsyncMethod_SendDirectMessage<WithAsyncMethod_GetChannel<WithAsyncMethod_AllChatChannels<WithAsyncMethod_CreateChannel<WithAsyncMethod_DeleteChannel<WithAsyncMethod_EditChannel<WithAsyncMethod_GetAuthorizedChatChannels<WithAsyncMethod_UpdateUserChatChannelAuthorizations<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ConnectChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConnectChannel() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::sro::chat::ChatChannelTarget, ::sro::chat::ChatMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::ChatChannelTarget* request) { return this->ConnectChannel(context, request); }));
    }
    ~WithCallbackMethod_ConnectChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::sro::chat::ChatMessage>* ConnectChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConnectDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConnectDirectMessage() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::sro::characters::CharacterTarget, ::sro::chat::ChatMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::characters::CharacterTarget* request) { return this->ConnectDirectMessage(context, request); }));
    }
    ~WithCallbackMethod_ConnectDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::sro::chat::ChatMessage>* ConnectDirectMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendChatMessage() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::chat::SendChatMessageRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::SendChatMessageRequest* request, ::google::protobuf::Empty* response) { return this->SendChatMessage(context, request, response); }));}
    void SetMessageAllocatorFor_SendChatMessage(
        ::grpc::MessageAllocator< ::sro::chat::SendChatMessageRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::chat::SendChatMessageRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChatMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendChatMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendChatMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::SendChatMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::chat::SendDirectMessageRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response) { return this->SendDirectMessage(context, request, response); }));}
    void SetMessageAllocatorFor_SendDirectMessage(
        ::grpc::MessageAllocator< ::sro::chat::SendDirectMessageRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::chat::SendDirectMessageRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendDirectMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendDirectMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::SendDirectMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetChannel() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::chat::ChatChannelTarget, ::sro::chat::ChatChannel>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::ChatChannelTarget* request, ::sro::chat::ChatChannel* response) { return this->GetChannel(context, request, response); }));}
    void SetMessageAllocatorFor_GetChannel(
        ::grpc::MessageAllocator< ::sro::chat::ChatChannelTarget, ::sro::chat::ChatChannel>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::chat::ChatChannelTarget, ::sro::chat::ChatChannel>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::sro::chat::ChatChannel* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AllChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AllChatChannels() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::sro::chat::ChatChannels>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response) { return this->AllChatChannels(context, request, response); }));}
    void SetMessageAllocatorFor_AllChatChannels(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::sro::chat::ChatChannels>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::sro::chat::ChatChannels>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AllChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllChatChannels(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AllChatChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::chat::ChatChannels* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateChannel() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::chat::CreateChannelMessage, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::CreateChannelMessage* request, ::google::protobuf::Empty* response) { return this->CreateChannel(context, request, response); }));}
    void SetMessageAllocatorFor_CreateChannel(
        ::grpc::MessageAllocator< ::sro::chat::CreateChannelMessage, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::chat::CreateChannelMessage, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::CreateChannelMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::CreateChannelMessage* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteChannel() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::chat::ChatChannelTarget, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::ChatChannelTarget* request, ::google::protobuf::Empty* response) { return this->DeleteChannel(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteChannel(
        ::grpc::MessageAllocator< ::sro::chat::ChatChannelTarget, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::chat::ChatChannelTarget, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EditChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EditChannel() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::chat::UpdateChatChannelRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::google::protobuf::Empty* response) { return this->EditChannel(context, request, response); }));}
    void SetMessageAllocatorFor_EditChannel(
        ::grpc::MessageAllocator< ::sro::chat::UpdateChatChannelRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::chat::UpdateChatChannelRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EditChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::UpdateChatChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::UpdateChatChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAuthorizedChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAuthorizedChatChannels() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::characters::CharacterTarget, ::sro::chat::ChatChannels>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::characters::CharacterTarget* request, ::sro::chat::ChatChannels* response) { return this->GetAuthorizedChatChannels(context, request, response); }));}
    void SetMessageAllocatorFor_GetAuthorizedChatChannels(
        ::grpc::MessageAllocator< ::sro::characters::CharacterTarget, ::sro::chat::ChatChannels>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::characters::CharacterTarget, ::sro::chat::ChatChannels>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAuthorizedChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthorizedChatChannels(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAuthorizedChatChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::sro::chat::ChatChannels* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateUserChatChannelAuthorizations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateUserChatChannelAuthorizations() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::chat::RequestChatChannelAuthChange, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::RequestChatChannelAuthChange* request, ::google::protobuf::Empty* response) { return this->UpdateUserChatChannelAuthorizations(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateUserChatChannelAuthorizations(
        ::grpc::MessageAllocator< ::sro::chat::RequestChatChannelAuthChange, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::chat::RequestChatChannelAuthChange, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateUserChatChannelAuthorizations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserChatChannelAuthorizations(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestChatChannelAuthChange* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUserChatChannelAuthorizations(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::RequestChatChannelAuthChange* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ConnectChannel<WithCallbackMethod_ConnectDirectMessage<WithCallbackMethod_SendChatMessage<WithCallbackMethod_SendDirectMessage<WithCallbackMethod_GetChannel<WithCallbackMethod_AllChatChannels<WithCallbackMethod_CreateChannel<WithCallbackMethod_DeleteChannel<WithCallbackMethod_EditChannel<WithCallbackMethod_GetAuthorizedChatChannels<WithCallbackMethod_UpdateUserChatChannelAuthorizations<Service > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ConnectChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConnectChannel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ConnectChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConnectDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConnectDirectMessage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ConnectDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendChatMessage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChatMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendChatMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendDirectMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetChannel() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AllChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AllChatChannels() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AllChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllChatChannels(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateChannel() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::CreateChannelMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteChannel() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DeleteChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EditChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EditChannel() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_EditChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::UpdateChatChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAuthorizedChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAuthorizedChatChannels() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetAuthorizedChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthorizedChatChannels(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateUserChatChannelAuthorizations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateUserChatChannelAuthorizations() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_UpdateUserChatChannelAuthorizations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserChatChannelAuthorizations(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestChatChannelAuthChange* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConnectChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConnectChannel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ConnectChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConnectDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConnectDirectMessage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ConnectDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectDirectMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendChatMessage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChatMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendChatMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendChatMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendDirectMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDirectMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetChannel() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AllChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AllChatChannels() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_AllChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllChatChannels(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllChatChannels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateChannel() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::CreateChannelMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteChannel() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DeleteChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EditChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EditChannel() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_EditChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::UpdateChatChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAuthorizedChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAuthorizedChatChannels() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetAuthorizedChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthorizedChatChannels(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAuthorizedChatChannels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateUserChatChannelAuthorizations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateUserChatChannelAuthorizations() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_UpdateUserChatChannelAuthorizations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserChatChannelAuthorizations(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestChatChannelAuthChange* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserChatChannelAuthorizations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConnectChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConnectChannel() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ConnectChannel(context, request); }));
    }
    ~WithRawCallbackMethod_ConnectChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ConnectChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConnectDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConnectDirectMessage() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ConnectDirectMessage(context, request); }));
    }
    ~WithRawCallbackMethod_ConnectDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ConnectDirectMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendChatMessage() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendChatMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChatMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendChatMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendChatMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendDirectMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendDirectMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendDirectMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetChannel() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AllChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AllChatChannels() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AllChatChannels(context, request, response); }));
    }
    ~WithRawCallbackMethod_AllChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllChatChannels(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AllChatChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateChannel() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::CreateChannelMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteChannel() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EditChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EditChannel() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EditChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_EditChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::UpdateChatChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAuthorizedChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAuthorizedChatChannels() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAuthorizedChatChannels(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAuthorizedChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthorizedChatChannels(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAuthorizedChatChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateUserChatChannelAuthorizations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateUserChatChannelAuthorizations() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateUserChatChannelAuthorizations(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateUserChatChannelAuthorizations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserChatChannelAuthorizations(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestChatChannelAuthChange* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUserChatChannelAuthorizations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendChatMessage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::chat::SendChatMessageRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::chat::SendChatMessageRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedSendChatMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendChatMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendChatMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendChatMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::chat::SendChatMessageRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::chat::SendDirectMessageRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::chat::SendDirectMessageRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedSendDirectMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendDirectMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendDirectMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::chat::SendDirectMessageRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetChannel() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::chat::ChatChannelTarget, ::sro::chat::ChatChannel>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::chat::ChatChannelTarget, ::sro::chat::ChatChannel>* streamer) {
                       return this->StreamedGetChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::chat::ChatChannelTarget,::sro::chat::ChatChannel>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AllChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AllChatChannels() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::sro::chat::ChatChannels>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::sro::chat::ChatChannels>* streamer) {
                       return this->StreamedAllChatChannels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AllChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AllChatChannels(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAllChatChannels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::sro::chat::ChatChannels>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateChannel() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::chat::CreateChannelMessage, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::chat::CreateChannelMessage, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedCreateChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::CreateChannelMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::chat::CreateChannelMessage,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteChannel() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::chat::ChatChannelTarget, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::chat::ChatChannelTarget, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::chat::ChatChannelTarget,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EditChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EditChannel() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::chat::UpdateChatChannelRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::chat::UpdateChatChannelRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedEditChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EditChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EditChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::UpdateChatChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEditChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::chat::UpdateChatChannelRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAuthorizedChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAuthorizedChatChannels() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::characters::CharacterTarget, ::sro::chat::ChatChannels>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::characters::CharacterTarget, ::sro::chat::ChatChannels>* streamer) {
                       return this->StreamedGetAuthorizedChatChannels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAuthorizedChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAuthorizedChatChannels(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAuthorizedChatChannels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::characters::CharacterTarget,::sro::chat::ChatChannels>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateUserChatChannelAuthorizations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateUserChatChannelAuthorizations() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::chat::RequestChatChannelAuthChange, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::chat::RequestChatChannelAuthChange, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedUpdateUserChatChannelAuthorizations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateUserChatChannelAuthorizations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateUserChatChannelAuthorizations(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestChatChannelAuthChange* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateUserChatChannelAuthorizations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::chat::RequestChatChannelAuthChange,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendChatMessage<WithStreamedUnaryMethod_SendDirectMessage<WithStreamedUnaryMethod_GetChannel<WithStreamedUnaryMethod_AllChatChannels<WithStreamedUnaryMethod_CreateChannel<WithStreamedUnaryMethod_DeleteChannel<WithStreamedUnaryMethod_EditChannel<WithStreamedUnaryMethod_GetAuthorizedChatChannels<WithStreamedUnaryMethod_UpdateUserChatChannelAuthorizations<Service > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ConnectChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ConnectChannel() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::sro::chat::ChatChannelTarget, ::sro::chat::ChatMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::sro::chat::ChatChannelTarget, ::sro::chat::ChatMessage>* streamer) {
                       return this->StreamedConnectChannel(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ConnectChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConnectChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatChannelTarget* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedConnectChannel(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::sro::chat::ChatChannelTarget,::sro::chat::ChatMessage>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ConnectDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ConnectDirectMessage() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::sro::characters::CharacterTarget, ::sro::chat::ChatMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::sro::characters::CharacterTarget, ::sro::chat::ChatMessage>* streamer) {
                       return this->StreamedConnectDirectMessage(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ConnectDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConnectDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedConnectDirectMessage(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::sro::characters::CharacterTarget,::sro::chat::ChatMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ConnectChannel<WithSplitStreamingMethod_ConnectDirectMessage<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_ConnectChannel<WithSplitStreamingMethod_ConnectDirectMessage<WithStreamedUnaryMethod_SendChatMessage<WithStreamedUnaryMethod_SendDirectMessage<WithStreamedUnaryMethod_GetChannel<WithStreamedUnaryMethod_AllChatChannels<WithStreamedUnaryMethod_CreateChannel<WithStreamedUnaryMethod_DeleteChannel<WithStreamedUnaryMethod_EditChannel<WithStreamedUnaryMethod_GetAuthorizedChatChannels<WithStreamedUnaryMethod_UpdateUserChatChannelAuthorizations<Service > > > > > > > > > > > StreamedService;
};

}  // namespace chat
}  // namespace sro


#endif  // GRPC_sro_2fchat_2fchat_2eproto__INCLUDED
