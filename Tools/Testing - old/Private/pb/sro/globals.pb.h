#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sro/globals.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sro_2fglobals_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sro_2fglobals_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sro_2fglobals_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sro_2fglobals_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sro_2fglobals_2eproto;
namespace sro {
class UserTarget;
struct UserTargetDefaultTypeInternal;
extern UserTargetDefaultTypeInternal _UserTarget_default_instance_;
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template<> ::sro::UserTarget* Arena::CreateMaybeMessage<::sro::UserTarget>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sro {

// ===================================================================

class UserTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.UserTarget) */ {
 public:
  inline UserTarget() : UserTarget(nullptr) {}
  ~UserTarget() override;
  explicit constexpr UserTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserTarget(const UserTarget& from);
  UserTarget(UserTarget&& from) noexcept
    : UserTarget() {
    *this = ::std::move(from);
  }

  inline UserTarget& operator=(const UserTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserTarget& operator=(UserTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserTarget& default_instance() {
    return *internal_default_instance();
  }
  enum TargetCase {
    kId = 1,
    kUsername = 2,
    TARGET_NOT_SET = 0,
  };

  static inline const UserTarget* internal_default_instance() {
    return reinterpret_cast<const UserTarget*>(
               &_UserTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserTarget& a, UserTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(UserTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserTarget& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.UserTarget";
  }
  protected:
  explicit UserTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kUsernameFieldNumber = 2,
  };
  // string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string username = 2;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:sro.UserTarget)
 private:
  class _Internal;
  void set_has_id();
  void set_has_username();

  inline bool has_target() const;
  inline void clear_has_target();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TargetUnion {
    constexpr TargetUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  } target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sro_2fglobals_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserTarget

// string id = 1;
inline bool UserTarget::_internal_has_id() const {
  return target_case() == kId;
}
inline bool UserTarget::has_id() const {
  return _internal_has_id();
}
inline void UserTarget::set_has_id() {
  _oneof_case_[0] = kId;
}
inline void UserTarget::clear_id() {
  if (_internal_has_id()) {
    target_.id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_target();
  }
}
inline const std::string& UserTarget::id() const {
  // @@protoc_insertion_point(field_get:sro.UserTarget.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline void UserTarget::set_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_id()) {
    clear_target();
    set_has_id();
    target_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.UserTarget.id)
}
inline std::string* UserTarget::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sro.UserTarget.id)
  return _s;
}
inline const std::string& UserTarget::_internal_id() const {
  if (_internal_has_id()) {
    return target_.id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UserTarget::_internal_set_id(const std::string& value) {
  if (!_internal_has_id()) {
    clear_target();
    set_has_id();
    target_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserTarget::_internal_mutable_id() {
  if (!_internal_has_id()) {
    clear_target();
    set_has_id();
    target_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return target_.id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserTarget::release_id() {
  // @@protoc_insertion_point(field_release:sro.UserTarget.id)
  if (_internal_has_id()) {
    clear_has_target();
    return target_.id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void UserTarget::set_allocated_id(std::string* id) {
  if (has_target()) {
    clear_target();
  }
  if (id != nullptr) {
    set_has_id();
    target_.id_.UnsafeSetDefault(id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:sro.UserTarget.id)
}

// string username = 2;
inline bool UserTarget::_internal_has_username() const {
  return target_case() == kUsername;
}
inline bool UserTarget::has_username() const {
  return _internal_has_username();
}
inline void UserTarget::set_has_username() {
  _oneof_case_[0] = kUsername;
}
inline void UserTarget::clear_username() {
  if (_internal_has_username()) {
    target_.username_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_target();
  }
}
inline const std::string& UserTarget::username() const {
  // @@protoc_insertion_point(field_get:sro.UserTarget.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline void UserTarget::set_username(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_username()) {
    clear_target();
    set_has_username();
    target_.username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.UserTarget.username)
}
inline std::string* UserTarget::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:sro.UserTarget.username)
  return _s;
}
inline const std::string& UserTarget::_internal_username() const {
  if (_internal_has_username()) {
    return target_.username_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UserTarget::_internal_set_username(const std::string& value) {
  if (!_internal_has_username()) {
    clear_target();
    set_has_username();
    target_.username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserTarget::_internal_mutable_username() {
  if (!_internal_has_username()) {
    clear_target();
    set_has_username();
    target_.username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return target_.username_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserTarget::release_username() {
  // @@protoc_insertion_point(field_release:sro.UserTarget.username)
  if (_internal_has_username()) {
    clear_has_target();
    return target_.username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void UserTarget::set_allocated_username(std::string* username) {
  if (has_target()) {
    clear_target();
  }
  if (username != nullptr) {
    set_has_username();
    target_.username_.UnsafeSetDefault(username);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(username);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:sro.UserTarget.username)
}

inline bool UserTarget::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void UserTarget::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline UserTarget::TargetCase UserTarget::target_case() const {
  return UserTarget::TargetCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sro

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sro_2fglobals_2eproto
