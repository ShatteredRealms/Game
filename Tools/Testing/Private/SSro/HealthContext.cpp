//Generated by TurboLink CodeGenerator, do not edit!
#include "HealthContext.h"
#include "SSro/HealthClient.h"
#include "HealthService_Private.h"
#include "HealthMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_HealthService_Health::GrpcContext_HealthService_Health(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_HealthService_Health::Call(const FGrpcGoogleProtobufEmpty& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::google::protobuf::Empty rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UHealthService* service = (UHealthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncHealth(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_HealthService_Health::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::sro::HealthMessage* _RpcResponse) {
		UHealthServiceClient* client = (UHealthServiceClient*)(this->Client);
		if (!(client->OnHealthResponse.IsBound())) return;

		FGrpcSroHealthMessage response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnHealthResponse.Broadcast(Handle, _Result, response);
	});
}
