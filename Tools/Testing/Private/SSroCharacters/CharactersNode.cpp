//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroCharacters/CharactersNode.h"
#include "SSroCharacters/CharactersService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"

UCallCharactersServiceGetGenders* UCallCharactersServiceGetGenders::GetGenders(UObject* WorldContextObject, const FGrpcGoogleProtobufEmpty& Request)
{
	UCallCharactersServiceGetGenders* node = NewObject<UCallCharactersServiceGetGenders>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharactersService = Cast<UCharactersService>(turboLinkManager->MakeService("CharactersService"));
	if (node->CharactersService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->CharactersService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharactersServiceGetGenders::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->CharactersService->Connect();
	}));
	return node;
}

void UCallCharactersServiceGetGenders::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroCharactersGenders response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharactersServiceClient = CharactersService->MakeClient();
		CharactersServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharactersServiceGetGenders::OnContextStateChange);
		CharactersServiceClient->OnGetGendersResponse.AddUniqueDynamic(this, &UCallCharactersServiceGetGenders::OnResponse);

		Context = CharactersServiceClient->InitGetGenders();
		CharactersServiceClient->GetGenders(Context, Request);
	}
}

void UCallCharactersServiceGetGenders::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharactersServiceGetGenders::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroCharactersGenders& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharactersServiceGetGenders::Shutdown()
{
	CharactersService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharactersServiceGetGenders::OnServiceStateChanged);
	if (CharactersServiceClient != nullptr)
	{
		CharactersService->RemoveClient(CharactersServiceClient);
		CharactersServiceClient->Shutdown();
		CharactersServiceClient = nullptr;
	}

	if (CharactersService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharactersService);
		CharactersService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallCharactersServiceGetRealms* UCallCharactersServiceGetRealms::GetRealms(UObject* WorldContextObject, const FGrpcGoogleProtobufEmpty& Request)
{
	UCallCharactersServiceGetRealms* node = NewObject<UCallCharactersServiceGetRealms>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharactersService = Cast<UCharactersService>(turboLinkManager->MakeService("CharactersService"));
	if (node->CharactersService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->CharactersService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharactersServiceGetRealms::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->CharactersService->Connect();
	}));
	return node;
}

void UCallCharactersServiceGetRealms::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroCharactersRealms response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharactersServiceClient = CharactersService->MakeClient();
		CharactersServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharactersServiceGetRealms::OnContextStateChange);
		CharactersServiceClient->OnGetRealmsResponse.AddUniqueDynamic(this, &UCallCharactersServiceGetRealms::OnResponse);

		Context = CharactersServiceClient->InitGetRealms();
		CharactersServiceClient->GetRealms(Context, Request);
	}
}

void UCallCharactersServiceGetRealms::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharactersServiceGetRealms::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroCharactersRealms& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharactersServiceGetRealms::Shutdown()
{
	CharactersService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharactersServiceGetRealms::OnServiceStateChanged);
	if (CharactersServiceClient != nullptr)
	{
		CharactersService->RemoveClient(CharactersServiceClient);
		CharactersServiceClient->Shutdown();
		CharactersServiceClient = nullptr;
	}

	if (CharactersService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharactersService);
		CharactersService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallCharactersServiceGetCharacters* UCallCharactersServiceGetCharacters::GetCharacters(UObject* WorldContextObject, const FGrpcGoogleProtobufEmpty& Request)
{
	UCallCharactersServiceGetCharacters* node = NewObject<UCallCharactersServiceGetCharacters>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharactersService = Cast<UCharactersService>(turboLinkManager->MakeService("CharactersService"));
	if (node->CharactersService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->CharactersService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharactersServiceGetCharacters::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->CharactersService->Connect();
	}));
	return node;
}

void UCallCharactersServiceGetCharacters::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroCharactersCharactersResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharactersServiceClient = CharactersService->MakeClient();
		CharactersServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharactersServiceGetCharacters::OnContextStateChange);
		CharactersServiceClient->OnGetCharactersResponse.AddUniqueDynamic(this, &UCallCharactersServiceGetCharacters::OnResponse);

		Context = CharactersServiceClient->InitGetCharacters();
		CharactersServiceClient->GetCharacters(Context, Request);
	}
}

void UCallCharactersServiceGetCharacters::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharactersServiceGetCharacters::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroCharactersCharactersResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharactersServiceGetCharacters::Shutdown()
{
	CharactersService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharactersServiceGetCharacters::OnServiceStateChanged);
	if (CharactersServiceClient != nullptr)
	{
		CharactersService->RemoveClient(CharactersServiceClient);
		CharactersServiceClient->Shutdown();
		CharactersServiceClient = nullptr;
	}

	if (CharactersService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharactersService);
		CharactersService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallCharactersServiceGetCharacter* UCallCharactersServiceGetCharacter::GetCharacter(UObject* WorldContextObject, const FGrpcSroCharactersCharacterTarget& Request)
{
	UCallCharactersServiceGetCharacter* node = NewObject<UCallCharactersServiceGetCharacter>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharactersService = Cast<UCharactersService>(turboLinkManager->MakeService("CharactersService"));
	if (node->CharactersService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->CharactersService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharactersServiceGetCharacter::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->CharactersService->Connect();
	}));
	return node;
}

void UCallCharactersServiceGetCharacter::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroCharactersCharacterResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharactersServiceClient = CharactersService->MakeClient();
		CharactersServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharactersServiceGetCharacter::OnContextStateChange);
		CharactersServiceClient->OnGetCharacterResponse.AddUniqueDynamic(this, &UCallCharactersServiceGetCharacter::OnResponse);

		Context = CharactersServiceClient->InitGetCharacter();
		CharactersServiceClient->GetCharacter(Context, Request);
	}
}

void UCallCharactersServiceGetCharacter::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharactersServiceGetCharacter::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroCharactersCharacterResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharactersServiceGetCharacter::Shutdown()
{
	CharactersService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharactersServiceGetCharacter::OnServiceStateChanged);
	if (CharactersServiceClient != nullptr)
	{
		CharactersService->RemoveClient(CharactersServiceClient);
		CharactersServiceClient->Shutdown();
		CharactersServiceClient = nullptr;
	}

	if (CharactersService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharactersService);
		CharactersService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallCharactersServiceCreateCharacter* UCallCharactersServiceCreateCharacter::CreateCharacter(UObject* WorldContextObject, const FGrpcSroCharactersCreateCharacterRequest& Request)
{
	UCallCharactersServiceCreateCharacter* node = NewObject<UCallCharactersServiceCreateCharacter>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharactersService = Cast<UCharactersService>(turboLinkManager->MakeService("CharactersService"));
	if (node->CharactersService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->CharactersService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharactersServiceCreateCharacter::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->CharactersService->Connect();
	}));
	return node;
}

void UCallCharactersServiceCreateCharacter::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroCharactersCharacterResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharactersServiceClient = CharactersService->MakeClient();
		CharactersServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharactersServiceCreateCharacter::OnContextStateChange);
		CharactersServiceClient->OnCreateCharacterResponse.AddUniqueDynamic(this, &UCallCharactersServiceCreateCharacter::OnResponse);

		Context = CharactersServiceClient->InitCreateCharacter();
		CharactersServiceClient->CreateCharacter(Context, Request);
	}
}

void UCallCharactersServiceCreateCharacter::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharactersServiceCreateCharacter::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroCharactersCharacterResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharactersServiceCreateCharacter::Shutdown()
{
	CharactersService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharactersServiceCreateCharacter::OnServiceStateChanged);
	if (CharactersServiceClient != nullptr)
	{
		CharactersService->RemoveClient(CharactersServiceClient);
		CharactersServiceClient->Shutdown();
		CharactersServiceClient = nullptr;
	}

	if (CharactersService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharactersService);
		CharactersService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallCharactersServiceDeleteCharacter* UCallCharactersServiceDeleteCharacter::DeleteCharacter(UObject* WorldContextObject, const FGrpcSroCharactersCharacterTarget& Request)
{
	UCallCharactersServiceDeleteCharacter* node = NewObject<UCallCharactersServiceDeleteCharacter>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharactersService = Cast<UCharactersService>(turboLinkManager->MakeService("CharactersService"));
	if (node->CharactersService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->CharactersService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharactersServiceDeleteCharacter::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->CharactersService->Connect();
	}));
	return node;
}

void UCallCharactersServiceDeleteCharacter::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcGoogleProtobufEmpty response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharactersServiceClient = CharactersService->MakeClient();
		CharactersServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharactersServiceDeleteCharacter::OnContextStateChange);
		CharactersServiceClient->OnDeleteCharacterResponse.AddUniqueDynamic(this, &UCallCharactersServiceDeleteCharacter::OnResponse);

		Context = CharactersServiceClient->InitDeleteCharacter();
		CharactersServiceClient->DeleteCharacter(Context, Request);
	}
}

void UCallCharactersServiceDeleteCharacter::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharactersServiceDeleteCharacter::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcGoogleProtobufEmpty& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharactersServiceDeleteCharacter::Shutdown()
{
	CharactersService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharactersServiceDeleteCharacter::OnServiceStateChanged);
	if (CharactersServiceClient != nullptr)
	{
		CharactersService->RemoveClient(CharactersServiceClient);
		CharactersServiceClient->Shutdown();
		CharactersServiceClient = nullptr;
	}

	if (CharactersService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharactersService);
		CharactersService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallCharactersServiceGetAllCharactersForUser* UCallCharactersServiceGetAllCharactersForUser::GetAllCharactersForUser(UObject* WorldContextObject, const FGrpcSroUserTarget& Request)
{
	UCallCharactersServiceGetAllCharactersForUser* node = NewObject<UCallCharactersServiceGetAllCharactersForUser>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharactersService = Cast<UCharactersService>(turboLinkManager->MakeService("CharactersService"));
	if (node->CharactersService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->CharactersService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharactersServiceGetAllCharactersForUser::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->CharactersService->Connect();
	}));
	return node;
}

void UCallCharactersServiceGetAllCharactersForUser::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroCharactersCharactersResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharactersServiceClient = CharactersService->MakeClient();
		CharactersServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharactersServiceGetAllCharactersForUser::OnContextStateChange);
		CharactersServiceClient->OnGetAllCharactersForUserResponse.AddUniqueDynamic(this, &UCallCharactersServiceGetAllCharactersForUser::OnResponse);

		Context = CharactersServiceClient->InitGetAllCharactersForUser();
		CharactersServiceClient->GetAllCharactersForUser(Context, Request);
	}
}

void UCallCharactersServiceGetAllCharactersForUser::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharactersServiceGetAllCharactersForUser::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroCharactersCharactersResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharactersServiceGetAllCharactersForUser::Shutdown()
{
	CharactersService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharactersServiceGetAllCharactersForUser::OnServiceStateChanged);
	if (CharactersServiceClient != nullptr)
	{
		CharactersService->RemoveClient(CharactersServiceClient);
		CharactersServiceClient->Shutdown();
		CharactersServiceClient = nullptr;
	}

	if (CharactersService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharactersService);
		CharactersService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallCharactersServiceEditCharacter* UCallCharactersServiceEditCharacter::EditCharacter(UObject* WorldContextObject, const FGrpcSroCharactersEditCharacterRequest& Request)
{
	UCallCharactersServiceEditCharacter* node = NewObject<UCallCharactersServiceEditCharacter>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharactersService = Cast<UCharactersService>(turboLinkManager->MakeService("CharactersService"));
	if (node->CharactersService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->CharactersService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharactersServiceEditCharacter::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->CharactersService->Connect();
	}));
	return node;
}

void UCallCharactersServiceEditCharacter::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcGoogleProtobufEmpty response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharactersServiceClient = CharactersService->MakeClient();
		CharactersServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharactersServiceEditCharacter::OnContextStateChange);
		CharactersServiceClient->OnEditCharacterResponse.AddUniqueDynamic(this, &UCallCharactersServiceEditCharacter::OnResponse);

		Context = CharactersServiceClient->InitEditCharacter();
		CharactersServiceClient->EditCharacter(Context, Request);
	}
}

void UCallCharactersServiceEditCharacter::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharactersServiceEditCharacter::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcGoogleProtobufEmpty& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharactersServiceEditCharacter::Shutdown()
{
	CharactersService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharactersServiceEditCharacter::OnServiceStateChanged);
	if (CharactersServiceClient != nullptr)
	{
		CharactersService->RemoveClient(CharactersServiceClient);
		CharactersServiceClient->Shutdown();
		CharactersServiceClient = nullptr;
	}

	if (CharactersService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharactersService);
		CharactersService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallCharactersServiceAddCharacterPlayTime* UCallCharactersServiceAddCharacterPlayTime::AddCharacterPlayTime(UObject* WorldContextObject, const FGrpcSroCharactersAddPlayTimeRequest& Request)
{
	UCallCharactersServiceAddCharacterPlayTime* node = NewObject<UCallCharactersServiceAddCharacterPlayTime>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharactersService = Cast<UCharactersService>(turboLinkManager->MakeService("CharactersService"));
	if (node->CharactersService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->CharactersService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharactersServiceAddCharacterPlayTime::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->CharactersService->Connect();
	}));
	return node;
}

void UCallCharactersServiceAddCharacterPlayTime::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroCharactersPlayTimeResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharactersServiceClient = CharactersService->MakeClient();
		CharactersServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharactersServiceAddCharacterPlayTime::OnContextStateChange);
		CharactersServiceClient->OnAddCharacterPlayTimeResponse.AddUniqueDynamic(this, &UCallCharactersServiceAddCharacterPlayTime::OnResponse);

		Context = CharactersServiceClient->InitAddCharacterPlayTime();
		CharactersServiceClient->AddCharacterPlayTime(Context, Request);
	}
}

void UCallCharactersServiceAddCharacterPlayTime::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharactersServiceAddCharacterPlayTime::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroCharactersPlayTimeResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharactersServiceAddCharacterPlayTime::Shutdown()
{
	CharactersService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharactersServiceAddCharacterPlayTime::OnServiceStateChanged);
	if (CharactersServiceClient != nullptr)
	{
		CharactersService->RemoveClient(CharactersServiceClient);
		CharactersServiceClient->Shutdown();
		CharactersServiceClient = nullptr;
	}

	if (CharactersService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharactersService);
		CharactersService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
