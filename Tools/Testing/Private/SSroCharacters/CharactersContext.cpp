//Generated by TurboLink CodeGenerator, do not edit!
#include "CharactersContext.h"
#include "SSroCharacters/CharactersClient.h"
#include "CharactersService_Private.h"
#include "CharactersMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_CharactersService_GetGenders::GrpcContext_CharactersService_GetGenders(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_CharactersService_GetGenders::Call(const FGrpcGoogleProtobufEmpty& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::google::protobuf::Empty rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UCharactersService* service = (UCharactersService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetGenders(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_CharactersService_GetGenders::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::sro::characters::Genders* _RpcResponse) {
		UCharactersServiceClient* client = (UCharactersServiceClient*)(this->Client);
		if (!(client->OnGetGendersResponse.IsBound())) return;

		FGrpcSroCharactersGenders response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnGetGendersResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_CharactersService_GetRealms::GrpcContext_CharactersService_GetRealms(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_CharactersService_GetRealms::Call(const FGrpcGoogleProtobufEmpty& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::google::protobuf::Empty rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UCharactersService* service = (UCharactersService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetRealms(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_CharactersService_GetRealms::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::sro::characters::Realms* _RpcResponse) {
		UCharactersServiceClient* client = (UCharactersServiceClient*)(this->Client);
		if (!(client->OnGetRealmsResponse.IsBound())) return;

		FGrpcSroCharactersRealms response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnGetRealmsResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_CharactersService_GetCharacters::GrpcContext_CharactersService_GetCharacters(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_CharactersService_GetCharacters::Call(const FGrpcGoogleProtobufEmpty& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::google::protobuf::Empty rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UCharactersService* service = (UCharactersService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetCharacters(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_CharactersService_GetCharacters::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::sro::characters::CharactersResponse* _RpcResponse) {
		UCharactersServiceClient* client = (UCharactersServiceClient*)(this->Client);
		if (!(client->OnGetCharactersResponse.IsBound())) return;

		FGrpcSroCharactersCharactersResponse response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnGetCharactersResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_CharactersService_GetCharacter::GrpcContext_CharactersService_GetCharacter(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_CharactersService_GetCharacter::Call(const FGrpcSroCharactersCharacterTarget& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::characters::CharacterTarget rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UCharactersService* service = (UCharactersService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetCharacter(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_CharactersService_GetCharacter::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::sro::characters::CharacterResponse* _RpcResponse) {
		UCharactersServiceClient* client = (UCharactersServiceClient*)(this->Client);
		if (!(client->OnGetCharacterResponse.IsBound())) return;

		FGrpcSroCharactersCharacterResponse response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnGetCharacterResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_CharactersService_CreateCharacter::GrpcContext_CharactersService_CreateCharacter(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_CharactersService_CreateCharacter::Call(const FGrpcSroCharactersCreateCharacterRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::characters::CreateCharacterRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UCharactersService* service = (UCharactersService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncCreateCharacter(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_CharactersService_CreateCharacter::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::sro::characters::CharacterResponse* _RpcResponse) {
		UCharactersServiceClient* client = (UCharactersServiceClient*)(this->Client);
		if (!(client->OnCreateCharacterResponse.IsBound())) return;

		FGrpcSroCharactersCharacterResponse response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnCreateCharacterResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_CharactersService_DeleteCharacter::GrpcContext_CharactersService_DeleteCharacter(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_CharactersService_DeleteCharacter::Call(const FGrpcSroCharactersCharacterTarget& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::characters::CharacterTarget rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UCharactersService* service = (UCharactersService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncDeleteCharacter(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_CharactersService_DeleteCharacter::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) {
		UCharactersServiceClient* client = (UCharactersServiceClient*)(this->Client);
		if (!(client->OnDeleteCharacterResponse.IsBound())) return;

		FGrpcGoogleProtobufEmpty response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnDeleteCharacterResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_CharactersService_GetAllCharactersForUser::GrpcContext_CharactersService_GetAllCharactersForUser(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_CharactersService_GetAllCharactersForUser::Call(const FGrpcSroUserTarget& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::UserTarget rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UCharactersService* service = (UCharactersService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetAllCharactersForUser(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_CharactersService_GetAllCharactersForUser::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::sro::characters::CharactersResponse* _RpcResponse) {
		UCharactersServiceClient* client = (UCharactersServiceClient*)(this->Client);
		if (!(client->OnGetAllCharactersForUserResponse.IsBound())) return;

		FGrpcSroCharactersCharactersResponse response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnGetAllCharactersForUserResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_CharactersService_EditCharacter::GrpcContext_CharactersService_EditCharacter(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_CharactersService_EditCharacter::Call(const FGrpcSroCharactersEditCharacterRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::characters::EditCharacterRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UCharactersService* service = (UCharactersService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncEditCharacter(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_CharactersService_EditCharacter::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) {
		UCharactersServiceClient* client = (UCharactersServiceClient*)(this->Client);
		if (!(client->OnEditCharacterResponse.IsBound())) return;

		FGrpcGoogleProtobufEmpty response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnEditCharacterResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_CharactersService_AddCharacterPlayTime::GrpcContext_CharactersService_AddCharacterPlayTime(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_CharactersService_AddCharacterPlayTime::Call(const FGrpcSroCharactersAddPlayTimeRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::characters::AddPlayTimeRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UCharactersService* service = (UCharactersService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncAddCharacterPlayTime(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_CharactersService_AddCharacterPlayTime::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::sro::characters::PlayTimeResponse* _RpcResponse) {
		UCharactersServiceClient* client = (UCharactersServiceClient*)(this->Client);
		if (!(client->OnAddCharacterPlayTimeResponse.IsBound())) return;

		FGrpcSroCharactersPlayTimeResponse response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnAddCharacterPlayTimeResponse.Broadcast(Handle, _Result, response);
	});
}
