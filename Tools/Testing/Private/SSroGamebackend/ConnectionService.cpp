//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroGamebackend/ConnectionService.h"
#include "SSroGamebackend/ConnectionClient.h"
#include "ConnectionService_Private.h"
#include "ConnectionMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UConnectionService::UConnectionService()
	: d(new UConnectionService::Private())
{
}

UConnectionService::~UConnectionService()
{
	delete d;
}

void UConnectionService::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("ConnectionService"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to ConnectionService: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel(TCHAR_TO_UTF8(*serviceEndPoint), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = sro::gamebackend::ConnectionService::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UConnectionService::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UConnectionServiceClient* UConnectionService::MakeClient()
{
	auto client = UGrpcService::MakeClient<UConnectionServiceClient>();
	return client;
}

void UConnectionService::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void UConnectionService::CallConnectGameServer(const FGrpcSroCharactersCharacterTarget& Request, FConnectGameServerLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UConnectionServiceConnectGameServerLambdaWrapper* lambdaWrapper = NewObject<UConnectionServiceConnectGameServerLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitConnectGameServer();
	InnerClient->OnConnectGameServerResponse.AddUniqueDynamic(lambdaWrapper, &UConnectionServiceConnectGameServerLambdaWrapper::OnResponse);
	InnerClient->ConnectGameServer(lambdaWrapper->Handle, Request);
}
