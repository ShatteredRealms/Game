//Generated by TurboLink CodeGenerator, do not edit!
#include "ConnectionContext.h"
#include "SSroGamebackend/ConnectionClient.h"
#include "ConnectionService_Private.h"
#include "ConnectionMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_ConnectionService_ConnectGameServer::GrpcContext_ConnectionService_ConnectGameServer(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ConnectionService_ConnectGameServer::Call(const FGrpcSroCharactersCharacterTarget& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::characters::CharacterTarget rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UConnectionService* service = (UConnectionService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncConnectGameServer(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ConnectionService_ConnectGameServer::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::sro::gamebackend::ConnectGameServerResponse* _RpcResponse) {
		UConnectionServiceClient* client = (UConnectionServiceClient*)(this->Client);
		if (!(client->OnConnectGameServerResponse.IsBound())) return;

		FGrpcSroGamebackendConnectGameServerResponse response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnConnectGameServerResponse.Broadcast(Handle, _Result, response);
	});
}
