//Generated by TurboLink CodeGenerator, do not edit!
#include "ChatMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "SSroCharacters/CharactersMarshaling.h"

void GRPC_TO_TURBOLINK(const ::sro::chat::RequestChatChannelAuthChange* in, FGrpcSroChatRequestChatChannelAuthChange* out)
{
    GRPC_TO_TURBOLINK(&(in->character()), &(out->Character));
    out->Add=in->add();
    out->Ids.Empty();
    for (int i=0; i<in->ids_size(); ++i) {
        out->Ids.Add(in->ids(i));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatRequestChatChannelAuthChange* in, ::sro::chat::RequestChatChannelAuthChange* out)
{
    TURBOLINK_TO_GRPC(&(in->Character), out->mutable_character());
    out->set_add(in->Add);
    for(const auto& value : in->Ids) {
        out->add_ids(value);
    } 
}

void GRPC_TO_TURBOLINK(const ::sro::chat::ChatChannel* in, FGrpcSroChatChatChannel* out)
{
    out->Id=in->id();
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
    out->Dimension=UTF8_TO_TCHAR(in->dimension().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatChatChannel* in, ::sro::chat::ChatChannel* out)
{
    out->set_id(in->Id);
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
    out->set_dimension(TCHAR_TO_UTF8(*(in->Dimension)));
}

void GRPC_TO_TURBOLINK(const ::sro::chat::ChatChannels* in, FGrpcSroChatChatChannels* out)
{
    out->Channels.Empty();
    for (int i=0; i<in->channels_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->channels(i)), &(out->Channels.AddZeroed_GetRef()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatChatChannels* in, ::sro::chat::ChatChannels* out)
{
    for(const auto& value : in->Channels) {
        TURBOLINK_TO_GRPC(&value, out->add_channels());
    } 
}

void GRPC_TO_TURBOLINK(const ::sro::chat::CreateChannelMessage* in, FGrpcSroChatCreateChannelMessage* out)
{
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
    out->Dimension=UTF8_TO_TCHAR(in->dimension().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatCreateChannelMessage* in, ::sro::chat::CreateChannelMessage* out)
{
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
    out->set_dimension(TCHAR_TO_UTF8(*(in->Dimension)));
}

void GRPC_TO_TURBOLINK(const ::sro::chat::ChatChannelTarget* in, FGrpcSroChatChatChannelTarget* out)
{
    out->Id=in->id();
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatChatChannelTarget* in, ::sro::chat::ChatChannelTarget* out)
{
    out->set_id(in->Id);
}

void GRPC_TO_TURBOLINK(const ::sro::chat::ChatMessage* in, FGrpcSroChatChatMessage* out)
{
    out->Message=UTF8_TO_TCHAR(in->message().c_str());
    out->CharacterName=UTF8_TO_TCHAR(in->character_name().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatChatMessage* in, ::sro::chat::ChatMessage* out)
{
    out->set_message(TCHAR_TO_UTF8(*(in->Message)));
    out->set_character_name(TCHAR_TO_UTF8(*(in->CharacterName)));
}

void GRPC_TO_TURBOLINK(const ::sro::chat::SendChatMessageRequest* in, FGrpcSroChatSendChatMessageRequest* out)
{
    out->ChannelId=in->channel_id();
    GRPC_TO_TURBOLINK(&(in->chat_message()), &(out->ChatMessage));
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatSendChatMessageRequest* in, ::sro::chat::SendChatMessageRequest* out)
{
    out->set_channel_id(in->ChannelId);
    TURBOLINK_TO_GRPC(&(in->ChatMessage), out->mutable_chat_message());
}

void GRPC_TO_TURBOLINK(const ::sro::chat::SendDirectMessageRequest* in, FGrpcSroChatSendDirectMessageRequest* out)
{
    GRPC_TO_TURBOLINK(&(in->target()), &(out->Target));
    GRPC_TO_TURBOLINK(&(in->chat_message()), &(out->ChatMessage));
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatSendDirectMessageRequest* in, ::sro::chat::SendDirectMessageRequest* out)
{
    TURBOLINK_TO_GRPC(&(in->Target), out->mutable_target());
    TURBOLINK_TO_GRPC(&(in->ChatMessage), out->mutable_chat_message());
}

void GRPC_TO_TURBOLINK(const ::sro::chat::UpdateChatChannelRequest* in, FGrpcSroChatUpdateChatChannelRequest* out)
{
    out->ChannelId=in->channel_id();
    switch(in->_name_case())
    {
    case ::sro::chat::UpdateChatChannelRequest::kName:
        out->_name.Name=UTF8_TO_TCHAR(in->name().c_str());
        out->_name._nameCase = EGrpcSroChatUpdateChatChannelRequest_name::Name;
        break;
    }
    switch(in->_dimension_case())
    {
    case ::sro::chat::UpdateChatChannelRequest::kDimension:
        out->_dimension.Dimension=UTF8_TO_TCHAR(in->dimension().c_str());
        out->_dimension._dimensionCase = EGrpcSroChatUpdateChatChannelRequest_dimension::Dimension;
        break;
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatUpdateChatChannelRequest* in, ::sro::chat::UpdateChatChannelRequest* out)
{
    out->set_channel_id(in->ChannelId);
    switch (in->_name._nameCase)
    {
    case EGrpcSroChatUpdateChatChannelRequest_name::Name:
        out->set_name(TCHAR_TO_UTF8(*(in->_name.Name)));
        break;
    }
    switch (in->_dimension._dimensionCase)
    {
    case EGrpcSroChatUpdateChatChannelRequest_dimension::Dimension:
        out->set_dimension(TCHAR_TO_UTF8(*(in->_dimension.Dimension)));
        break;
    }
}

