//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroChat/ChatService.h"
#include "SSroChat/ChatClient.h"
#include "ChatService_Private.h"
#include "ChatMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UChatService::UChatService()
	: d(new UChatService::Private())
{
}

UChatService::~UChatService()
{
	delete d;
}

void UChatService::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("ChatService"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to ChatService: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel(TCHAR_TO_UTF8(*serviceEndPoint), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = sro::chat::ChatService::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UChatService::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UChatServiceClient* UChatService::MakeClient()
{
	auto client = UGrpcService::MakeClient<UChatServiceClient>();
	return client;
}

void UChatService::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void UChatService::CallConnectChannel(const FGrpcSroChatChatChannelTarget& Request, FConnectChannelLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceConnectChannelLambdaWrapper* lambdaWrapper = NewObject<UChatServiceConnectChannelLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitConnectChannel();
	InnerClient->OnConnectChannelResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceConnectChannelLambdaWrapper::OnResponse);
	InnerClient->OnContextStateChange.AddUniqueDynamic(lambdaWrapper, &UChatServiceConnectChannelLambdaWrapper::OnContextStateChanged);
	InnerClient->ConnectChannel(lambdaWrapper->Handle, Request);
}

void UChatService::CallConnectDirectMessage(const FGrpcSroCharactersCharacterTarget& Request, FConnectDirectMessageLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceConnectDirectMessageLambdaWrapper* lambdaWrapper = NewObject<UChatServiceConnectDirectMessageLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitConnectDirectMessage();
	InnerClient->OnConnectDirectMessageResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceConnectDirectMessageLambdaWrapper::OnResponse);
	InnerClient->OnContextStateChange.AddUniqueDynamic(lambdaWrapper, &UChatServiceConnectDirectMessageLambdaWrapper::OnContextStateChanged);
	InnerClient->ConnectDirectMessage(lambdaWrapper->Handle, Request);
}

void UChatService::CallSendChatMessage(const FGrpcSroChatSendChatMessageRequest& Request, FSendChatMessageLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceSendChatMessageLambdaWrapper* lambdaWrapper = NewObject<UChatServiceSendChatMessageLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitSendChatMessage();
	InnerClient->OnSendChatMessageResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceSendChatMessageLambdaWrapper::OnResponse);
	InnerClient->SendChatMessage(lambdaWrapper->Handle, Request);
}

void UChatService::CallSendDirectMessage(const FGrpcSroChatSendDirectMessageRequest& Request, FSendDirectMessageLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceSendDirectMessageLambdaWrapper* lambdaWrapper = NewObject<UChatServiceSendDirectMessageLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitSendDirectMessage();
	InnerClient->OnSendDirectMessageResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceSendDirectMessageLambdaWrapper::OnResponse);
	InnerClient->SendDirectMessage(lambdaWrapper->Handle, Request);
}

void UChatService::CallGetChannel(const FGrpcSroChatChatChannelTarget& Request, FGetChannelLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceGetChannelLambdaWrapper* lambdaWrapper = NewObject<UChatServiceGetChannelLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitGetChannel();
	InnerClient->OnGetChannelResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceGetChannelLambdaWrapper::OnResponse);
	InnerClient->GetChannel(lambdaWrapper->Handle, Request);
}

void UChatService::CallAllChatChannels(const FGrpcGoogleProtobufEmpty& Request, FAllChatChannelsLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceAllChatChannelsLambdaWrapper* lambdaWrapper = NewObject<UChatServiceAllChatChannelsLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitAllChatChannels();
	InnerClient->OnAllChatChannelsResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceAllChatChannelsLambdaWrapper::OnResponse);
	InnerClient->AllChatChannels(lambdaWrapper->Handle, Request);
}

void UChatService::CallCreateChannel(const FGrpcSroChatCreateChannelMessage& Request, FCreateChannelLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceCreateChannelLambdaWrapper* lambdaWrapper = NewObject<UChatServiceCreateChannelLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitCreateChannel();
	InnerClient->OnCreateChannelResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceCreateChannelLambdaWrapper::OnResponse);
	InnerClient->CreateChannel(lambdaWrapper->Handle, Request);
}

void UChatService::CallDeleteChannel(const FGrpcSroChatChatChannelTarget& Request, FDeleteChannelLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceDeleteChannelLambdaWrapper* lambdaWrapper = NewObject<UChatServiceDeleteChannelLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitDeleteChannel();
	InnerClient->OnDeleteChannelResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceDeleteChannelLambdaWrapper::OnResponse);
	InnerClient->DeleteChannel(lambdaWrapper->Handle, Request);
}

void UChatService::CallEditChannel(const FGrpcSroChatUpdateChatChannelRequest& Request, FEditChannelLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceEditChannelLambdaWrapper* lambdaWrapper = NewObject<UChatServiceEditChannelLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitEditChannel();
	InnerClient->OnEditChannelResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceEditChannelLambdaWrapper::OnResponse);
	InnerClient->EditChannel(lambdaWrapper->Handle, Request);
}

void UChatService::CallGetAuthorizedChatChannels(const FGrpcSroCharactersCharacterTarget& Request, FGetAuthorizedChatChannelsLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceGetAuthorizedChatChannelsLambdaWrapper* lambdaWrapper = NewObject<UChatServiceGetAuthorizedChatChannelsLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitGetAuthorizedChatChannels();
	InnerClient->OnGetAuthorizedChatChannelsResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceGetAuthorizedChatChannelsLambdaWrapper::OnResponse);
	InnerClient->GetAuthorizedChatChannels(lambdaWrapper->Handle, Request);
}

void UChatService::CallUpdateUserChatChannelAuthorizations(const FGrpcSroChatRequestChatChannelAuthChange& Request, FUpdateUserChatChannelAuthorizationsLambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceUpdateUserChatChannelAuthorizationsLambdaWrapper* lambdaWrapper = NewObject<UChatServiceUpdateUserChatChannelAuthorizationsLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->InitUpdateUserChatChannelAuthorizations();
	InnerClient->OnUpdateUserChatChannelAuthorizationsResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceUpdateUserChatChannelAuthorizationsLambdaWrapper::OnResponse);
	InnerClient->UpdateUserChatChannelAuthorizations(lambdaWrapper->Handle, Request);
}
