//Generated by TurboLink CodeGenerator, do not edit!
#include "ChatContext.h"
#include "SSroChat/ChatClient.h"
#include "ChatService_Private.h"
#include "ChatMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_ChatService_ConnectChannel::GrpcContext_ChatService_ConnectChannel(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_ConnectChannel::Call(const FGrpcSroChatChatChannelTarget& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::ChatChannelTarget rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncConnectChannel(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get(), InitialTag);
}

void GrpcContext_ChatService_ConnectChannel::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::sro::chat::ChatMessage* _RpcResponse) {
		UChatServiceClient* client = (UChatServiceClient*)(this->Client);
		if (!(client->OnConnectChannelResponse.IsBound())) return;

		FGrpcSroChatChatMessage response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnConnectChannelResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ChatService_ConnectDirectMessage::GrpcContext_ChatService_ConnectDirectMessage(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_ConnectDirectMessage::Call(const FGrpcSroCharactersCharacterTarget& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::characters::CharacterTarget rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncConnectDirectMessage(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get(), InitialTag);
}

void GrpcContext_ChatService_ConnectDirectMessage::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::sro::chat::ChatMessage* _RpcResponse) {
		UChatServiceClient* client = (UChatServiceClient*)(this->Client);
		if (!(client->OnConnectDirectMessageResponse.IsBound())) return;

		FGrpcSroChatChatMessage response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnConnectDirectMessageResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ChatService_SendChatMessage::GrpcContext_ChatService_SendChatMessage(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_SendChatMessage::Call(const FGrpcSroChatSendChatMessageRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::SendChatMessageRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncSendChatMessage(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_SendChatMessage::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) {
		UChatServiceClient* client = (UChatServiceClient*)(this->Client);
		if (!(client->OnSendChatMessageResponse.IsBound())) return;

		FGrpcGoogleProtobufEmpty response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnSendChatMessageResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ChatService_SendDirectMessage::GrpcContext_ChatService_SendDirectMessage(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_SendDirectMessage::Call(const FGrpcSroChatSendDirectMessageRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::SendDirectMessageRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncSendDirectMessage(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_SendDirectMessage::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) {
		UChatServiceClient* client = (UChatServiceClient*)(this->Client);
		if (!(client->OnSendDirectMessageResponse.IsBound())) return;

		FGrpcGoogleProtobufEmpty response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnSendDirectMessageResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ChatService_GetChannel::GrpcContext_ChatService_GetChannel(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_GetChannel::Call(const FGrpcSroChatChatChannelTarget& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::ChatChannelTarget rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetChannel(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_GetChannel::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::sro::chat::ChatChannel* _RpcResponse) {
		UChatServiceClient* client = (UChatServiceClient*)(this->Client);
		if (!(client->OnGetChannelResponse.IsBound())) return;

		FGrpcSroChatChatChannel response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnGetChannelResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ChatService_AllChatChannels::GrpcContext_ChatService_AllChatChannels(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_AllChatChannels::Call(const FGrpcGoogleProtobufEmpty& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::google::protobuf::Empty rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncAllChatChannels(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_AllChatChannels::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::sro::chat::ChatChannels* _RpcResponse) {
		UChatServiceClient* client = (UChatServiceClient*)(this->Client);
		if (!(client->OnAllChatChannelsResponse.IsBound())) return;

		FGrpcSroChatChatChannels response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnAllChatChannelsResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ChatService_CreateChannel::GrpcContext_ChatService_CreateChannel(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_CreateChannel::Call(const FGrpcSroChatCreateChannelMessage& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::CreateChannelMessage rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncCreateChannel(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_CreateChannel::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) {
		UChatServiceClient* client = (UChatServiceClient*)(this->Client);
		if (!(client->OnCreateChannelResponse.IsBound())) return;

		FGrpcGoogleProtobufEmpty response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnCreateChannelResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ChatService_DeleteChannel::GrpcContext_ChatService_DeleteChannel(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_DeleteChannel::Call(const FGrpcSroChatChatChannelTarget& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::ChatChannelTarget rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncDeleteChannel(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_DeleteChannel::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) {
		UChatServiceClient* client = (UChatServiceClient*)(this->Client);
		if (!(client->OnDeleteChannelResponse.IsBound())) return;

		FGrpcGoogleProtobufEmpty response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnDeleteChannelResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ChatService_EditChannel::GrpcContext_ChatService_EditChannel(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_EditChannel::Call(const FGrpcSroChatUpdateChatChannelRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::UpdateChatChannelRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncEditChannel(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_EditChannel::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) {
		UChatServiceClient* client = (UChatServiceClient*)(this->Client);
		if (!(client->OnEditChannelResponse.IsBound())) return;

		FGrpcGoogleProtobufEmpty response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnEditChannelResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ChatService_GetAuthorizedChatChannels::GrpcContext_ChatService_GetAuthorizedChatChannels(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_GetAuthorizedChatChannels::Call(const FGrpcSroCharactersCharacterTarget& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::characters::CharacterTarget rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetAuthorizedChatChannels(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_GetAuthorizedChatChannels::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::sro::chat::ChatChannels* _RpcResponse) {
		UChatServiceClient* client = (UChatServiceClient*)(this->Client);
		if (!(client->OnGetAuthorizedChatChannelsResponse.IsBound())) return;

		FGrpcSroChatChatChannels response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnGetAuthorizedChatChannelsResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ChatService_UpdateUserChatChannelAuthorizations::GrpcContext_ChatService_UpdateUserChatChannelAuthorizations(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_UpdateUserChatChannelAuthorizations::Call(const FGrpcSroChatRequestChatChannelAuthChange& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::RequestChatChannelAuthChange rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncUpdateUserChatChannelAuthorizations(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_UpdateUserChatChannelAuthorizations::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) {
		UChatServiceClient* client = (UChatServiceClient*)(this->Client);
		if (!(client->OnUpdateUserChatChannelAuthorizationsResponse.IsBound())) return;

		FGrpcGoogleProtobufEmpty response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnUpdateUserChatChannelAuthorizationsResponse.Broadcast(Handle, _Result, response);
	});
}
