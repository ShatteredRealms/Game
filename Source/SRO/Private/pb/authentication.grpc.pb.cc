// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: authentication.proto

#include "authentication.pb.h"
#include "authentication.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sro {
namespace accounts {

static const char* AuthenticationService_method_names[] = {
  "/sro.accounts.AuthenticationService/Register",
  "/sro.accounts.AuthenticationService/Login",
  "/sro.accounts.AuthenticationService/Refresh",
  "/sro.accounts.AuthenticationService/ForgotUsername",
  "/sro.accounts.AuthenticationService/ForgotPassword",
  "/sro.accounts.AuthenticationService/ResetPassword",
};

std::unique_ptr< AuthenticationService::Stub> AuthenticationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AuthenticationService::Stub> stub(new AuthenticationService::Stub(channel, options));
  return stub;
}

AuthenticationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Register_(AuthenticationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(AuthenticationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Refresh_(AuthenticationService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ForgotUsername_(AuthenticationService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ForgotPassword_(AuthenticationService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetPassword_(AuthenticationService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AuthenticationService::Stub::Register(::grpc::ClientContext* context, const ::sro::accounts::RegisterAccountMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::RegisterAccountMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Register_, context, request, response);
}

void AuthenticationService::Stub::async::Register(::grpc::ClientContext* context, const ::sro::accounts::RegisterAccountMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::RegisterAccountMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void AuthenticationService::Stub::async::Register(::grpc::ClientContext* context, const ::sro::accounts::RegisterAccountMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthenticationService::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::sro::accounts::RegisterAccountMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::accounts::RegisterAccountMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Register_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthenticationService::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::sro::accounts::RegisterAccountMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthenticationService::Stub::Login(::grpc::ClientContext* context, const ::sro::accounts::LoginMessage& request, ::sro::accounts::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::LoginMessage, ::sro::accounts::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void AuthenticationService::Stub::async::Login(::grpc::ClientContext* context, const ::sro::accounts::LoginMessage* request, ::sro::accounts::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::LoginMessage, ::sro::accounts::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void AuthenticationService::Stub::async::Login(::grpc::ClientContext* context, const ::sro::accounts::LoginMessage* request, ::sro::accounts::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::LoginResponse>* AuthenticationService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::sro::accounts::LoginMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::accounts::LoginResponse, ::sro::accounts::LoginMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::LoginResponse>* AuthenticationService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::sro::accounts::LoginMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthenticationService::Stub::Refresh(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::accounts::AuthToken* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sro::accounts::AuthToken, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Refresh_, context, request, response);
}

void AuthenticationService::Stub::async::Refresh(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::accounts::AuthToken* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sro::accounts::AuthToken, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Refresh_, context, request, response, std::move(f));
}

void AuthenticationService::Stub::async::Refresh(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::accounts::AuthToken* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Refresh_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::AuthToken>* AuthenticationService::Stub::PrepareAsyncRefreshRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::accounts::AuthToken, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Refresh_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::AuthToken>* AuthenticationService::Stub::AsyncRefreshRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRefreshRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthenticationService::Stub::ForgotUsername(::grpc::ClientContext* context, const ::sro::accounts::ForgotUsernameMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::ForgotUsernameMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ForgotUsername_, context, request, response);
}

void AuthenticationService::Stub::async::ForgotUsername(::grpc::ClientContext* context, const ::sro::accounts::ForgotUsernameMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::ForgotUsernameMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForgotUsername_, context, request, response, std::move(f));
}

void AuthenticationService::Stub::async::ForgotUsername(::grpc::ClientContext* context, const ::sro::accounts::ForgotUsernameMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForgotUsername_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthenticationService::Stub::PrepareAsyncForgotUsernameRaw(::grpc::ClientContext* context, const ::sro::accounts::ForgotUsernameMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::accounts::ForgotUsernameMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ForgotUsername_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthenticationService::Stub::AsyncForgotUsernameRaw(::grpc::ClientContext* context, const ::sro::accounts::ForgotUsernameMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncForgotUsernameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthenticationService::Stub::ForgotPassword(::grpc::ClientContext* context, const ::sro::accounts::ForgotPasswordMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::ForgotPasswordMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ForgotPassword_, context, request, response);
}

void AuthenticationService::Stub::async::ForgotPassword(::grpc::ClientContext* context, const ::sro::accounts::ForgotPasswordMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::ForgotPasswordMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForgotPassword_, context, request, response, std::move(f));
}

void AuthenticationService::Stub::async::ForgotPassword(::grpc::ClientContext* context, const ::sro::accounts::ForgotPasswordMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForgotPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthenticationService::Stub::PrepareAsyncForgotPasswordRaw(::grpc::ClientContext* context, const ::sro::accounts::ForgotPasswordMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::accounts::ForgotPasswordMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ForgotPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthenticationService::Stub::AsyncForgotPasswordRaw(::grpc::ClientContext* context, const ::sro::accounts::ForgotPasswordMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncForgotPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthenticationService::Stub::ResetPassword(::grpc::ClientContext* context, const ::sro::accounts::RestPasswordMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::RestPasswordMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetPassword_, context, request, response);
}

void AuthenticationService::Stub::async::ResetPassword(::grpc::ClientContext* context, const ::sro::accounts::RestPasswordMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::RestPasswordMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, std::move(f));
}

void AuthenticationService::Stub::async::ResetPassword(::grpc::ClientContext* context, const ::sro::accounts::RestPasswordMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthenticationService::Stub::PrepareAsyncResetPasswordRaw(::grpc::ClientContext* context, const ::sro::accounts::RestPasswordMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::accounts::RestPasswordMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthenticationService::Stub::AsyncResetPasswordRaw(::grpc::ClientContext* context, const ::sro::accounts::RestPasswordMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

AuthenticationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthenticationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthenticationService::Service, ::sro::accounts::RegisterAccountMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthenticationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::RegisterAccountMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->Register(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthenticationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthenticationService::Service, ::sro::accounts::LoginMessage, ::sro::accounts::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthenticationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::LoginMessage* req,
             ::sro::accounts::LoginResponse* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthenticationService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthenticationService::Service, ::google::protobuf::Empty, ::sro::accounts::AuthToken, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthenticationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sro::accounts::AuthToken* resp) {
               return service->Refresh(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthenticationService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthenticationService::Service, ::sro::accounts::ForgotUsernameMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthenticationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::ForgotUsernameMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->ForgotUsername(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthenticationService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthenticationService::Service, ::sro::accounts::ForgotPasswordMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthenticationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::ForgotPasswordMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->ForgotPassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthenticationService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthenticationService::Service, ::sro::accounts::RestPasswordMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthenticationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::RestPasswordMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->ResetPassword(ctx, req, resp);
             }, this)));
}

AuthenticationService::Service::~Service() {
}

::grpc::Status AuthenticationService::Service::Register(::grpc::ServerContext* context, const ::sro::accounts::RegisterAccountMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthenticationService::Service::Login(::grpc::ServerContext* context, const ::sro::accounts::LoginMessage* request, ::sro::accounts::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthenticationService::Service::Refresh(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::accounts::AuthToken* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthenticationService::Service::ForgotUsername(::grpc::ServerContext* context, const ::sro::accounts::ForgotUsernameMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthenticationService::Service::ForgotPassword(::grpc::ServerContext* context, const ::sro::accounts::ForgotPasswordMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthenticationService::Service::ResetPassword(::grpc::ServerContext* context, const ::sro::accounts::RestPasswordMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sro
}  // namespace accounts

