#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pb/google/api/annotations.pb.h"
#include <google/protobuf/empty.pb.h>
#include "authorization.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_2eproto;
namespace sro {
namespace accounts {
class ChangePasswordRequest;
struct ChangePasswordRequestDefaultTypeInternal;
extern ChangePasswordRequestDefaultTypeInternal _ChangePasswordRequest_default_instance_;
class EditUserDetailsRequest;
struct EditUserDetailsRequestDefaultTypeInternal;
extern EditUserDetailsRequestDefaultTypeInternal _EditUserDetailsRequest_default_instance_;
class GetAllUsersResponse;
struct GetAllUsersResponseDefaultTypeInternal;
extern GetAllUsersResponseDefaultTypeInternal _GetAllUsersResponse_default_instance_;
class GetUserMessage;
struct GetUserMessageDefaultTypeInternal;
extern GetUserMessageDefaultTypeInternal _GetUserMessage_default_instance_;
class GetUserResponse;
struct GetUserResponseDefaultTypeInternal;
extern GetUserResponseDefaultTypeInternal _GetUserResponse_default_instance_;
class StatusRequest;
struct StatusRequestDefaultTypeInternal;
extern StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
class StatusResponse;
struct StatusResponseDefaultTypeInternal;
extern StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
class UserMessage;
struct UserMessageDefaultTypeInternal;
extern UserMessageDefaultTypeInternal _UserMessage_default_instance_;
}  // namespace accounts
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template<> ::sro::accounts::ChangePasswordRequest* Arena::CreateMaybeMessage<::sro::accounts::ChangePasswordRequest>(Arena*);
template<> ::sro::accounts::EditUserDetailsRequest* Arena::CreateMaybeMessage<::sro::accounts::EditUserDetailsRequest>(Arena*);
template<> ::sro::accounts::GetAllUsersResponse* Arena::CreateMaybeMessage<::sro::accounts::GetAllUsersResponse>(Arena*);
template<> ::sro::accounts::GetUserMessage* Arena::CreateMaybeMessage<::sro::accounts::GetUserMessage>(Arena*);
template<> ::sro::accounts::GetUserResponse* Arena::CreateMaybeMessage<::sro::accounts::GetUserResponse>(Arena*);
template<> ::sro::accounts::StatusRequest* Arena::CreateMaybeMessage<::sro::accounts::StatusRequest>(Arena*);
template<> ::sro::accounts::StatusResponse* Arena::CreateMaybeMessage<::sro::accounts::StatusResponse>(Arena*);
template<> ::sro::accounts::UserMessage* Arena::CreateMaybeMessage<::sro::accounts::UserMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sro {
namespace accounts {

// ===================================================================

class GetUserMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.accounts.GetUserMessage) */ {
 public:
  inline GetUserMessage() : GetUserMessage(nullptr) {}
  ~GetUserMessage() override;
  explicit constexpr GetUserMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserMessage(const GetUserMessage& from);
  GetUserMessage(GetUserMessage&& from) noexcept
    : GetUserMessage() {
    *this = ::std::move(from);
  }

  inline GetUserMessage& operator=(const GetUserMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserMessage& operator=(GetUserMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserMessage* internal_default_instance() {
    return reinterpret_cast<const GetUserMessage*>(
               &_GetUserMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetUserMessage& a, GetUserMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUserMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.accounts.GetUserMessage";
  }
  protected:
  explicit GetUserMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // uint64 user_id = 1;
  void clear_user_id();
  uint64_t user_id() const;
  void set_user_id(uint64_t value);
  private:
  uint64_t _internal_user_id() const;
  void _internal_set_user_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.accounts.GetUserMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class UserMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.accounts.UserMessage) */ {
 public:
  inline UserMessage() : UserMessage(nullptr) {}
  ~UserMessage() override;
  explicit constexpr UserMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserMessage(const UserMessage& from);
  UserMessage(UserMessage&& from) noexcept
    : UserMessage() {
    *this = ::std::move(from);
  }

  inline UserMessage& operator=(const UserMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserMessage& operator=(UserMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserMessage* internal_default_instance() {
    return reinterpret_cast<const UserMessage*>(
               &_UserMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserMessage& a, UserMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UserMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.accounts.UserMessage";
  }
  protected:
  explicit UserMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 5,
    kEmailFieldNumber = 2,
    kUsernameFieldNumber = 3,
    kCreatedAtFieldNumber = 4,
    kBannedAtFieldNumber = 6,
    kCurrentCharacterIdFieldNumber = 7,
    kIdFieldNumber = 1,
  };
  // repeated .sro.accounts.UserRole roles = 5;
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::sro::accounts::UserRole* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserRole >*
      mutable_roles();
  private:
  const ::sro::accounts::UserRole& _internal_roles(int index) const;
  ::sro::accounts::UserRole* _internal_add_roles();
  public:
  const ::sro::accounts::UserRole& roles(int index) const;
  ::sro::accounts::UserRole* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserRole >&
      roles() const;

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string username = 3;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string createdAt = 4;
  void clear_createdat();
  const std::string& createdat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_createdat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_createdat();
  PROTOBUF_NODISCARD std::string* release_createdat();
  void set_allocated_createdat(std::string* createdat);
  private:
  const std::string& _internal_createdat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createdat(const std::string& value);
  std::string* _internal_mutable_createdat();
  public:

  // .google.protobuf.StringValue bannedAt = 6;
  bool has_bannedat() const;
  private:
  bool _internal_has_bannedat() const;
  public:
  void clear_bannedat();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& bannedat() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_bannedat();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_bannedat();
  void set_allocated_bannedat(::PROTOBUF_NAMESPACE_ID::StringValue* bannedat);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_bannedat() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_bannedat();
  public:
  void unsafe_arena_set_allocated_bannedat(
      ::PROTOBUF_NAMESPACE_ID::StringValue* bannedat);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_bannedat();

  // .google.protobuf.UInt64Value current_character_id = 7;
  bool has_current_character_id() const;
  private:
  bool _internal_has_current_character_id() const;
  public:
  void clear_current_character_id();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& current_character_id() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_current_character_id();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_current_character_id();
  void set_allocated_current_character_id(::PROTOBUF_NAMESPACE_ID::UInt64Value* current_character_id);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_current_character_id() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_current_character_id();
  public:
  void unsafe_arena_set_allocated_current_character_id(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* current_character_id);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_current_character_id();

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.accounts.UserMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserRole > roles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdat_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* bannedat_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* current_character_id_;
  uint64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.accounts.GetUserResponse) */ {
 public:
  inline GetUserResponse() : GetUserResponse(nullptr) {}
  ~GetUserResponse() override;
  explicit constexpr GetUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserResponse(const GetUserResponse& from);
  GetUserResponse(GetUserResponse&& from) noexcept
    : GetUserResponse() {
    *this = ::std::move(from);
  }

  inline GetUserResponse& operator=(const GetUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserResponse& operator=(GetUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserResponse*>(
               &_GetUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetUserResponse& a, GetUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.accounts.GetUserResponse";
  }
  protected:
  explicit GetUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 7,
    kPermissionsFieldNumber = 8,
    kEmailFieldNumber = 2,
    kUsernameFieldNumber = 3,
    kFirstNameFieldNumber = 4,
    kLastNameFieldNumber = 5,
    kCreatedAtFieldNumber = 6,
    kBannedAtFieldNumber = 9,
    kCurrentCharacterIdFieldNumber = 10,
    kIdFieldNumber = 1,
  };
  // repeated .sro.accounts.UserRole roles = 7;
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::sro::accounts::UserRole* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserRole >*
      mutable_roles();
  private:
  const ::sro::accounts::UserRole& _internal_roles(int index) const;
  ::sro::accounts::UserRole* _internal_add_roles();
  public:
  const ::sro::accounts::UserRole& roles(int index) const;
  ::sro::accounts::UserRole* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserRole >&
      roles() const;

  // repeated .sro.accounts.UserPermission permissions = 8;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::sro::accounts::UserPermission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserPermission >*
      mutable_permissions();
  private:
  const ::sro::accounts::UserPermission& _internal_permissions(int index) const;
  ::sro::accounts::UserPermission* _internal_add_permissions();
  public:
  const ::sro::accounts::UserPermission& permissions(int index) const;
  ::sro::accounts::UserPermission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserPermission >&
      permissions() const;

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string username = 3;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string first_name = 4;
  void clear_first_name();
  const std::string& first_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_name();
  PROTOBUF_NODISCARD std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 5;
  void clear_last_name();
  const std::string& last_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_name();
  PROTOBUF_NODISCARD std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string createdAt = 6;
  void clear_createdat();
  const std::string& createdat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_createdat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_createdat();
  PROTOBUF_NODISCARD std::string* release_createdat();
  void set_allocated_createdat(std::string* createdat);
  private:
  const std::string& _internal_createdat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createdat(const std::string& value);
  std::string* _internal_mutable_createdat();
  public:

  // .google.protobuf.StringValue bannedAt = 9;
  bool has_bannedat() const;
  private:
  bool _internal_has_bannedat() const;
  public:
  void clear_bannedat();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& bannedat() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_bannedat();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_bannedat();
  void set_allocated_bannedat(::PROTOBUF_NAMESPACE_ID::StringValue* bannedat);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_bannedat() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_bannedat();
  public:
  void unsafe_arena_set_allocated_bannedat(
      ::PROTOBUF_NAMESPACE_ID::StringValue* bannedat);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_bannedat();

  // .google.protobuf.UInt64Value current_character_id = 10;
  bool has_current_character_id() const;
  private:
  bool _internal_has_current_character_id() const;
  public:
  void clear_current_character_id();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& current_character_id() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_current_character_id();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_current_character_id();
  void set_allocated_current_character_id(::PROTOBUF_NAMESPACE_ID::UInt64Value* current_character_id);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_current_character_id() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_current_character_id();
  public:
  void unsafe_arena_set_allocated_current_character_id(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* current_character_id);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_current_character_id();

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.accounts.GetUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserRole > roles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserPermission > permissions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdat_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* bannedat_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* current_character_id_;
  uint64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetAllUsersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.accounts.GetAllUsersResponse) */ {
 public:
  inline GetAllUsersResponse() : GetAllUsersResponse(nullptr) {}
  ~GetAllUsersResponse() override;
  explicit constexpr GetAllUsersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllUsersResponse(const GetAllUsersResponse& from);
  GetAllUsersResponse(GetAllUsersResponse&& from) noexcept
    : GetAllUsersResponse() {
    *this = ::std::move(from);
  }

  inline GetAllUsersResponse& operator=(const GetAllUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllUsersResponse& operator=(GetAllUsersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllUsersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllUsersResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllUsersResponse*>(
               &_GetAllUsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetAllUsersResponse& a, GetAllUsersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllUsersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllUsersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllUsersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllUsersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllUsersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAllUsersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllUsersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.accounts.GetAllUsersResponse";
  }
  protected:
  explicit GetAllUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .sro.accounts.UserMessage users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::sro::accounts::UserMessage* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserMessage >*
      mutable_users();
  private:
  const ::sro::accounts::UserMessage& _internal_users(int index) const;
  ::sro::accounts::UserMessage* _internal_add_users();
  public:
  const ::sro::accounts::UserMessage& users(int index) const;
  ::sro::accounts::UserMessage* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserMessage >&
      users() const;

  // @@protoc_insertion_point(class_scope:sro.accounts.GetAllUsersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserMessage > users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class EditUserDetailsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.accounts.EditUserDetailsRequest) */ {
 public:
  inline EditUserDetailsRequest() : EditUserDetailsRequest(nullptr) {}
  ~EditUserDetailsRequest() override;
  explicit constexpr EditUserDetailsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EditUserDetailsRequest(const EditUserDetailsRequest& from);
  EditUserDetailsRequest(EditUserDetailsRequest&& from) noexcept
    : EditUserDetailsRequest() {
    *this = ::std::move(from);
  }

  inline EditUserDetailsRequest& operator=(const EditUserDetailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditUserDetailsRequest& operator=(EditUserDetailsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditUserDetailsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EditUserDetailsRequest* internal_default_instance() {
    return reinterpret_cast<const EditUserDetailsRequest*>(
               &_EditUserDetailsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EditUserDetailsRequest& a, EditUserDetailsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EditUserDetailsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditUserDetailsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditUserDetailsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditUserDetailsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EditUserDetailsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EditUserDetailsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditUserDetailsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.accounts.EditUserDetailsRequest";
  }
  protected:
  explicit EditUserDetailsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kUsernameFieldNumber = 4,
    kFirstNameFieldNumber = 5,
    kLastNameFieldNumber = 6,
    kUserIdFieldNumber = 1,
  };
  // .google.protobuf.StringValue email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& email() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_email();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_email();
  void set_allocated_email(::PROTOBUF_NAMESPACE_ID::StringValue* email);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_email() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_email();
  public:
  void unsafe_arena_set_allocated_email(
      ::PROTOBUF_NAMESPACE_ID::StringValue* email);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_email();

  // .google.protobuf.StringValue username = 4;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& username() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_username();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_username();
  void set_allocated_username(::PROTOBUF_NAMESPACE_ID::StringValue* username);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_username() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_username();
  public:
  void unsafe_arena_set_allocated_username(
      ::PROTOBUF_NAMESPACE_ID::StringValue* username);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_username();

  // .google.protobuf.StringValue first_name = 5;
  bool has_first_name() const;
  private:
  bool _internal_has_first_name() const;
  public:
  void clear_first_name();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& first_name() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_first_name();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_first_name();
  void set_allocated_first_name(::PROTOBUF_NAMESPACE_ID::StringValue* first_name);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_first_name() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_first_name();
  public:
  void unsafe_arena_set_allocated_first_name(
      ::PROTOBUF_NAMESPACE_ID::StringValue* first_name);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_first_name();

  // .google.protobuf.StringValue last_name = 6;
  bool has_last_name() const;
  private:
  bool _internal_has_last_name() const;
  public:
  void clear_last_name();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& last_name() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_last_name();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_last_name();
  void set_allocated_last_name(::PROTOBUF_NAMESPACE_ID::StringValue* last_name);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_last_name() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_last_name();
  public:
  void unsafe_arena_set_allocated_last_name(
      ::PROTOBUF_NAMESPACE_ID::StringValue* last_name);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_last_name();

  // uint64 user_id = 1;
  void clear_user_id();
  uint64_t user_id() const;
  void set_user_id(uint64_t value);
  private:
  uint64_t _internal_user_id() const;
  void _internal_set_user_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.accounts.EditUserDetailsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* email_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* username_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* first_name_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* last_name_;
  uint64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class ChangePasswordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.accounts.ChangePasswordRequest) */ {
 public:
  inline ChangePasswordRequest() : ChangePasswordRequest(nullptr) {}
  ~ChangePasswordRequest() override;
  explicit constexpr ChangePasswordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangePasswordRequest(const ChangePasswordRequest& from);
  ChangePasswordRequest(ChangePasswordRequest&& from) noexcept
    : ChangePasswordRequest() {
    *this = ::std::move(from);
  }

  inline ChangePasswordRequest& operator=(const ChangePasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePasswordRequest& operator=(ChangePasswordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangePasswordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangePasswordRequest* internal_default_instance() {
    return reinterpret_cast<const ChangePasswordRequest*>(
               &_ChangePasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChangePasswordRequest& a, ChangePasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangePasswordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangePasswordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangePasswordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangePasswordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangePasswordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChangePasswordRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePasswordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.accounts.ChangePasswordRequest";
  }
  protected:
  explicit ChangePasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentPasswordFieldNumber = 2,
    kNewPasswordFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // string current_password = 2;
  void clear_current_password();
  const std::string& current_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_current_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_current_password();
  PROTOBUF_NODISCARD std::string* release_current_password();
  void set_allocated_current_password(std::string* current_password);
  private:
  const std::string& _internal_current_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_password(const std::string& value);
  std::string* _internal_mutable_current_password();
  public:

  // string new_password = 3;
  void clear_new_password();
  const std::string& new_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_password();
  PROTOBUF_NODISCARD std::string* release_new_password();
  void set_allocated_new_password(std::string* new_password);
  private:
  const std::string& _internal_new_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_password(const std::string& value);
  std::string* _internal_mutable_new_password();
  public:

  // uint64 user_id = 1;
  void clear_user_id();
  uint64_t user_id() const;
  void set_user_id(uint64_t value);
  private:
  uint64_t _internal_user_id() const;
  void _internal_set_user_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.accounts.ChangePasswordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_password_;
  uint64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class StatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.accounts.StatusResponse) */ {
 public:
  inline StatusResponse() : StatusResponse(nullptr) {}
  ~StatusResponse() override;
  explicit constexpr StatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusResponse(const StatusResponse& from);
  StatusResponse(StatusResponse&& from) noexcept
    : StatusResponse() {
    *this = ::std::move(from);
  }

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusResponse& operator=(StatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusResponse* internal_default_instance() {
    return reinterpret_cast<const StatusResponse*>(
               &_StatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StatusResponse& a, StatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.accounts.StatusResponse";
  }
  protected:
  explicit StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
  };
  // .google.protobuf.UInt64Value character_id = 1;
  bool has_character_id() const;
  private:
  bool _internal_has_character_id() const;
  public:
  void clear_character_id();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& character_id() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_character_id();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_character_id();
  void set_allocated_character_id(::PROTOBUF_NAMESPACE_ID::UInt64Value* character_id);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_character_id() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_character_id();
  public:
  void unsafe_arena_set_allocated_character_id(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* character_id);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_character_id();

  // @@protoc_insertion_point(class_scope:sro.accounts.StatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* character_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class StatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.accounts.StatusRequest) */ {
 public:
  inline StatusRequest() : StatusRequest(nullptr) {}
  ~StatusRequest() override;
  explicit constexpr StatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusRequest(const StatusRequest& from);
  StatusRequest(StatusRequest&& from) noexcept
    : StatusRequest() {
    *this = ::std::move(from);
  }

  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusRequest& operator=(StatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusRequest* internal_default_instance() {
    return reinterpret_cast<const StatusRequest*>(
               &_StatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StatusRequest& a, StatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.accounts.StatusRequest";
  }
  protected:
  explicit StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // .google.protobuf.UInt64Value character_id = 2;
  bool has_character_id() const;
  private:
  bool _internal_has_character_id() const;
  public:
  void clear_character_id();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& character_id() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_character_id();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_character_id();
  void set_allocated_character_id(::PROTOBUF_NAMESPACE_ID::UInt64Value* character_id);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_character_id() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_character_id();
  public:
  void unsafe_arena_set_allocated_character_id(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* character_id);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_character_id();

  // uint64 user_id = 1;
  void clear_user_id();
  uint64_t user_id() const;
  void set_user_id(uint64_t value);
  private:
  uint64_t _internal_user_id() const;
  void _internal_set_user_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.accounts.StatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* character_id_;
  uint64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetUserMessage

// uint64 user_id = 1;
inline void GetUserMessage::clear_user_id() {
  user_id_ = uint64_t{0u};
}
inline uint64_t GetUserMessage::_internal_user_id() const {
  return user_id_;
}
inline uint64_t GetUserMessage::user_id() const {
  // @@protoc_insertion_point(field_get:sro.accounts.GetUserMessage.user_id)
  return _internal_user_id();
}
inline void GetUserMessage::_internal_set_user_id(uint64_t value) {
  
  user_id_ = value;
}
inline void GetUserMessage::set_user_id(uint64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:sro.accounts.GetUserMessage.user_id)
}

// -------------------------------------------------------------------

// UserMessage

// uint64 id = 1;
inline void UserMessage::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t UserMessage::_internal_id() const {
  return id_;
}
inline uint64_t UserMessage::id() const {
  // @@protoc_insertion_point(field_get:sro.accounts.UserMessage.id)
  return _internal_id();
}
inline void UserMessage::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void UserMessage::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sro.accounts.UserMessage.id)
}

// string email = 2;
inline void UserMessage::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& UserMessage::email() const {
  // @@protoc_insertion_point(field_get:sro.accounts.UserMessage.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMessage::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.accounts.UserMessage.email)
}
inline std::string* UserMessage::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:sro.accounts.UserMessage.email)
  return _s;
}
inline const std::string& UserMessage::_internal_email() const {
  return email_.Get();
}
inline void UserMessage::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserMessage::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserMessage::release_email() {
  // @@protoc_insertion_point(field_release:sro.accounts.UserMessage.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserMessage::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.UserMessage.email)
}

// string username = 3;
inline void UserMessage::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& UserMessage::username() const {
  // @@protoc_insertion_point(field_get:sro.accounts.UserMessage.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMessage::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.accounts.UserMessage.username)
}
inline std::string* UserMessage::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:sro.accounts.UserMessage.username)
  return _s;
}
inline const std::string& UserMessage::_internal_username() const {
  return username_.Get();
}
inline void UserMessage::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserMessage::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserMessage::release_username() {
  // @@protoc_insertion_point(field_release:sro.accounts.UserMessage.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserMessage::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.UserMessage.username)
}

// string createdAt = 4;
inline void UserMessage::clear_createdat() {
  createdat_.ClearToEmpty();
}
inline const std::string& UserMessage::createdat() const {
  // @@protoc_insertion_point(field_get:sro.accounts.UserMessage.createdAt)
  return _internal_createdat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMessage::set_createdat(ArgT0&& arg0, ArgT... args) {
 
 createdat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.accounts.UserMessage.createdAt)
}
inline std::string* UserMessage::mutable_createdat() {
  std::string* _s = _internal_mutable_createdat();
  // @@protoc_insertion_point(field_mutable:sro.accounts.UserMessage.createdAt)
  return _s;
}
inline const std::string& UserMessage::_internal_createdat() const {
  return createdat_.Get();
}
inline void UserMessage::_internal_set_createdat(const std::string& value) {
  
  createdat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserMessage::_internal_mutable_createdat() {
  
  return createdat_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserMessage::release_createdat() {
  // @@protoc_insertion_point(field_release:sro.accounts.UserMessage.createdAt)
  return createdat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserMessage::set_allocated_createdat(std::string* createdat) {
  if (createdat != nullptr) {
    
  } else {
    
  }
  createdat_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdat,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (createdat_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    createdat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.UserMessage.createdAt)
}

// repeated .sro.accounts.UserRole roles = 5;
inline int UserMessage::_internal_roles_size() const {
  return roles_.size();
}
inline int UserMessage::roles_size() const {
  return _internal_roles_size();
}
inline ::sro::accounts::UserRole* UserMessage::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:sro.accounts.UserMessage.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserRole >*
UserMessage::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:sro.accounts.UserMessage.roles)
  return &roles_;
}
inline const ::sro::accounts::UserRole& UserMessage::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::sro::accounts::UserRole& UserMessage::roles(int index) const {
  // @@protoc_insertion_point(field_get:sro.accounts.UserMessage.roles)
  return _internal_roles(index);
}
inline ::sro::accounts::UserRole* UserMessage::_internal_add_roles() {
  return roles_.Add();
}
inline ::sro::accounts::UserRole* UserMessage::add_roles() {
  ::sro::accounts::UserRole* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:sro.accounts.UserMessage.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserRole >&
UserMessage::roles() const {
  // @@protoc_insertion_point(field_list:sro.accounts.UserMessage.roles)
  return roles_;
}

// .google.protobuf.StringValue bannedAt = 6;
inline bool UserMessage::_internal_has_bannedat() const {
  return this != internal_default_instance() && bannedat_ != nullptr;
}
inline bool UserMessage::has_bannedat() const {
  return _internal_has_bannedat();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& UserMessage::_internal_bannedat() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = bannedat_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& UserMessage::bannedat() const {
  // @@protoc_insertion_point(field_get:sro.accounts.UserMessage.bannedAt)
  return _internal_bannedat();
}
inline void UserMessage::unsafe_arena_set_allocated_bannedat(
    ::PROTOBUF_NAMESPACE_ID::StringValue* bannedat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bannedat_);
  }
  bannedat_ = bannedat;
  if (bannedat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.accounts.UserMessage.bannedAt)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* UserMessage::release_bannedat() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = bannedat_;
  bannedat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* UserMessage::unsafe_arena_release_bannedat() {
  // @@protoc_insertion_point(field_release:sro.accounts.UserMessage.bannedAt)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = bannedat_;
  bannedat_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* UserMessage::_internal_mutable_bannedat() {
  
  if (bannedat_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    bannedat_ = p;
  }
  return bannedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* UserMessage::mutable_bannedat() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_bannedat();
  // @@protoc_insertion_point(field_mutable:sro.accounts.UserMessage.bannedAt)
  return _msg;
}
inline void UserMessage::set_allocated_bannedat(::PROTOBUF_NAMESPACE_ID::StringValue* bannedat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bannedat_);
  }
  if (bannedat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bannedat));
    if (message_arena != submessage_arena) {
      bannedat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bannedat, submessage_arena);
    }
    
  } else {
    
  }
  bannedat_ = bannedat;
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.UserMessage.bannedAt)
}

// .google.protobuf.UInt64Value current_character_id = 7;
inline bool UserMessage::_internal_has_current_character_id() const {
  return this != internal_default_instance() && current_character_id_ != nullptr;
}
inline bool UserMessage::has_current_character_id() const {
  return _internal_has_current_character_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& UserMessage::_internal_current_character_id() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = current_character_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& UserMessage::current_character_id() const {
  // @@protoc_insertion_point(field_get:sro.accounts.UserMessage.current_character_id)
  return _internal_current_character_id();
}
inline void UserMessage::unsafe_arena_set_allocated_current_character_id(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* current_character_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_character_id_);
  }
  current_character_id_ = current_character_id;
  if (current_character_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.accounts.UserMessage.current_character_id)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* UserMessage::release_current_character_id() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = current_character_id_;
  current_character_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* UserMessage::unsafe_arena_release_current_character_id() {
  // @@protoc_insertion_point(field_release:sro.accounts.UserMessage.current_character_id)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = current_character_id_;
  current_character_id_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* UserMessage::_internal_mutable_current_character_id() {
  
  if (current_character_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    current_character_id_ = p;
  }
  return current_character_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* UserMessage::mutable_current_character_id() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_current_character_id();
  // @@protoc_insertion_point(field_mutable:sro.accounts.UserMessage.current_character_id)
  return _msg;
}
inline void UserMessage::set_allocated_current_character_id(::PROTOBUF_NAMESPACE_ID::UInt64Value* current_character_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_character_id_);
  }
  if (current_character_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_character_id));
    if (message_arena != submessage_arena) {
      current_character_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_character_id, submessage_arena);
    }
    
  } else {
    
  }
  current_character_id_ = current_character_id;
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.UserMessage.current_character_id)
}

// -------------------------------------------------------------------

// GetUserResponse

// uint64 id = 1;
inline void GetUserResponse::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t GetUserResponse::_internal_id() const {
  return id_;
}
inline uint64_t GetUserResponse::id() const {
  // @@protoc_insertion_point(field_get:sro.accounts.GetUserResponse.id)
  return _internal_id();
}
inline void GetUserResponse::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void GetUserResponse::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sro.accounts.GetUserResponse.id)
}

// string email = 2;
inline void GetUserResponse::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& GetUserResponse::email() const {
  // @@protoc_insertion_point(field_get:sro.accounts.GetUserResponse.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserResponse::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.accounts.GetUserResponse.email)
}
inline std::string* GetUserResponse::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:sro.accounts.GetUserResponse.email)
  return _s;
}
inline const std::string& GetUserResponse::_internal_email() const {
  return email_.Get();
}
inline void GetUserResponse::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetUserResponse::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetUserResponse::release_email() {
  // @@protoc_insertion_point(field_release:sro.accounts.GetUserResponse.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetUserResponse::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.GetUserResponse.email)
}

// string username = 3;
inline void GetUserResponse::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& GetUserResponse::username() const {
  // @@protoc_insertion_point(field_get:sro.accounts.GetUserResponse.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserResponse::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.accounts.GetUserResponse.username)
}
inline std::string* GetUserResponse::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:sro.accounts.GetUserResponse.username)
  return _s;
}
inline const std::string& GetUserResponse::_internal_username() const {
  return username_.Get();
}
inline void GetUserResponse::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetUserResponse::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetUserResponse::release_username() {
  // @@protoc_insertion_point(field_release:sro.accounts.GetUserResponse.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetUserResponse::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.GetUserResponse.username)
}

// string first_name = 4;
inline void GetUserResponse::clear_first_name() {
  first_name_.ClearToEmpty();
}
inline const std::string& GetUserResponse::first_name() const {
  // @@protoc_insertion_point(field_get:sro.accounts.GetUserResponse.first_name)
  return _internal_first_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserResponse::set_first_name(ArgT0&& arg0, ArgT... args) {
 
 first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.accounts.GetUserResponse.first_name)
}
inline std::string* GetUserResponse::mutable_first_name() {
  std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:sro.accounts.GetUserResponse.first_name)
  return _s;
}
inline const std::string& GetUserResponse::_internal_first_name() const {
  return first_name_.Get();
}
inline void GetUserResponse::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetUserResponse::_internal_mutable_first_name() {
  
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetUserResponse::release_first_name() {
  // @@protoc_insertion_point(field_release:sro.accounts.GetUserResponse.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetUserResponse::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (first_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.GetUserResponse.first_name)
}

// string last_name = 5;
inline void GetUserResponse::clear_last_name() {
  last_name_.ClearToEmpty();
}
inline const std::string& GetUserResponse::last_name() const {
  // @@protoc_insertion_point(field_get:sro.accounts.GetUserResponse.last_name)
  return _internal_last_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserResponse::set_last_name(ArgT0&& arg0, ArgT... args) {
 
 last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.accounts.GetUserResponse.last_name)
}
inline std::string* GetUserResponse::mutable_last_name() {
  std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:sro.accounts.GetUserResponse.last_name)
  return _s;
}
inline const std::string& GetUserResponse::_internal_last_name() const {
  return last_name_.Get();
}
inline void GetUserResponse::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetUserResponse::_internal_mutable_last_name() {
  
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetUserResponse::release_last_name() {
  // @@protoc_insertion_point(field_release:sro.accounts.GetUserResponse.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetUserResponse::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.GetUserResponse.last_name)
}

// string createdAt = 6;
inline void GetUserResponse::clear_createdat() {
  createdat_.ClearToEmpty();
}
inline const std::string& GetUserResponse::createdat() const {
  // @@protoc_insertion_point(field_get:sro.accounts.GetUserResponse.createdAt)
  return _internal_createdat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserResponse::set_createdat(ArgT0&& arg0, ArgT... args) {
 
 createdat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.accounts.GetUserResponse.createdAt)
}
inline std::string* GetUserResponse::mutable_createdat() {
  std::string* _s = _internal_mutable_createdat();
  // @@protoc_insertion_point(field_mutable:sro.accounts.GetUserResponse.createdAt)
  return _s;
}
inline const std::string& GetUserResponse::_internal_createdat() const {
  return createdat_.Get();
}
inline void GetUserResponse::_internal_set_createdat(const std::string& value) {
  
  createdat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetUserResponse::_internal_mutable_createdat() {
  
  return createdat_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetUserResponse::release_createdat() {
  // @@protoc_insertion_point(field_release:sro.accounts.GetUserResponse.createdAt)
  return createdat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetUserResponse::set_allocated_createdat(std::string* createdat) {
  if (createdat != nullptr) {
    
  } else {
    
  }
  createdat_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdat,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (createdat_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    createdat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.GetUserResponse.createdAt)
}

// repeated .sro.accounts.UserRole roles = 7;
inline int GetUserResponse::_internal_roles_size() const {
  return roles_.size();
}
inline int GetUserResponse::roles_size() const {
  return _internal_roles_size();
}
inline ::sro::accounts::UserRole* GetUserResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:sro.accounts.GetUserResponse.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserRole >*
GetUserResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:sro.accounts.GetUserResponse.roles)
  return &roles_;
}
inline const ::sro::accounts::UserRole& GetUserResponse::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::sro::accounts::UserRole& GetUserResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:sro.accounts.GetUserResponse.roles)
  return _internal_roles(index);
}
inline ::sro::accounts::UserRole* GetUserResponse::_internal_add_roles() {
  return roles_.Add();
}
inline ::sro::accounts::UserRole* GetUserResponse::add_roles() {
  ::sro::accounts::UserRole* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:sro.accounts.GetUserResponse.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserRole >&
GetUserResponse::roles() const {
  // @@protoc_insertion_point(field_list:sro.accounts.GetUserResponse.roles)
  return roles_;
}

// repeated .sro.accounts.UserPermission permissions = 8;
inline int GetUserResponse::_internal_permissions_size() const {
  return permissions_.size();
}
inline int GetUserResponse::permissions_size() const {
  return _internal_permissions_size();
}
inline ::sro::accounts::UserPermission* GetUserResponse::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:sro.accounts.GetUserResponse.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserPermission >*
GetUserResponse::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:sro.accounts.GetUserResponse.permissions)
  return &permissions_;
}
inline const ::sro::accounts::UserPermission& GetUserResponse::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::sro::accounts::UserPermission& GetUserResponse::permissions(int index) const {
  // @@protoc_insertion_point(field_get:sro.accounts.GetUserResponse.permissions)
  return _internal_permissions(index);
}
inline ::sro::accounts::UserPermission* GetUserResponse::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::sro::accounts::UserPermission* GetUserResponse::add_permissions() {
  ::sro::accounts::UserPermission* _add = _internal_add_permissions();
  // @@protoc_insertion_point(field_add:sro.accounts.GetUserResponse.permissions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserPermission >&
GetUserResponse::permissions() const {
  // @@protoc_insertion_point(field_list:sro.accounts.GetUserResponse.permissions)
  return permissions_;
}

// .google.protobuf.StringValue bannedAt = 9;
inline bool GetUserResponse::_internal_has_bannedat() const {
  return this != internal_default_instance() && bannedat_ != nullptr;
}
inline bool GetUserResponse::has_bannedat() const {
  return _internal_has_bannedat();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& GetUserResponse::_internal_bannedat() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = bannedat_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& GetUserResponse::bannedat() const {
  // @@protoc_insertion_point(field_get:sro.accounts.GetUserResponse.bannedAt)
  return _internal_bannedat();
}
inline void GetUserResponse::unsafe_arena_set_allocated_bannedat(
    ::PROTOBUF_NAMESPACE_ID::StringValue* bannedat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bannedat_);
  }
  bannedat_ = bannedat;
  if (bannedat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.accounts.GetUserResponse.bannedAt)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* GetUserResponse::release_bannedat() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = bannedat_;
  bannedat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* GetUserResponse::unsafe_arena_release_bannedat() {
  // @@protoc_insertion_point(field_release:sro.accounts.GetUserResponse.bannedAt)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = bannedat_;
  bannedat_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* GetUserResponse::_internal_mutable_bannedat() {
  
  if (bannedat_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    bannedat_ = p;
  }
  return bannedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* GetUserResponse::mutable_bannedat() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_bannedat();
  // @@protoc_insertion_point(field_mutable:sro.accounts.GetUserResponse.bannedAt)
  return _msg;
}
inline void GetUserResponse::set_allocated_bannedat(::PROTOBUF_NAMESPACE_ID::StringValue* bannedat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bannedat_);
  }
  if (bannedat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bannedat));
    if (message_arena != submessage_arena) {
      bannedat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bannedat, submessage_arena);
    }
    
  } else {
    
  }
  bannedat_ = bannedat;
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.GetUserResponse.bannedAt)
}

// .google.protobuf.UInt64Value current_character_id = 10;
inline bool GetUserResponse::_internal_has_current_character_id() const {
  return this != internal_default_instance() && current_character_id_ != nullptr;
}
inline bool GetUserResponse::has_current_character_id() const {
  return _internal_has_current_character_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& GetUserResponse::_internal_current_character_id() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = current_character_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& GetUserResponse::current_character_id() const {
  // @@protoc_insertion_point(field_get:sro.accounts.GetUserResponse.current_character_id)
  return _internal_current_character_id();
}
inline void GetUserResponse::unsafe_arena_set_allocated_current_character_id(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* current_character_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_character_id_);
  }
  current_character_id_ = current_character_id;
  if (current_character_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.accounts.GetUserResponse.current_character_id)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* GetUserResponse::release_current_character_id() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = current_character_id_;
  current_character_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* GetUserResponse::unsafe_arena_release_current_character_id() {
  // @@protoc_insertion_point(field_release:sro.accounts.GetUserResponse.current_character_id)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = current_character_id_;
  current_character_id_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* GetUserResponse::_internal_mutable_current_character_id() {
  
  if (current_character_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    current_character_id_ = p;
  }
  return current_character_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* GetUserResponse::mutable_current_character_id() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_current_character_id();
  // @@protoc_insertion_point(field_mutable:sro.accounts.GetUserResponse.current_character_id)
  return _msg;
}
inline void GetUserResponse::set_allocated_current_character_id(::PROTOBUF_NAMESPACE_ID::UInt64Value* current_character_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_character_id_);
  }
  if (current_character_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_character_id));
    if (message_arena != submessage_arena) {
      current_character_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_character_id, submessage_arena);
    }
    
  } else {
    
  }
  current_character_id_ = current_character_id;
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.GetUserResponse.current_character_id)
}

// -------------------------------------------------------------------

// GetAllUsersResponse

// repeated .sro.accounts.UserMessage users = 1;
inline int GetAllUsersResponse::_internal_users_size() const {
  return users_.size();
}
inline int GetAllUsersResponse::users_size() const {
  return _internal_users_size();
}
inline void GetAllUsersResponse::clear_users() {
  users_.Clear();
}
inline ::sro::accounts::UserMessage* GetAllUsersResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:sro.accounts.GetAllUsersResponse.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserMessage >*
GetAllUsersResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:sro.accounts.GetAllUsersResponse.users)
  return &users_;
}
inline const ::sro::accounts::UserMessage& GetAllUsersResponse::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::sro::accounts::UserMessage& GetAllUsersResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:sro.accounts.GetAllUsersResponse.users)
  return _internal_users(index);
}
inline ::sro::accounts::UserMessage* GetAllUsersResponse::_internal_add_users() {
  return users_.Add();
}
inline ::sro::accounts::UserMessage* GetAllUsersResponse::add_users() {
  ::sro::accounts::UserMessage* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:sro.accounts.GetAllUsersResponse.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::accounts::UserMessage >&
GetAllUsersResponse::users() const {
  // @@protoc_insertion_point(field_list:sro.accounts.GetAllUsersResponse.users)
  return users_;
}

// -------------------------------------------------------------------

// EditUserDetailsRequest

// uint64 user_id = 1;
inline void EditUserDetailsRequest::clear_user_id() {
  user_id_ = uint64_t{0u};
}
inline uint64_t EditUserDetailsRequest::_internal_user_id() const {
  return user_id_;
}
inline uint64_t EditUserDetailsRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sro.accounts.EditUserDetailsRequest.user_id)
  return _internal_user_id();
}
inline void EditUserDetailsRequest::_internal_set_user_id(uint64_t value) {
  
  user_id_ = value;
}
inline void EditUserDetailsRequest::set_user_id(uint64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:sro.accounts.EditUserDetailsRequest.user_id)
}

// .google.protobuf.StringValue email = 2;
inline bool EditUserDetailsRequest::_internal_has_email() const {
  return this != internal_default_instance() && email_ != nullptr;
}
inline bool EditUserDetailsRequest::has_email() const {
  return _internal_has_email();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& EditUserDetailsRequest::_internal_email() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = email_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& EditUserDetailsRequest::email() const {
  // @@protoc_insertion_point(field_get:sro.accounts.EditUserDetailsRequest.email)
  return _internal_email();
}
inline void EditUserDetailsRequest::unsafe_arena_set_allocated_email(
    ::PROTOBUF_NAMESPACE_ID::StringValue* email) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(email_);
  }
  email_ = email;
  if (email) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.accounts.EditUserDetailsRequest.email)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* EditUserDetailsRequest::release_email() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = email_;
  email_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* EditUserDetailsRequest::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_release:sro.accounts.EditUserDetailsRequest.email)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = email_;
  email_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* EditUserDetailsRequest::_internal_mutable_email() {
  
  if (email_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    email_ = p;
  }
  return email_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* EditUserDetailsRequest::mutable_email() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:sro.accounts.EditUserDetailsRequest.email)
  return _msg;
}
inline void EditUserDetailsRequest::set_allocated_email(::PROTOBUF_NAMESPACE_ID::StringValue* email) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(email_);
  }
  if (email) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(email));
    if (message_arena != submessage_arena) {
      email = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, email, submessage_arena);
    }
    
  } else {
    
  }
  email_ = email;
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.EditUserDetailsRequest.email)
}

// .google.protobuf.StringValue username = 4;
inline bool EditUserDetailsRequest::_internal_has_username() const {
  return this != internal_default_instance() && username_ != nullptr;
}
inline bool EditUserDetailsRequest::has_username() const {
  return _internal_has_username();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& EditUserDetailsRequest::_internal_username() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = username_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& EditUserDetailsRequest::username() const {
  // @@protoc_insertion_point(field_get:sro.accounts.EditUserDetailsRequest.username)
  return _internal_username();
}
inline void EditUserDetailsRequest::unsafe_arena_set_allocated_username(
    ::PROTOBUF_NAMESPACE_ID::StringValue* username) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(username_);
  }
  username_ = username;
  if (username) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.accounts.EditUserDetailsRequest.username)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* EditUserDetailsRequest::release_username() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = username_;
  username_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* EditUserDetailsRequest::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_release:sro.accounts.EditUserDetailsRequest.username)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = username_;
  username_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* EditUserDetailsRequest::_internal_mutable_username() {
  
  if (username_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    username_ = p;
  }
  return username_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* EditUserDetailsRequest::mutable_username() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:sro.accounts.EditUserDetailsRequest.username)
  return _msg;
}
inline void EditUserDetailsRequest::set_allocated_username(::PROTOBUF_NAMESPACE_ID::StringValue* username) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(username_);
  }
  if (username) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(username));
    if (message_arena != submessage_arena) {
      username = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, username, submessage_arena);
    }
    
  } else {
    
  }
  username_ = username;
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.EditUserDetailsRequest.username)
}

// .google.protobuf.StringValue first_name = 5;
inline bool EditUserDetailsRequest::_internal_has_first_name() const {
  return this != internal_default_instance() && first_name_ != nullptr;
}
inline bool EditUserDetailsRequest::has_first_name() const {
  return _internal_has_first_name();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& EditUserDetailsRequest::_internal_first_name() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = first_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& EditUserDetailsRequest::first_name() const {
  // @@protoc_insertion_point(field_get:sro.accounts.EditUserDetailsRequest.first_name)
  return _internal_first_name();
}
inline void EditUserDetailsRequest::unsafe_arena_set_allocated_first_name(
    ::PROTOBUF_NAMESPACE_ID::StringValue* first_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_name_);
  }
  first_name_ = first_name;
  if (first_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.accounts.EditUserDetailsRequest.first_name)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* EditUserDetailsRequest::release_first_name() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = first_name_;
  first_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* EditUserDetailsRequest::unsafe_arena_release_first_name() {
  // @@protoc_insertion_point(field_release:sro.accounts.EditUserDetailsRequest.first_name)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = first_name_;
  first_name_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* EditUserDetailsRequest::_internal_mutable_first_name() {
  
  if (first_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    first_name_ = p;
  }
  return first_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* EditUserDetailsRequest::mutable_first_name() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:sro.accounts.EditUserDetailsRequest.first_name)
  return _msg;
}
inline void EditUserDetailsRequest::set_allocated_first_name(::PROTOBUF_NAMESPACE_ID::StringValue* first_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_name_);
  }
  if (first_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_name));
    if (message_arena != submessage_arena) {
      first_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first_name, submessage_arena);
    }
    
  } else {
    
  }
  first_name_ = first_name;
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.EditUserDetailsRequest.first_name)
}

// .google.protobuf.StringValue last_name = 6;
inline bool EditUserDetailsRequest::_internal_has_last_name() const {
  return this != internal_default_instance() && last_name_ != nullptr;
}
inline bool EditUserDetailsRequest::has_last_name() const {
  return _internal_has_last_name();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& EditUserDetailsRequest::_internal_last_name() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = last_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& EditUserDetailsRequest::last_name() const {
  // @@protoc_insertion_point(field_get:sro.accounts.EditUserDetailsRequest.last_name)
  return _internal_last_name();
}
inline void EditUserDetailsRequest::unsafe_arena_set_allocated_last_name(
    ::PROTOBUF_NAMESPACE_ID::StringValue* last_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_name_);
  }
  last_name_ = last_name;
  if (last_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.accounts.EditUserDetailsRequest.last_name)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* EditUserDetailsRequest::release_last_name() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = last_name_;
  last_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* EditUserDetailsRequest::unsafe_arena_release_last_name() {
  // @@protoc_insertion_point(field_release:sro.accounts.EditUserDetailsRequest.last_name)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = last_name_;
  last_name_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* EditUserDetailsRequest::_internal_mutable_last_name() {
  
  if (last_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    last_name_ = p;
  }
  return last_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* EditUserDetailsRequest::mutable_last_name() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:sro.accounts.EditUserDetailsRequest.last_name)
  return _msg;
}
inline void EditUserDetailsRequest::set_allocated_last_name(::PROTOBUF_NAMESPACE_ID::StringValue* last_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_name_);
  }
  if (last_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_name));
    if (message_arena != submessage_arena) {
      last_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_name, submessage_arena);
    }
    
  } else {
    
  }
  last_name_ = last_name;
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.EditUserDetailsRequest.last_name)
}

// -------------------------------------------------------------------

// ChangePasswordRequest

// uint64 user_id = 1;
inline void ChangePasswordRequest::clear_user_id() {
  user_id_ = uint64_t{0u};
}
inline uint64_t ChangePasswordRequest::_internal_user_id() const {
  return user_id_;
}
inline uint64_t ChangePasswordRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sro.accounts.ChangePasswordRequest.user_id)
  return _internal_user_id();
}
inline void ChangePasswordRequest::_internal_set_user_id(uint64_t value) {
  
  user_id_ = value;
}
inline void ChangePasswordRequest::set_user_id(uint64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:sro.accounts.ChangePasswordRequest.user_id)
}

// string current_password = 2;
inline void ChangePasswordRequest::clear_current_password() {
  current_password_.ClearToEmpty();
}
inline const std::string& ChangePasswordRequest::current_password() const {
  // @@protoc_insertion_point(field_get:sro.accounts.ChangePasswordRequest.current_password)
  return _internal_current_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangePasswordRequest::set_current_password(ArgT0&& arg0, ArgT... args) {
 
 current_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.accounts.ChangePasswordRequest.current_password)
}
inline std::string* ChangePasswordRequest::mutable_current_password() {
  std::string* _s = _internal_mutable_current_password();
  // @@protoc_insertion_point(field_mutable:sro.accounts.ChangePasswordRequest.current_password)
  return _s;
}
inline const std::string& ChangePasswordRequest::_internal_current_password() const {
  return current_password_.Get();
}
inline void ChangePasswordRequest::_internal_set_current_password(const std::string& value) {
  
  current_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChangePasswordRequest::_internal_mutable_current_password() {
  
  return current_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChangePasswordRequest::release_current_password() {
  // @@protoc_insertion_point(field_release:sro.accounts.ChangePasswordRequest.current_password)
  return current_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChangePasswordRequest::set_allocated_current_password(std::string* current_password) {
  if (current_password != nullptr) {
    
  } else {
    
  }
  current_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (current_password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    current_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.ChangePasswordRequest.current_password)
}

// string new_password = 3;
inline void ChangePasswordRequest::clear_new_password() {
  new_password_.ClearToEmpty();
}
inline const std::string& ChangePasswordRequest::new_password() const {
  // @@protoc_insertion_point(field_get:sro.accounts.ChangePasswordRequest.new_password)
  return _internal_new_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangePasswordRequest::set_new_password(ArgT0&& arg0, ArgT... args) {
 
 new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.accounts.ChangePasswordRequest.new_password)
}
inline std::string* ChangePasswordRequest::mutable_new_password() {
  std::string* _s = _internal_mutable_new_password();
  // @@protoc_insertion_point(field_mutable:sro.accounts.ChangePasswordRequest.new_password)
  return _s;
}
inline const std::string& ChangePasswordRequest::_internal_new_password() const {
  return new_password_.Get();
}
inline void ChangePasswordRequest::_internal_set_new_password(const std::string& value) {
  
  new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChangePasswordRequest::_internal_mutable_new_password() {
  
  return new_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChangePasswordRequest::release_new_password() {
  // @@protoc_insertion_point(field_release:sro.accounts.ChangePasswordRequest.new_password)
  return new_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChangePasswordRequest::set_allocated_new_password(std::string* new_password) {
  if (new_password != nullptr) {
    
  } else {
    
  }
  new_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (new_password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    new_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.ChangePasswordRequest.new_password)
}

// -------------------------------------------------------------------

// StatusResponse

// .google.protobuf.UInt64Value character_id = 1;
inline bool StatusResponse::_internal_has_character_id() const {
  return this != internal_default_instance() && character_id_ != nullptr;
}
inline bool StatusResponse::has_character_id() const {
  return _internal_has_character_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& StatusResponse::_internal_character_id() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = character_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& StatusResponse::character_id() const {
  // @@protoc_insertion_point(field_get:sro.accounts.StatusResponse.character_id)
  return _internal_character_id();
}
inline void StatusResponse::unsafe_arena_set_allocated_character_id(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* character_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_id_);
  }
  character_id_ = character_id;
  if (character_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.accounts.StatusResponse.character_id)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* StatusResponse::release_character_id() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = character_id_;
  character_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* StatusResponse::unsafe_arena_release_character_id() {
  // @@protoc_insertion_point(field_release:sro.accounts.StatusResponse.character_id)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = character_id_;
  character_id_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* StatusResponse::_internal_mutable_character_id() {
  
  if (character_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    character_id_ = p;
  }
  return character_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* StatusResponse::mutable_character_id() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_character_id();
  // @@protoc_insertion_point(field_mutable:sro.accounts.StatusResponse.character_id)
  return _msg;
}
inline void StatusResponse::set_allocated_character_id(::PROTOBUF_NAMESPACE_ID::UInt64Value* character_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_id_);
  }
  if (character_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_id));
    if (message_arena != submessage_arena) {
      character_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_id, submessage_arena);
    }
    
  } else {
    
  }
  character_id_ = character_id;
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.StatusResponse.character_id)
}

// -------------------------------------------------------------------

// StatusRequest

// uint64 user_id = 1;
inline void StatusRequest::clear_user_id() {
  user_id_ = uint64_t{0u};
}
inline uint64_t StatusRequest::_internal_user_id() const {
  return user_id_;
}
inline uint64_t StatusRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sro.accounts.StatusRequest.user_id)
  return _internal_user_id();
}
inline void StatusRequest::_internal_set_user_id(uint64_t value) {
  
  user_id_ = value;
}
inline void StatusRequest::set_user_id(uint64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:sro.accounts.StatusRequest.user_id)
}

// .google.protobuf.UInt64Value character_id = 2;
inline bool StatusRequest::_internal_has_character_id() const {
  return this != internal_default_instance() && character_id_ != nullptr;
}
inline bool StatusRequest::has_character_id() const {
  return _internal_has_character_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& StatusRequest::_internal_character_id() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = character_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& StatusRequest::character_id() const {
  // @@protoc_insertion_point(field_get:sro.accounts.StatusRequest.character_id)
  return _internal_character_id();
}
inline void StatusRequest::unsafe_arena_set_allocated_character_id(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* character_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_id_);
  }
  character_id_ = character_id;
  if (character_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.accounts.StatusRequest.character_id)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* StatusRequest::release_character_id() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = character_id_;
  character_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* StatusRequest::unsafe_arena_release_character_id() {
  // @@protoc_insertion_point(field_release:sro.accounts.StatusRequest.character_id)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = character_id_;
  character_id_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* StatusRequest::_internal_mutable_character_id() {
  
  if (character_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    character_id_ = p;
  }
  return character_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* StatusRequest::mutable_character_id() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_character_id();
  // @@protoc_insertion_point(field_mutable:sro.accounts.StatusRequest.character_id)
  return _msg;
}
inline void StatusRequest::set_allocated_character_id(::PROTOBUF_NAMESPACE_ID::UInt64Value* character_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_id_);
  }
  if (character_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_id));
    if (message_arena != submessage_arena) {
      character_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_id, submessage_arena);
    }
    
  } else {
    
  }
  character_id_ = character_id;
  // @@protoc_insertion_point(field_set_allocated:sro.accounts.StatusRequest.character_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace accounts
}  // namespace sro

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_2eproto
