// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: authorization.proto

#include "authorization.pb.h"
#include "authorization.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sro {
namespace accounts {

static const char* AuthorizationService_method_names[] = {
  "/sro.accounts.AuthorizationService/GetAuthorization",
  "/sro.accounts.AuthorizationService/AddAuthorization",
  "/sro.accounts.AuthorizationService/RemoveAuthorization",
  "/sro.accounts.AuthorizationService/GetRoles",
  "/sro.accounts.AuthorizationService/GetRole",
  "/sro.accounts.AuthorizationService/CreateRole",
  "/sro.accounts.AuthorizationService/EditRole",
  "/sro.accounts.AuthorizationService/DeleteRole",
  "/sro.accounts.AuthorizationService/GetAllPermissions",
  "/sro.accounts.AuthorizationService/SubscribeUserUpdates",
  "/sro.accounts.AuthorizationService/SubscribeRoleUpdates",
};

std::unique_ptr< AuthorizationService::Stub> AuthorizationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AuthorizationService::Stub> stub(new AuthorizationService::Stub(channel, options));
  return stub;
}

AuthorizationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetAuthorization_(AuthorizationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddAuthorization_(AuthorizationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveAuthorization_(AuthorizationService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRoles_(AuthorizationService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRole_(AuthorizationService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateRole_(AuthorizationService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EditRole_(AuthorizationService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRole_(AuthorizationService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllPermissions_(AuthorizationService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeUserUpdates_(AuthorizationService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeRoleUpdates_(AuthorizationService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status AuthorizationService::Stub::GetAuthorization(::grpc::ClientContext* context, const ::sro::accounts::IDMessage& request, ::sro::accounts::AuthorizationMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::IDMessage, ::sro::accounts::AuthorizationMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAuthorization_, context, request, response);
}

void AuthorizationService::Stub::async::GetAuthorization(::grpc::ClientContext* context, const ::sro::accounts::IDMessage* request, ::sro::accounts::AuthorizationMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::IDMessage, ::sro::accounts::AuthorizationMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAuthorization_, context, request, response, std::move(f));
}

void AuthorizationService::Stub::async::GetAuthorization(::grpc::ClientContext* context, const ::sro::accounts::IDMessage* request, ::sro::accounts::AuthorizationMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAuthorization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::AuthorizationMessage>* AuthorizationService::Stub::PrepareAsyncGetAuthorizationRaw(::grpc::ClientContext* context, const ::sro::accounts::IDMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::accounts::AuthorizationMessage, ::sro::accounts::IDMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAuthorization_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::AuthorizationMessage>* AuthorizationService::Stub::AsyncGetAuthorizationRaw(::grpc::ClientContext* context, const ::sro::accounts::IDMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAuthorizationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthorizationService::Stub::AddAuthorization(::grpc::ClientContext* context, const ::sro::accounts::AuthorizationMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::AuthorizationMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddAuthorization_, context, request, response);
}

void AuthorizationService::Stub::async::AddAuthorization(::grpc::ClientContext* context, const ::sro::accounts::AuthorizationMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::AuthorizationMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddAuthorization_, context, request, response, std::move(f));
}

void AuthorizationService::Stub::async::AddAuthorization(::grpc::ClientContext* context, const ::sro::accounts::AuthorizationMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddAuthorization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthorizationService::Stub::PrepareAsyncAddAuthorizationRaw(::grpc::ClientContext* context, const ::sro::accounts::AuthorizationMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::accounts::AuthorizationMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddAuthorization_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthorizationService::Stub::AsyncAddAuthorizationRaw(::grpc::ClientContext* context, const ::sro::accounts::AuthorizationMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddAuthorizationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthorizationService::Stub::RemoveAuthorization(::grpc::ClientContext* context, const ::sro::accounts::AuthorizationMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::AuthorizationMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveAuthorization_, context, request, response);
}

void AuthorizationService::Stub::async::RemoveAuthorization(::grpc::ClientContext* context, const ::sro::accounts::AuthorizationMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::AuthorizationMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveAuthorization_, context, request, response, std::move(f));
}

void AuthorizationService::Stub::async::RemoveAuthorization(::grpc::ClientContext* context, const ::sro::accounts::AuthorizationMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveAuthorization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthorizationService::Stub::PrepareAsyncRemoveAuthorizationRaw(::grpc::ClientContext* context, const ::sro::accounts::AuthorizationMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::accounts::AuthorizationMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveAuthorization_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthorizationService::Stub::AsyncRemoveAuthorizationRaw(::grpc::ClientContext* context, const ::sro::accounts::AuthorizationMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveAuthorizationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthorizationService::Stub::GetRoles(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::accounts::UserRoles* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sro::accounts::UserRoles, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRoles_, context, request, response);
}

void AuthorizationService::Stub::async::GetRoles(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::accounts::UserRoles* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sro::accounts::UserRoles, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoles_, context, request, response, std::move(f));
}

void AuthorizationService::Stub::async::GetRoles(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::accounts::UserRoles* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::UserRoles>* AuthorizationService::Stub::PrepareAsyncGetRolesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::accounts::UserRoles, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRoles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::UserRoles>* AuthorizationService::Stub::AsyncGetRolesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRolesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthorizationService::Stub::GetRole(::grpc::ClientContext* context, const ::sro::accounts::IDMessage& request, ::sro::accounts::UserRole* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::IDMessage, ::sro::accounts::UserRole, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRole_, context, request, response);
}

void AuthorizationService::Stub::async::GetRole(::grpc::ClientContext* context, const ::sro::accounts::IDMessage* request, ::sro::accounts::UserRole* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::IDMessage, ::sro::accounts::UserRole, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRole_, context, request, response, std::move(f));
}

void AuthorizationService::Stub::async::GetRole(::grpc::ClientContext* context, const ::sro::accounts::IDMessage* request, ::sro::accounts::UserRole* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::UserRole>* AuthorizationService::Stub::PrepareAsyncGetRoleRaw(::grpc::ClientContext* context, const ::sro::accounts::IDMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::accounts::UserRole, ::sro::accounts::IDMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::UserRole>* AuthorizationService::Stub::AsyncGetRoleRaw(::grpc::ClientContext* context, const ::sro::accounts::IDMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthorizationService::Stub::CreateRole(::grpc::ClientContext* context, const ::sro::accounts::UserRole& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::UserRole, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateRole_, context, request, response);
}

void AuthorizationService::Stub::async::CreateRole(::grpc::ClientContext* context, const ::sro::accounts::UserRole* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::UserRole, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRole_, context, request, response, std::move(f));
}

void AuthorizationService::Stub::async::CreateRole(::grpc::ClientContext* context, const ::sro::accounts::UserRole* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthorizationService::Stub::PrepareAsyncCreateRoleRaw(::grpc::ClientContext* context, const ::sro::accounts::UserRole& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::accounts::UserRole, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthorizationService::Stub::AsyncCreateRoleRaw(::grpc::ClientContext* context, const ::sro::accounts::UserRole& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthorizationService::Stub::EditRole(::grpc::ClientContext* context, const ::sro::accounts::UserRole& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::UserRole, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EditRole_, context, request, response);
}

void AuthorizationService::Stub::async::EditRole(::grpc::ClientContext* context, const ::sro::accounts::UserRole* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::UserRole, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditRole_, context, request, response, std::move(f));
}

void AuthorizationService::Stub::async::EditRole(::grpc::ClientContext* context, const ::sro::accounts::UserRole* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthorizationService::Stub::PrepareAsyncEditRoleRaw(::grpc::ClientContext* context, const ::sro::accounts::UserRole& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::accounts::UserRole, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EditRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthorizationService::Stub::AsyncEditRoleRaw(::grpc::ClientContext* context, const ::sro::accounts::UserRole& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEditRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthorizationService::Stub::DeleteRole(::grpc::ClientContext* context, const ::sro::accounts::UserRole& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::UserRole, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRole_, context, request, response);
}

void AuthorizationService::Stub::async::DeleteRole(::grpc::ClientContext* context, const ::sro::accounts::UserRole* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::UserRole, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRole_, context, request, response, std::move(f));
}

void AuthorizationService::Stub::async::DeleteRole(::grpc::ClientContext* context, const ::sro::accounts::UserRole* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthorizationService::Stub::PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::sro::accounts::UserRole& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::accounts::UserRole, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AuthorizationService::Stub::AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::sro::accounts::UserRole& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthorizationService::Stub::GetAllPermissions(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::accounts::UserPermissions* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sro::accounts::UserPermissions, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllPermissions_, context, request, response);
}

void AuthorizationService::Stub::async::GetAllPermissions(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::accounts::UserPermissions* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sro::accounts::UserPermissions, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllPermissions_, context, request, response, std::move(f));
}

void AuthorizationService::Stub::async::GetAllPermissions(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::accounts::UserPermissions* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllPermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::UserPermissions>* AuthorizationService::Stub::PrepareAsyncGetAllPermissionsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::accounts::UserPermissions, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllPermissions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::UserPermissions>* AuthorizationService::Stub::AsyncGetAllPermissionsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllPermissionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::sro::accounts::IDMessage>* AuthorizationService::Stub::SubscribeUserUpdatesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sro::accounts::IDMessage>::Create(channel_.get(), rpcmethod_SubscribeUserUpdates_, context, request);
}

void AuthorizationService::Stub::async::SubscribeUserUpdates(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::sro::accounts::IDMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sro::accounts::IDMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeUserUpdates_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sro::accounts::IDMessage>* AuthorizationService::Stub::AsyncSubscribeUserUpdatesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sro::accounts::IDMessage>::Create(channel_.get(), cq, rpcmethod_SubscribeUserUpdates_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sro::accounts::IDMessage>* AuthorizationService::Stub::PrepareAsyncSubscribeUserUpdatesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sro::accounts::IDMessage>::Create(channel_.get(), cq, rpcmethod_SubscribeUserUpdates_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sro::accounts::IDMessage>* AuthorizationService::Stub::SubscribeRoleUpdatesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sro::accounts::IDMessage>::Create(channel_.get(), rpcmethod_SubscribeRoleUpdates_, context, request);
}

void AuthorizationService::Stub::async::SubscribeRoleUpdates(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::sro::accounts::IDMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sro::accounts::IDMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeRoleUpdates_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sro::accounts::IDMessage>* AuthorizationService::Stub::AsyncSubscribeRoleUpdatesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sro::accounts::IDMessage>::Create(channel_.get(), cq, rpcmethod_SubscribeRoleUpdates_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sro::accounts::IDMessage>* AuthorizationService::Stub::PrepareAsyncSubscribeRoleUpdatesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sro::accounts::IDMessage>::Create(channel_.get(), cq, rpcmethod_SubscribeRoleUpdates_, context, request, false, nullptr);
}

AuthorizationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthorizationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthorizationService::Service, ::sro::accounts::IDMessage, ::sro::accounts::AuthorizationMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthorizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::IDMessage* req,
             ::sro::accounts::AuthorizationMessage* resp) {
               return service->GetAuthorization(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthorizationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthorizationService::Service, ::sro::accounts::AuthorizationMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthorizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::AuthorizationMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->AddAuthorization(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthorizationService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthorizationService::Service, ::sro::accounts::AuthorizationMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthorizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::AuthorizationMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->RemoveAuthorization(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthorizationService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthorizationService::Service, ::google::protobuf::Empty, ::sro::accounts::UserRoles, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthorizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sro::accounts::UserRoles* resp) {
               return service->GetRoles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthorizationService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthorizationService::Service, ::sro::accounts::IDMessage, ::sro::accounts::UserRole, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthorizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::IDMessage* req,
             ::sro::accounts::UserRole* resp) {
               return service->GetRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthorizationService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthorizationService::Service, ::sro::accounts::UserRole, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthorizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::UserRole* req,
             ::google::protobuf::Empty* resp) {
               return service->CreateRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthorizationService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthorizationService::Service, ::sro::accounts::UserRole, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthorizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::UserRole* req,
             ::google::protobuf::Empty* resp) {
               return service->EditRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthorizationService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthorizationService::Service, ::sro::accounts::UserRole, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthorizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::UserRole* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthorizationService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthorizationService::Service, ::google::protobuf::Empty, ::sro::accounts::UserPermissions, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthorizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sro::accounts::UserPermissions* resp) {
               return service->GetAllPermissions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthorizationService_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< AuthorizationService::Service, ::google::protobuf::Empty, ::sro::accounts::IDMessage>(
          [](AuthorizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sro::accounts::IDMessage>* writer) {
               return service->SubscribeUserUpdates(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthorizationService_method_names[10],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< AuthorizationService::Service, ::google::protobuf::Empty, ::sro::accounts::IDMessage>(
          [](AuthorizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sro::accounts::IDMessage>* writer) {
               return service->SubscribeRoleUpdates(ctx, req, writer);
             }, this)));
}

AuthorizationService::Service::~Service() {
}

::grpc::Status AuthorizationService::Service::GetAuthorization(::grpc::ServerContext* context, const ::sro::accounts::IDMessage* request, ::sro::accounts::AuthorizationMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthorizationService::Service::AddAuthorization(::grpc::ServerContext* context, const ::sro::accounts::AuthorizationMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthorizationService::Service::RemoveAuthorization(::grpc::ServerContext* context, const ::sro::accounts::AuthorizationMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthorizationService::Service::GetRoles(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::accounts::UserRoles* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthorizationService::Service::GetRole(::grpc::ServerContext* context, const ::sro::accounts::IDMessage* request, ::sro::accounts::UserRole* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthorizationService::Service::CreateRole(::grpc::ServerContext* context, const ::sro::accounts::UserRole* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthorizationService::Service::EditRole(::grpc::ServerContext* context, const ::sro::accounts::UserRole* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthorizationService::Service::DeleteRole(::grpc::ServerContext* context, const ::sro::accounts::UserRole* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthorizationService::Service::GetAllPermissions(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::accounts::UserPermissions* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthorizationService::Service::SubscribeUserUpdates(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sro::accounts::IDMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthorizationService::Service::SubscribeRoleUpdates(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sro::accounts::IDMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sro
}  // namespace accounts

