#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto;
namespace sro {
namespace chat {
class ChannelIdMessage;
struct ChannelIdMessageDefaultTypeInternal;
extern ChannelIdMessageDefaultTypeInternal _ChannelIdMessage_default_instance_;
class CharacterName;
struct CharacterNameDefaultTypeInternal;
extern CharacterNameDefaultTypeInternal _CharacterName_default_instance_;
class ChatChannel;
struct ChatChannelDefaultTypeInternal;
extern ChatChannelDefaultTypeInternal _ChatChannel_default_instance_;
class ChatChannels;
struct ChatChannelsDefaultTypeInternal;
extern ChatChannelsDefaultTypeInternal _ChatChannels_default_instance_;
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class CreateChannelMessage;
struct CreateChannelMessageDefaultTypeInternal;
extern CreateChannelMessageDefaultTypeInternal _CreateChannelMessage_default_instance_;
class RequestAuthorizedChatChannels;
struct RequestAuthorizedChatChannelsDefaultTypeInternal;
extern RequestAuthorizedChatChannelsDefaultTypeInternal _RequestAuthorizedChatChannels_default_instance_;
class RequestChatChannelAuthChange;
struct RequestChatChannelAuthChangeDefaultTypeInternal;
extern RequestChatChannelAuthChangeDefaultTypeInternal _RequestChatChannelAuthChange_default_instance_;
class SendChatMessageRequest;
struct SendChatMessageRequestDefaultTypeInternal;
extern SendChatMessageRequestDefaultTypeInternal _SendChatMessageRequest_default_instance_;
class SendDirectMessageRequest;
struct SendDirectMessageRequestDefaultTypeInternal;
extern SendDirectMessageRequestDefaultTypeInternal _SendDirectMessageRequest_default_instance_;
class UpdateChatChannelRequest;
struct UpdateChatChannelRequestDefaultTypeInternal;
extern UpdateChatChannelRequestDefaultTypeInternal _UpdateChatChannelRequest_default_instance_;
}  // namespace chat
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template<> ::sro::chat::ChannelIdMessage* Arena::CreateMaybeMessage<::sro::chat::ChannelIdMessage>(Arena*);
template<> ::sro::chat::CharacterName* Arena::CreateMaybeMessage<::sro::chat::CharacterName>(Arena*);
template<> ::sro::chat::ChatChannel* Arena::CreateMaybeMessage<::sro::chat::ChatChannel>(Arena*);
template<> ::sro::chat::ChatChannels* Arena::CreateMaybeMessage<::sro::chat::ChatChannels>(Arena*);
template<> ::sro::chat::ChatMessage* Arena::CreateMaybeMessage<::sro::chat::ChatMessage>(Arena*);
template<> ::sro::chat::CreateChannelMessage* Arena::CreateMaybeMessage<::sro::chat::CreateChannelMessage>(Arena*);
template<> ::sro::chat::RequestAuthorizedChatChannels* Arena::CreateMaybeMessage<::sro::chat::RequestAuthorizedChatChannels>(Arena*);
template<> ::sro::chat::RequestChatChannelAuthChange* Arena::CreateMaybeMessage<::sro::chat::RequestChatChannelAuthChange>(Arena*);
template<> ::sro::chat::SendChatMessageRequest* Arena::CreateMaybeMessage<::sro::chat::SendChatMessageRequest>(Arena*);
template<> ::sro::chat::SendDirectMessageRequest* Arena::CreateMaybeMessage<::sro::chat::SendDirectMessageRequest>(Arena*);
template<> ::sro::chat::UpdateChatChannelRequest* Arena::CreateMaybeMessage<::sro::chat::UpdateChatChannelRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sro {
namespace chat {

// ===================================================================

class RequestChatChannelAuthChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.chat.RequestChatChannelAuthChange) */ {
 public:
  inline RequestChatChannelAuthChange() : RequestChatChannelAuthChange(nullptr) {}
  ~RequestChatChannelAuthChange() override;
  explicit constexpr RequestChatChannelAuthChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestChatChannelAuthChange(const RequestChatChannelAuthChange& from);
  RequestChatChannelAuthChange(RequestChatChannelAuthChange&& from) noexcept
    : RequestChatChannelAuthChange() {
    *this = ::std::move(from);
  }

  inline RequestChatChannelAuthChange& operator=(const RequestChatChannelAuthChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestChatChannelAuthChange& operator=(RequestChatChannelAuthChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestChatChannelAuthChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestChatChannelAuthChange* internal_default_instance() {
    return reinterpret_cast<const RequestChatChannelAuthChange*>(
               &_RequestChatChannelAuthChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestChatChannelAuthChange& a, RequestChatChannelAuthChange& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestChatChannelAuthChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestChatChannelAuthChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestChatChannelAuthChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestChatChannelAuthChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestChatChannelAuthChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestChatChannelAuthChange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestChatChannelAuthChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.chat.RequestChatChannelAuthChange";
  }
  protected:
  explicit RequestChatChannelAuthChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kCharacterIdFieldNumber = 1,
  };
  // repeated uint64 ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  uint64_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_ids() const;
  void _internal_add_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_ids();
  public:
  uint64_t ids(int index) const;
  void set_ids(int index, uint64_t value);
  void add_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_ids();

  // uint64 character_id = 1;
  void clear_character_id();
  uint64_t character_id() const;
  void set_character_id(uint64_t value);
  private:
  uint64_t _internal_character_id() const;
  void _internal_set_character_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.chat.RequestChatChannelAuthChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  uint64_t character_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class RequestAuthorizedChatChannels final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.chat.RequestAuthorizedChatChannels) */ {
 public:
  inline RequestAuthorizedChatChannels() : RequestAuthorizedChatChannels(nullptr) {}
  ~RequestAuthorizedChatChannels() override;
  explicit constexpr RequestAuthorizedChatChannels(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestAuthorizedChatChannels(const RequestAuthorizedChatChannels& from);
  RequestAuthorizedChatChannels(RequestAuthorizedChatChannels&& from) noexcept
    : RequestAuthorizedChatChannels() {
    *this = ::std::move(from);
  }

  inline RequestAuthorizedChatChannels& operator=(const RequestAuthorizedChatChannels& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestAuthorizedChatChannels& operator=(RequestAuthorizedChatChannels&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestAuthorizedChatChannels& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestAuthorizedChatChannels* internal_default_instance() {
    return reinterpret_cast<const RequestAuthorizedChatChannels*>(
               &_RequestAuthorizedChatChannels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestAuthorizedChatChannels& a, RequestAuthorizedChatChannels& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestAuthorizedChatChannels* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestAuthorizedChatChannels* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestAuthorizedChatChannels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestAuthorizedChatChannels>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestAuthorizedChatChannels& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestAuthorizedChatChannels& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestAuthorizedChatChannels* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.chat.RequestAuthorizedChatChannels";
  }
  protected:
  explicit RequestAuthorizedChatChannels(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
  };
  // uint64 character_id = 1;
  void clear_character_id();
  uint64_t character_id() const;
  void set_character_id(uint64_t value);
  private:
  uint64_t _internal_character_id() const;
  void _internal_set_character_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.chat.RequestAuthorizedChatChannels)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t character_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.chat.ChatChannel) */ {
 public:
  inline ChatChannel() : ChatChannel(nullptr) {}
  ~ChatChannel() override;
  explicit constexpr ChatChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatChannel(const ChatChannel& from);
  ChatChannel(ChatChannel&& from) noexcept
    : ChatChannel() {
    *this = ::std::move(from);
  }

  inline ChatChannel& operator=(const ChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatChannel& operator=(ChatChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatChannel* internal_default_instance() {
    return reinterpret_cast<const ChatChannel*>(
               &_ChatChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChatChannel& a, ChatChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatChannel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatChannel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatChannel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.chat.ChatChannel";
  }
  protected:
  explicit ChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kPublicFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // bool public = 3;
  void clear_public_();
  bool public_() const;
  void set_public_(bool value);
  private:
  bool _internal_public_() const;
  void _internal_set_public_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sro.chat.ChatChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t id_;
  bool public__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatChannels final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.chat.ChatChannels) */ {
 public:
  inline ChatChannels() : ChatChannels(nullptr) {}
  ~ChatChannels() override;
  explicit constexpr ChatChannels(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatChannels(const ChatChannels& from);
  ChatChannels(ChatChannels&& from) noexcept
    : ChatChannels() {
    *this = ::std::move(from);
  }

  inline ChatChannels& operator=(const ChatChannels& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatChannels& operator=(ChatChannels&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatChannels& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatChannels* internal_default_instance() {
    return reinterpret_cast<const ChatChannels*>(
               &_ChatChannels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChatChannels& a, ChatChannels& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatChannels* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatChannels* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatChannels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatChannels>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatChannels& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatChannels& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatChannels* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.chat.ChatChannels";
  }
  protected:
  explicit ChatChannels(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
  };
  // repeated .sro.chat.ChatChannel channels = 1;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::sro::chat::ChatChannel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::chat::ChatChannel >*
      mutable_channels();
  private:
  const ::sro::chat::ChatChannel& _internal_channels(int index) const;
  ::sro::chat::ChatChannel* _internal_add_channels();
  public:
  const ::sro::chat::ChatChannel& channels(int index) const;
  ::sro::chat::ChatChannel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::chat::ChatChannel >&
      channels() const;

  // @@protoc_insertion_point(class_scope:sro.chat.ChatChannels)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::chat::ChatChannel > channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class CreateChannelMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.chat.CreateChannelMessage) */ {
 public:
  inline CreateChannelMessage() : CreateChannelMessage(nullptr) {}
  ~CreateChannelMessage() override;
  explicit constexpr CreateChannelMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateChannelMessage(const CreateChannelMessage& from);
  CreateChannelMessage(CreateChannelMessage&& from) noexcept
    : CreateChannelMessage() {
    *this = ::std::move(from);
  }

  inline CreateChannelMessage& operator=(const CreateChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChannelMessage& operator=(CreateChannelMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChannelMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChannelMessage* internal_default_instance() {
    return reinterpret_cast<const CreateChannelMessage*>(
               &_CreateChannelMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateChannelMessage& a, CreateChannelMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChannelMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChannelMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateChannelMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateChannelMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateChannelMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateChannelMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChannelMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.chat.CreateChannelMessage";
  }
  protected:
  explicit CreateChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPublicFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool public = 2;
  void clear_public_();
  bool public_() const;
  void set_public_(bool value);
  private:
  bool _internal_public_() const;
  void _internal_set_public_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sro.chat.CreateChannelMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool public__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChannelIdMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.chat.ChannelIdMessage) */ {
 public:
  inline ChannelIdMessage() : ChannelIdMessage(nullptr) {}
  ~ChannelIdMessage() override;
  explicit constexpr ChannelIdMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelIdMessage(const ChannelIdMessage& from);
  ChannelIdMessage(ChannelIdMessage&& from) noexcept
    : ChannelIdMessage() {
    *this = ::std::move(from);
  }

  inline ChannelIdMessage& operator=(const ChannelIdMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelIdMessage& operator=(ChannelIdMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelIdMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelIdMessage* internal_default_instance() {
    return reinterpret_cast<const ChannelIdMessage*>(
               &_ChannelIdMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChannelIdMessage& a, ChannelIdMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelIdMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelIdMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelIdMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelIdMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelIdMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelIdMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelIdMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.chat.ChannelIdMessage";
  }
  protected:
  explicit ChannelIdMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // uint64 channel_id = 1;
  void clear_channel_id();
  uint64_t channel_id() const;
  void set_channel_id(uint64_t value);
  private:
  uint64_t _internal_channel_id() const;
  void _internal_set_channel_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.chat.ChannelIdMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.chat.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() override;
  explicit constexpr ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.chat.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kCharacterNameFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string character_name = 2;
  void clear_character_name();
  const std::string& character_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character_name();
  PROTOBUF_NODISCARD std::string* release_character_name();
  void set_allocated_character_name(std::string* character_name);
  private:
  const std::string& _internal_character_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_name(const std::string& value);
  std::string* _internal_mutable_character_name();
  public:

  // @@protoc_insertion_point(class_scope:sro.chat.ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class SendChatMessageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.chat.SendChatMessageRequest) */ {
 public:
  inline SendChatMessageRequest() : SendChatMessageRequest(nullptr) {}
  ~SendChatMessageRequest() override;
  explicit constexpr SendChatMessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendChatMessageRequest(const SendChatMessageRequest& from);
  SendChatMessageRequest(SendChatMessageRequest&& from) noexcept
    : SendChatMessageRequest() {
    *this = ::std::move(from);
  }

  inline SendChatMessageRequest& operator=(const SendChatMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendChatMessageRequest& operator=(SendChatMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendChatMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendChatMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SendChatMessageRequest*>(
               &_SendChatMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SendChatMessageRequest& a, SendChatMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendChatMessageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendChatMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendChatMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendChatMessageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendChatMessageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendChatMessageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendChatMessageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.chat.SendChatMessageRequest";
  }
  protected:
  explicit SendChatMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatMessageFieldNumber = 2,
    kChannelIdFieldNumber = 1,
  };
  // .sro.chat.ChatMessage chat_message = 2;
  bool has_chat_message() const;
  private:
  bool _internal_has_chat_message() const;
  public:
  void clear_chat_message();
  const ::sro::chat::ChatMessage& chat_message() const;
  PROTOBUF_NODISCARD ::sro::chat::ChatMessage* release_chat_message();
  ::sro::chat::ChatMessage* mutable_chat_message();
  void set_allocated_chat_message(::sro::chat::ChatMessage* chat_message);
  private:
  const ::sro::chat::ChatMessage& _internal_chat_message() const;
  ::sro::chat::ChatMessage* _internal_mutable_chat_message();
  public:
  void unsafe_arena_set_allocated_chat_message(
      ::sro::chat::ChatMessage* chat_message);
  ::sro::chat::ChatMessage* unsafe_arena_release_chat_message();

  // uint64 channel_id = 1;
  void clear_channel_id();
  uint64_t channel_id() const;
  void set_channel_id(uint64_t value);
  private:
  uint64_t _internal_channel_id() const;
  void _internal_set_channel_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.chat.SendChatMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sro::chat::ChatMessage* chat_message_;
  uint64_t channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class SendDirectMessageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.chat.SendDirectMessageRequest) */ {
 public:
  inline SendDirectMessageRequest() : SendDirectMessageRequest(nullptr) {}
  ~SendDirectMessageRequest() override;
  explicit constexpr SendDirectMessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendDirectMessageRequest(const SendDirectMessageRequest& from);
  SendDirectMessageRequest(SendDirectMessageRequest&& from) noexcept
    : SendDirectMessageRequest() {
    *this = ::std::move(from);
  }

  inline SendDirectMessageRequest& operator=(const SendDirectMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendDirectMessageRequest& operator=(SendDirectMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendDirectMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendDirectMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SendDirectMessageRequest*>(
               &_SendDirectMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SendDirectMessageRequest& a, SendDirectMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendDirectMessageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendDirectMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendDirectMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendDirectMessageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendDirectMessageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendDirectMessageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendDirectMessageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.chat.SendDirectMessageRequest";
  }
  protected:
  explicit SendDirectMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterNameFieldNumber = 1,
    kChatMessageFieldNumber = 2,
  };
  // string character_name = 1;
  void clear_character_name();
  const std::string& character_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character_name();
  PROTOBUF_NODISCARD std::string* release_character_name();
  void set_allocated_character_name(std::string* character_name);
  private:
  const std::string& _internal_character_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_name(const std::string& value);
  std::string* _internal_mutable_character_name();
  public:

  // .sro.chat.ChatMessage chat_message = 2;
  bool has_chat_message() const;
  private:
  bool _internal_has_chat_message() const;
  public:
  void clear_chat_message();
  const ::sro::chat::ChatMessage& chat_message() const;
  PROTOBUF_NODISCARD ::sro::chat::ChatMessage* release_chat_message();
  ::sro::chat::ChatMessage* mutable_chat_message();
  void set_allocated_chat_message(::sro::chat::ChatMessage* chat_message);
  private:
  const ::sro::chat::ChatMessage& _internal_chat_message() const;
  ::sro::chat::ChatMessage* _internal_mutable_chat_message();
  public:
  void unsafe_arena_set_allocated_chat_message(
      ::sro::chat::ChatMessage* chat_message);
  ::sro::chat::ChatMessage* unsafe_arena_release_chat_message();

  // @@protoc_insertion_point(class_scope:sro.chat.SendDirectMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_name_;
  ::sro::chat::ChatMessage* chat_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class UpdateChatChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.chat.UpdateChatChannelRequest) */ {
 public:
  inline UpdateChatChannelRequest() : UpdateChatChannelRequest(nullptr) {}
  ~UpdateChatChannelRequest() override;
  explicit constexpr UpdateChatChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateChatChannelRequest(const UpdateChatChannelRequest& from);
  UpdateChatChannelRequest(UpdateChatChannelRequest&& from) noexcept
    : UpdateChatChannelRequest() {
    *this = ::std::move(from);
  }

  inline UpdateChatChannelRequest& operator=(const UpdateChatChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateChatChannelRequest& operator=(UpdateChatChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateChatChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateChatChannelRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateChatChannelRequest*>(
               &_UpdateChatChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateChatChannelRequest& a, UpdateChatChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateChatChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateChatChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateChatChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateChatChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateChatChannelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateChatChannelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateChatChannelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.chat.UpdateChatChannelRequest";
  }
  protected:
  explicit UpdateChatChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPublicFieldNumber = 3,
    kChannelIdFieldNumber = 1,
  };
  // .google.protobuf.StringValue name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& name() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_name();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_name();
  void set_allocated_name(::PROTOBUF_NAMESPACE_ID::StringValue* name);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_name() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::PROTOBUF_NAMESPACE_ID::StringValue* name);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_name();

  // .google.protobuf.BoolValue public = 3;
  bool has_public_() const;
  private:
  bool _internal_has_public_() const;
  public:
  void clear_public_();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& public_() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_public_();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_public_();
  void set_allocated_public_(::PROTOBUF_NAMESPACE_ID::BoolValue* public_);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_public_() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_public_();
  public:
  void unsafe_arena_set_allocated_public_(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* public_);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_public_();

  // uint64 channel_id = 1;
  void clear_channel_id();
  uint64_t channel_id() const;
  void set_channel_id(uint64_t value);
  private:
  uint64_t _internal_channel_id() const;
  void _internal_set_channel_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.chat.UpdateChatChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* name_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* public__;
  uint64_t channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class CharacterName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.chat.CharacterName) */ {
 public:
  inline CharacterName() : CharacterName(nullptr) {}
  ~CharacterName() override;
  explicit constexpr CharacterName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterName(const CharacterName& from);
  CharacterName(CharacterName&& from) noexcept
    : CharacterName() {
    *this = ::std::move(from);
  }

  inline CharacterName& operator=(const CharacterName& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterName& operator=(CharacterName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterName& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterName* internal_default_instance() {
    return reinterpret_cast<const CharacterName*>(
               &_CharacterName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CharacterName& a, CharacterName& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CharacterName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.chat.CharacterName";
  }
  protected:
  explicit CharacterName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterNameFieldNumber = 1,
  };
  // string character_name = 1;
  void clear_character_name();
  const std::string& character_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character_name();
  PROTOBUF_NODISCARD std::string* release_character_name();
  void set_allocated_character_name(std::string* character_name);
  private:
  const std::string& _internal_character_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_name(const std::string& value);
  std::string* _internal_mutable_character_name();
  public:

  // @@protoc_insertion_point(class_scope:sro.chat.CharacterName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestChatChannelAuthChange

// uint64 character_id = 1;
inline void RequestChatChannelAuthChange::clear_character_id() {
  character_id_ = uint64_t{0u};
}
inline uint64_t RequestChatChannelAuthChange::_internal_character_id() const {
  return character_id_;
}
inline uint64_t RequestChatChannelAuthChange::character_id() const {
  // @@protoc_insertion_point(field_get:sro.chat.RequestChatChannelAuthChange.character_id)
  return _internal_character_id();
}
inline void RequestChatChannelAuthChange::_internal_set_character_id(uint64_t value) {
  
  character_id_ = value;
}
inline void RequestChatChannelAuthChange::set_character_id(uint64_t value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:sro.chat.RequestChatChannelAuthChange.character_id)
}

// repeated uint64 ids = 2;
inline int RequestChatChannelAuthChange::_internal_ids_size() const {
  return ids_.size();
}
inline int RequestChatChannelAuthChange::ids_size() const {
  return _internal_ids_size();
}
inline void RequestChatChannelAuthChange::clear_ids() {
  ids_.Clear();
}
inline uint64_t RequestChatChannelAuthChange::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline uint64_t RequestChatChannelAuthChange::ids(int index) const {
  // @@protoc_insertion_point(field_get:sro.chat.RequestChatChannelAuthChange.ids)
  return _internal_ids(index);
}
inline void RequestChatChannelAuthChange::set_ids(int index, uint64_t value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sro.chat.RequestChatChannelAuthChange.ids)
}
inline void RequestChatChannelAuthChange::_internal_add_ids(uint64_t value) {
  ids_.Add(value);
}
inline void RequestChatChannelAuthChange::add_ids(uint64_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:sro.chat.RequestChatChannelAuthChange.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RequestChatChannelAuthChange::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RequestChatChannelAuthChange::ids() const {
  // @@protoc_insertion_point(field_list:sro.chat.RequestChatChannelAuthChange.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RequestChatChannelAuthChange::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RequestChatChannelAuthChange::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:sro.chat.RequestChatChannelAuthChange.ids)
  return _internal_mutable_ids();
}

// -------------------------------------------------------------------

// RequestAuthorizedChatChannels

// uint64 character_id = 1;
inline void RequestAuthorizedChatChannels::clear_character_id() {
  character_id_ = uint64_t{0u};
}
inline uint64_t RequestAuthorizedChatChannels::_internal_character_id() const {
  return character_id_;
}
inline uint64_t RequestAuthorizedChatChannels::character_id() const {
  // @@protoc_insertion_point(field_get:sro.chat.RequestAuthorizedChatChannels.character_id)
  return _internal_character_id();
}
inline void RequestAuthorizedChatChannels::_internal_set_character_id(uint64_t value) {
  
  character_id_ = value;
}
inline void RequestAuthorizedChatChannels::set_character_id(uint64_t value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:sro.chat.RequestAuthorizedChatChannels.character_id)
}

// -------------------------------------------------------------------

// ChatChannel

// uint64 id = 1;
inline void ChatChannel::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t ChatChannel::_internal_id() const {
  return id_;
}
inline uint64_t ChatChannel::id() const {
  // @@protoc_insertion_point(field_get:sro.chat.ChatChannel.id)
  return _internal_id();
}
inline void ChatChannel::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void ChatChannel::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sro.chat.ChatChannel.id)
}

// string name = 2;
inline void ChatChannel::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ChatChannel::name() const {
  // @@protoc_insertion_point(field_get:sro.chat.ChatChannel.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatChannel::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.chat.ChatChannel.name)
}
inline std::string* ChatChannel::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.chat.ChatChannel.name)
  return _s;
}
inline const std::string& ChatChannel::_internal_name() const {
  return name_.Get();
}
inline void ChatChannel::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatChannel::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatChannel::release_name() {
  // @@protoc_insertion_point(field_release:sro.chat.ChatChannel.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatChannel::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.chat.ChatChannel.name)
}

// bool public = 3;
inline void ChatChannel::clear_public_() {
  public__ = false;
}
inline bool ChatChannel::_internal_public_() const {
  return public__;
}
inline bool ChatChannel::public_() const {
  // @@protoc_insertion_point(field_get:sro.chat.ChatChannel.public)
  return _internal_public_();
}
inline void ChatChannel::_internal_set_public_(bool value) {
  
  public__ = value;
}
inline void ChatChannel::set_public_(bool value) {
  _internal_set_public_(value);
  // @@protoc_insertion_point(field_set:sro.chat.ChatChannel.public)
}

// -------------------------------------------------------------------

// ChatChannels

// repeated .sro.chat.ChatChannel channels = 1;
inline int ChatChannels::_internal_channels_size() const {
  return channels_.size();
}
inline int ChatChannels::channels_size() const {
  return _internal_channels_size();
}
inline void ChatChannels::clear_channels() {
  channels_.Clear();
}
inline ::sro::chat::ChatChannel* ChatChannels::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:sro.chat.ChatChannels.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::chat::ChatChannel >*
ChatChannels::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:sro.chat.ChatChannels.channels)
  return &channels_;
}
inline const ::sro::chat::ChatChannel& ChatChannels::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::sro::chat::ChatChannel& ChatChannels::channels(int index) const {
  // @@protoc_insertion_point(field_get:sro.chat.ChatChannels.channels)
  return _internal_channels(index);
}
inline ::sro::chat::ChatChannel* ChatChannels::_internal_add_channels() {
  return channels_.Add();
}
inline ::sro::chat::ChatChannel* ChatChannels::add_channels() {
  ::sro::chat::ChatChannel* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:sro.chat.ChatChannels.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::chat::ChatChannel >&
ChatChannels::channels() const {
  // @@protoc_insertion_point(field_list:sro.chat.ChatChannels.channels)
  return channels_;
}

// -------------------------------------------------------------------

// CreateChannelMessage

// string name = 1;
inline void CreateChannelMessage::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateChannelMessage::name() const {
  // @@protoc_insertion_point(field_get:sro.chat.CreateChannelMessage.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateChannelMessage::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.chat.CreateChannelMessage.name)
}
inline std::string* CreateChannelMessage::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.chat.CreateChannelMessage.name)
  return _s;
}
inline const std::string& CreateChannelMessage::_internal_name() const {
  return name_.Get();
}
inline void CreateChannelMessage::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateChannelMessage::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateChannelMessage::release_name() {
  // @@protoc_insertion_point(field_release:sro.chat.CreateChannelMessage.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateChannelMessage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.chat.CreateChannelMessage.name)
}

// bool public = 2;
inline void CreateChannelMessage::clear_public_() {
  public__ = false;
}
inline bool CreateChannelMessage::_internal_public_() const {
  return public__;
}
inline bool CreateChannelMessage::public_() const {
  // @@protoc_insertion_point(field_get:sro.chat.CreateChannelMessage.public)
  return _internal_public_();
}
inline void CreateChannelMessage::_internal_set_public_(bool value) {
  
  public__ = value;
}
inline void CreateChannelMessage::set_public_(bool value) {
  _internal_set_public_(value);
  // @@protoc_insertion_point(field_set:sro.chat.CreateChannelMessage.public)
}

// -------------------------------------------------------------------

// ChannelIdMessage

// uint64 channel_id = 1;
inline void ChannelIdMessage::clear_channel_id() {
  channel_id_ = uint64_t{0u};
}
inline uint64_t ChannelIdMessage::_internal_channel_id() const {
  return channel_id_;
}
inline uint64_t ChannelIdMessage::channel_id() const {
  // @@protoc_insertion_point(field_get:sro.chat.ChannelIdMessage.channel_id)
  return _internal_channel_id();
}
inline void ChannelIdMessage::_internal_set_channel_id(uint64_t value) {
  
  channel_id_ = value;
}
inline void ChannelIdMessage::set_channel_id(uint64_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:sro.chat.ChannelIdMessage.channel_id)
}

// -------------------------------------------------------------------

// ChatMessage

// string message = 1;
inline void ChatMessage::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ChatMessage::message() const {
  // @@protoc_insertion_point(field_get:sro.chat.ChatMessage.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.chat.ChatMessage.message)
}
inline std::string* ChatMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:sro.chat.ChatMessage.message)
  return _s;
}
inline const std::string& ChatMessage::_internal_message() const {
  return message_.Get();
}
inline void ChatMessage::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatMessage::release_message() {
  // @@protoc_insertion_point(field_release:sro.chat.ChatMessage.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.chat.ChatMessage.message)
}

// string character_name = 2;
inline void ChatMessage::clear_character_name() {
  character_name_.ClearToEmpty();
}
inline const std::string& ChatMessage::character_name() const {
  // @@protoc_insertion_point(field_get:sro.chat.ChatMessage.character_name)
  return _internal_character_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_character_name(ArgT0&& arg0, ArgT... args) {
 
 character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.chat.ChatMessage.character_name)
}
inline std::string* ChatMessage::mutable_character_name() {
  std::string* _s = _internal_mutable_character_name();
  // @@protoc_insertion_point(field_mutable:sro.chat.ChatMessage.character_name)
  return _s;
}
inline const std::string& ChatMessage::_internal_character_name() const {
  return character_name_.Get();
}
inline void ChatMessage::_internal_set_character_name(const std::string& value) {
  
  character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_character_name() {
  
  return character_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatMessage::release_character_name() {
  // @@protoc_insertion_point(field_release:sro.chat.ChatMessage.character_name)
  return character_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatMessage::set_allocated_character_name(std::string* character_name) {
  if (character_name != nullptr) {
    
  } else {
    
  }
  character_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (character_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    character_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.chat.ChatMessage.character_name)
}

// -------------------------------------------------------------------

// SendChatMessageRequest

// uint64 channel_id = 1;
inline void SendChatMessageRequest::clear_channel_id() {
  channel_id_ = uint64_t{0u};
}
inline uint64_t SendChatMessageRequest::_internal_channel_id() const {
  return channel_id_;
}
inline uint64_t SendChatMessageRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:sro.chat.SendChatMessageRequest.channel_id)
  return _internal_channel_id();
}
inline void SendChatMessageRequest::_internal_set_channel_id(uint64_t value) {
  
  channel_id_ = value;
}
inline void SendChatMessageRequest::set_channel_id(uint64_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:sro.chat.SendChatMessageRequest.channel_id)
}

// .sro.chat.ChatMessage chat_message = 2;
inline bool SendChatMessageRequest::_internal_has_chat_message() const {
  return this != internal_default_instance() && chat_message_ != nullptr;
}
inline bool SendChatMessageRequest::has_chat_message() const {
  return _internal_has_chat_message();
}
inline void SendChatMessageRequest::clear_chat_message() {
  if (GetArenaForAllocation() == nullptr && chat_message_ != nullptr) {
    delete chat_message_;
  }
  chat_message_ = nullptr;
}
inline const ::sro::chat::ChatMessage& SendChatMessageRequest::_internal_chat_message() const {
  const ::sro::chat::ChatMessage* p = chat_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::sro::chat::ChatMessage&>(
      ::sro::chat::_ChatMessage_default_instance_);
}
inline const ::sro::chat::ChatMessage& SendChatMessageRequest::chat_message() const {
  // @@protoc_insertion_point(field_get:sro.chat.SendChatMessageRequest.chat_message)
  return _internal_chat_message();
}
inline void SendChatMessageRequest::unsafe_arena_set_allocated_chat_message(
    ::sro::chat::ChatMessage* chat_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_message_);
  }
  chat_message_ = chat_message;
  if (chat_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.chat.SendChatMessageRequest.chat_message)
}
inline ::sro::chat::ChatMessage* SendChatMessageRequest::release_chat_message() {
  
  ::sro::chat::ChatMessage* temp = chat_message_;
  chat_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sro::chat::ChatMessage* SendChatMessageRequest::unsafe_arena_release_chat_message() {
  // @@protoc_insertion_point(field_release:sro.chat.SendChatMessageRequest.chat_message)
  
  ::sro::chat::ChatMessage* temp = chat_message_;
  chat_message_ = nullptr;
  return temp;
}
inline ::sro::chat::ChatMessage* SendChatMessageRequest::_internal_mutable_chat_message() {
  
  if (chat_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::sro::chat::ChatMessage>(GetArenaForAllocation());
    chat_message_ = p;
  }
  return chat_message_;
}
inline ::sro::chat::ChatMessage* SendChatMessageRequest::mutable_chat_message() {
  ::sro::chat::ChatMessage* _msg = _internal_mutable_chat_message();
  // @@protoc_insertion_point(field_mutable:sro.chat.SendChatMessageRequest.chat_message)
  return _msg;
}
inline void SendChatMessageRequest::set_allocated_chat_message(::sro::chat::ChatMessage* chat_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete chat_message_;
  }
  if (chat_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sro::chat::ChatMessage>::GetOwningArena(chat_message);
    if (message_arena != submessage_arena) {
      chat_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_message, submessage_arena);
    }
    
  } else {
    
  }
  chat_message_ = chat_message;
  // @@protoc_insertion_point(field_set_allocated:sro.chat.SendChatMessageRequest.chat_message)
}

// -------------------------------------------------------------------

// SendDirectMessageRequest

// string character_name = 1;
inline void SendDirectMessageRequest::clear_character_name() {
  character_name_.ClearToEmpty();
}
inline const std::string& SendDirectMessageRequest::character_name() const {
  // @@protoc_insertion_point(field_get:sro.chat.SendDirectMessageRequest.character_name)
  return _internal_character_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendDirectMessageRequest::set_character_name(ArgT0&& arg0, ArgT... args) {
 
 character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.chat.SendDirectMessageRequest.character_name)
}
inline std::string* SendDirectMessageRequest::mutable_character_name() {
  std::string* _s = _internal_mutable_character_name();
  // @@protoc_insertion_point(field_mutable:sro.chat.SendDirectMessageRequest.character_name)
  return _s;
}
inline const std::string& SendDirectMessageRequest::_internal_character_name() const {
  return character_name_.Get();
}
inline void SendDirectMessageRequest::_internal_set_character_name(const std::string& value) {
  
  character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendDirectMessageRequest::_internal_mutable_character_name() {
  
  return character_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendDirectMessageRequest::release_character_name() {
  // @@protoc_insertion_point(field_release:sro.chat.SendDirectMessageRequest.character_name)
  return character_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendDirectMessageRequest::set_allocated_character_name(std::string* character_name) {
  if (character_name != nullptr) {
    
  } else {
    
  }
  character_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (character_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    character_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.chat.SendDirectMessageRequest.character_name)
}

// .sro.chat.ChatMessage chat_message = 2;
inline bool SendDirectMessageRequest::_internal_has_chat_message() const {
  return this != internal_default_instance() && chat_message_ != nullptr;
}
inline bool SendDirectMessageRequest::has_chat_message() const {
  return _internal_has_chat_message();
}
inline void SendDirectMessageRequest::clear_chat_message() {
  if (GetArenaForAllocation() == nullptr && chat_message_ != nullptr) {
    delete chat_message_;
  }
  chat_message_ = nullptr;
}
inline const ::sro::chat::ChatMessage& SendDirectMessageRequest::_internal_chat_message() const {
  const ::sro::chat::ChatMessage* p = chat_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::sro::chat::ChatMessage&>(
      ::sro::chat::_ChatMessage_default_instance_);
}
inline const ::sro::chat::ChatMessage& SendDirectMessageRequest::chat_message() const {
  // @@protoc_insertion_point(field_get:sro.chat.SendDirectMessageRequest.chat_message)
  return _internal_chat_message();
}
inline void SendDirectMessageRequest::unsafe_arena_set_allocated_chat_message(
    ::sro::chat::ChatMessage* chat_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_message_);
  }
  chat_message_ = chat_message;
  if (chat_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.chat.SendDirectMessageRequest.chat_message)
}
inline ::sro::chat::ChatMessage* SendDirectMessageRequest::release_chat_message() {
  
  ::sro::chat::ChatMessage* temp = chat_message_;
  chat_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sro::chat::ChatMessage* SendDirectMessageRequest::unsafe_arena_release_chat_message() {
  // @@protoc_insertion_point(field_release:sro.chat.SendDirectMessageRequest.chat_message)
  
  ::sro::chat::ChatMessage* temp = chat_message_;
  chat_message_ = nullptr;
  return temp;
}
inline ::sro::chat::ChatMessage* SendDirectMessageRequest::_internal_mutable_chat_message() {
  
  if (chat_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::sro::chat::ChatMessage>(GetArenaForAllocation());
    chat_message_ = p;
  }
  return chat_message_;
}
inline ::sro::chat::ChatMessage* SendDirectMessageRequest::mutable_chat_message() {
  ::sro::chat::ChatMessage* _msg = _internal_mutable_chat_message();
  // @@protoc_insertion_point(field_mutable:sro.chat.SendDirectMessageRequest.chat_message)
  return _msg;
}
inline void SendDirectMessageRequest::set_allocated_chat_message(::sro::chat::ChatMessage* chat_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete chat_message_;
  }
  if (chat_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sro::chat::ChatMessage>::GetOwningArena(chat_message);
    if (message_arena != submessage_arena) {
      chat_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_message, submessage_arena);
    }
    
  } else {
    
  }
  chat_message_ = chat_message;
  // @@protoc_insertion_point(field_set_allocated:sro.chat.SendDirectMessageRequest.chat_message)
}

// -------------------------------------------------------------------

// UpdateChatChannelRequest

// uint64 channel_id = 1;
inline void UpdateChatChannelRequest::clear_channel_id() {
  channel_id_ = uint64_t{0u};
}
inline uint64_t UpdateChatChannelRequest::_internal_channel_id() const {
  return channel_id_;
}
inline uint64_t UpdateChatChannelRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:sro.chat.UpdateChatChannelRequest.channel_id)
  return _internal_channel_id();
}
inline void UpdateChatChannelRequest::_internal_set_channel_id(uint64_t value) {
  
  channel_id_ = value;
}
inline void UpdateChatChannelRequest::set_channel_id(uint64_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:sro.chat.UpdateChatChannelRequest.channel_id)
}

// .google.protobuf.StringValue name = 2;
inline bool UpdateChatChannelRequest::_internal_has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline bool UpdateChatChannelRequest::has_name() const {
  return _internal_has_name();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& UpdateChatChannelRequest::_internal_name() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& UpdateChatChannelRequest::name() const {
  // @@protoc_insertion_point(field_get:sro.chat.UpdateChatChannelRequest.name)
  return _internal_name();
}
inline void UpdateChatChannelRequest::unsafe_arena_set_allocated_name(
    ::PROTOBUF_NAMESPACE_ID::StringValue* name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.chat.UpdateChatChannelRequest.name)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* UpdateChatChannelRequest::release_name() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = name_;
  name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* UpdateChatChannelRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:sro.chat.UpdateChatChannelRequest.name)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* UpdateChatChannelRequest::_internal_mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    name_ = p;
  }
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* UpdateChatChannelRequest::mutable_name() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.chat.UpdateChatChannelRequest.name)
  return _msg;
}
inline void UpdateChatChannelRequest::set_allocated_name(::PROTOBUF_NAMESPACE_ID::StringValue* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name));
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:sro.chat.UpdateChatChannelRequest.name)
}

// .google.protobuf.BoolValue public = 3;
inline bool UpdateChatChannelRequest::_internal_has_public_() const {
  return this != internal_default_instance() && public__ != nullptr;
}
inline bool UpdateChatChannelRequest::has_public_() const {
  return _internal_has_public_();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& UpdateChatChannelRequest::_internal_public_() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = public__;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& UpdateChatChannelRequest::public_() const {
  // @@protoc_insertion_point(field_get:sro.chat.UpdateChatChannelRequest.public)
  return _internal_public_();
}
inline void UpdateChatChannelRequest::unsafe_arena_set_allocated_public_(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* public_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public__);
  }
  public__ = public_;
  if (public_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.chat.UpdateChatChannelRequest.public)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* UpdateChatChannelRequest::release_public_() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = public__;
  public__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* UpdateChatChannelRequest::unsafe_arena_release_public_() {
  // @@protoc_insertion_point(field_release:sro.chat.UpdateChatChannelRequest.public)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = public__;
  public__ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* UpdateChatChannelRequest::_internal_mutable_public_() {
  
  if (public__ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    public__ = p;
  }
  return public__;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* UpdateChatChannelRequest::mutable_public_() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_public_();
  // @@protoc_insertion_point(field_mutable:sro.chat.UpdateChatChannelRequest.public)
  return _msg;
}
inline void UpdateChatChannelRequest::set_allocated_public_(::PROTOBUF_NAMESPACE_ID::BoolValue* public_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(public__);
  }
  if (public_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_));
    if (message_arena != submessage_arena) {
      public_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_, submessage_arena);
    }
    
  } else {
    
  }
  public__ = public_;
  // @@protoc_insertion_point(field_set_allocated:sro.chat.UpdateChatChannelRequest.public)
}

// -------------------------------------------------------------------

// CharacterName

// string character_name = 1;
inline void CharacterName::clear_character_name() {
  character_name_.ClearToEmpty();
}
inline const std::string& CharacterName::character_name() const {
  // @@protoc_insertion_point(field_get:sro.chat.CharacterName.character_name)
  return _internal_character_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharacterName::set_character_name(ArgT0&& arg0, ArgT... args) {
 
 character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.chat.CharacterName.character_name)
}
inline std::string* CharacterName::mutable_character_name() {
  std::string* _s = _internal_mutable_character_name();
  // @@protoc_insertion_point(field_mutable:sro.chat.CharacterName.character_name)
  return _s;
}
inline const std::string& CharacterName::_internal_character_name() const {
  return character_name_.Get();
}
inline void CharacterName::_internal_set_character_name(const std::string& value) {
  
  character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CharacterName::_internal_mutable_character_name() {
  
  return character_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CharacterName::release_character_name() {
  // @@protoc_insertion_point(field_release:sro.chat.CharacterName.character_name)
  return character_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CharacterName::set_allocated_character_name(std::string* character_name) {
  if (character_name != nullptr) {
    
  } else {
    
  }
  character_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (character_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    character_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.chat.CharacterName.character_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat
}  // namespace sro

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
