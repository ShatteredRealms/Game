#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: characters.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_characters_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_characters_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pb/google/api/annotations.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_characters_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_characters_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_characters_2eproto;
namespace sro {
namespace characters {
class Character;
struct CharacterDefaultTypeInternal;
extern CharacterDefaultTypeInternal _Character_default_instance_;
class CharacterTarget;
struct CharacterTargetDefaultTypeInternal;
extern CharacterTargetDefaultTypeInternal _CharacterTarget_default_instance_;
class Characters;
struct CharactersDefaultTypeInternal;
extern CharactersDefaultTypeInternal _Characters_default_instance_;
class CreateCharacterRequest;
struct CreateCharacterRequestDefaultTypeInternal;
extern CreateCharacterRequestDefaultTypeInternal _CreateCharacterRequest_default_instance_;
class DeleteCharacterRequest;
struct DeleteCharacterRequestDefaultTypeInternal;
extern DeleteCharacterRequestDefaultTypeInternal _DeleteCharacterRequest_default_instance_;
class Gender;
struct GenderDefaultTypeInternal;
extern GenderDefaultTypeInternal _Gender_default_instance_;
class Genders;
struct GendersDefaultTypeInternal;
extern GendersDefaultTypeInternal _Genders_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class PlayTimeMessage;
struct PlayTimeMessageDefaultTypeInternal;
extern PlayTimeMessageDefaultTypeInternal _PlayTimeMessage_default_instance_;
class Realm;
struct RealmDefaultTypeInternal;
extern RealmDefaultTypeInternal _Realm_default_instance_;
class Realms;
struct RealmsDefaultTypeInternal;
extern RealmsDefaultTypeInternal _Realms_default_instance_;
class UserTarget;
struct UserTargetDefaultTypeInternal;
extern UserTargetDefaultTypeInternal _UserTarget_default_instance_;
}  // namespace characters
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template<> ::sro::characters::Character* Arena::CreateMaybeMessage<::sro::characters::Character>(Arena*);
template<> ::sro::characters::CharacterTarget* Arena::CreateMaybeMessage<::sro::characters::CharacterTarget>(Arena*);
template<> ::sro::characters::Characters* Arena::CreateMaybeMessage<::sro::characters::Characters>(Arena*);
template<> ::sro::characters::CreateCharacterRequest* Arena::CreateMaybeMessage<::sro::characters::CreateCharacterRequest>(Arena*);
template<> ::sro::characters::DeleteCharacterRequest* Arena::CreateMaybeMessage<::sro::characters::DeleteCharacterRequest>(Arena*);
template<> ::sro::characters::Gender* Arena::CreateMaybeMessage<::sro::characters::Gender>(Arena*);
template<> ::sro::characters::Genders* Arena::CreateMaybeMessage<::sro::characters::Genders>(Arena*);
template<> ::sro::characters::Location* Arena::CreateMaybeMessage<::sro::characters::Location>(Arena*);
template<> ::sro::characters::PlayTimeMessage* Arena::CreateMaybeMessage<::sro::characters::PlayTimeMessage>(Arena*);
template<> ::sro::characters::Realm* Arena::CreateMaybeMessage<::sro::characters::Realm>(Arena*);
template<> ::sro::characters::Realms* Arena::CreateMaybeMessage<::sro::characters::Realms>(Arena*);
template<> ::sro::characters::UserTarget* Arena::CreateMaybeMessage<::sro::characters::UserTarget>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sro {
namespace characters {

// ===================================================================

class PlayTimeMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.characters.PlayTimeMessage) */ {
 public:
  inline PlayTimeMessage() : PlayTimeMessage(nullptr) {}
  ~PlayTimeMessage() override;
  explicit constexpr PlayTimeMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayTimeMessage(const PlayTimeMessage& from);
  PlayTimeMessage(PlayTimeMessage&& from) noexcept
    : PlayTimeMessage() {
    *this = ::std::move(from);
  }

  inline PlayTimeMessage& operator=(const PlayTimeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayTimeMessage& operator=(PlayTimeMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayTimeMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayTimeMessage* internal_default_instance() {
    return reinterpret_cast<const PlayTimeMessage*>(
               &_PlayTimeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayTimeMessage& a, PlayTimeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayTimeMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayTimeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayTimeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayTimeMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayTimeMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayTimeMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayTimeMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.characters.PlayTimeMessage";
  }
  protected:
  explicit PlayTimeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // uint64 character_id = 1;
  void clear_character_id();
  uint64_t character_id() const;
  void set_character_id(uint64_t value);
  private:
  uint64_t _internal_character_id() const;
  void _internal_set_character_id(uint64_t value);
  public:

  // uint64 time = 2;
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.characters.PlayTimeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t character_id_;
  uint64_t time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class DeleteCharacterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.characters.DeleteCharacterRequest) */ {
 public:
  inline DeleteCharacterRequest() : DeleteCharacterRequest(nullptr) {}
  ~DeleteCharacterRequest() override;
  explicit constexpr DeleteCharacterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteCharacterRequest(const DeleteCharacterRequest& from);
  DeleteCharacterRequest(DeleteCharacterRequest&& from) noexcept
    : DeleteCharacterRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCharacterRequest& operator=(const DeleteCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCharacterRequest& operator=(DeleteCharacterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteCharacterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCharacterRequest*>(
               &_DeleteCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeleteCharacterRequest& a, DeleteCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCharacterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCharacterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteCharacterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteCharacterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteCharacterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCharacterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.characters.DeleteCharacterRequest";
  }
  protected:
  explicit DeleteCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
  };
  // uint64 character_id = 1;
  void clear_character_id();
  uint64_t character_id() const;
  void set_character_id(uint64_t value);
  private:
  uint64_t _internal_character_id() const;
  void _internal_set_character_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.characters.DeleteCharacterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t character_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class CreateCharacterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.characters.CreateCharacterRequest) */ {
 public:
  inline CreateCharacterRequest() : CreateCharacterRequest(nullptr) {}
  ~CreateCharacterRequest() override;
  explicit constexpr CreateCharacterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCharacterRequest(const CreateCharacterRequest& from);
  CreateCharacterRequest(CreateCharacterRequest&& from) noexcept
    : CreateCharacterRequest() {
    *this = ::std::move(from);
  }

  inline CreateCharacterRequest& operator=(const CreateCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCharacterRequest& operator=(CreateCharacterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCharacterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCharacterRequest*>(
               &_CreateCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateCharacterRequest& a, CreateCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCharacterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCharacterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCharacterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCharacterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateCharacterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCharacterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.characters.CreateCharacterRequest";
  }
  protected:
  explicit CreateCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kGenderFieldNumber = 3,
    kRealmFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 user_id = 1;
  void clear_user_id();
  uint64_t user_id() const;
  void set_user_id(uint64_t value);
  private:
  uint64_t _internal_user_id() const;
  void _internal_set_user_id(uint64_t value);
  public:

  // uint64 gender = 3;
  void clear_gender();
  uint64_t gender() const;
  void set_gender(uint64_t value);
  private:
  uint64_t _internal_gender() const;
  void _internal_set_gender(uint64_t value);
  public:

  // uint64 realm = 4;
  void clear_realm();
  uint64_t realm() const;
  void set_realm(uint64_t value);
  private:
  uint64_t _internal_realm() const;
  void _internal_set_realm(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.characters.CreateCharacterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t user_id_;
  uint64_t gender_;
  uint64_t realm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class UserTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.characters.UserTarget) */ {
 public:
  inline UserTarget() : UserTarget(nullptr) {}
  ~UserTarget() override;
  explicit constexpr UserTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserTarget(const UserTarget& from);
  UserTarget(UserTarget&& from) noexcept
    : UserTarget() {
    *this = ::std::move(from);
  }

  inline UserTarget& operator=(const UserTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserTarget& operator=(UserTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserTarget* internal_default_instance() {
    return reinterpret_cast<const UserTarget*>(
               &_UserTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserTarget& a, UserTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(UserTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserTarget& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.characters.UserTarget";
  }
  protected:
  explicit UserTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // uint64 user_id = 1;
  void clear_user_id();
  uint64_t user_id() const;
  void set_user_id(uint64_t value);
  private:
  uint64_t _internal_user_id() const;
  void _internal_set_user_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.characters.UserTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class CharacterTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.characters.CharacterTarget) */ {
 public:
  inline CharacterTarget() : CharacterTarget(nullptr) {}
  ~CharacterTarget() override;
  explicit constexpr CharacterTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterTarget(const CharacterTarget& from);
  CharacterTarget(CharacterTarget&& from) noexcept
    : CharacterTarget() {
    *this = ::std::move(from);
  }

  inline CharacterTarget& operator=(const CharacterTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterTarget& operator=(CharacterTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterTarget* internal_default_instance() {
    return reinterpret_cast<const CharacterTarget*>(
               &_CharacterTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CharacterTarget& a, CharacterTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CharacterTarget& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.characters.CharacterTarget";
  }
  protected:
  explicit CharacterTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
  };
  // uint64 character_id = 1;
  void clear_character_id();
  uint64_t character_id() const;
  void set_character_id(uint64_t value);
  private:
  uint64_t _internal_character_id() const;
  void _internal_set_character_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.characters.CharacterTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t character_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Character final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.characters.Character) */ {
 public:
  inline Character() : Character(nullptr) {}
  ~Character() override;
  explicit constexpr Character(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Character(const Character& from);
  Character(Character&& from) noexcept
    : Character() {
    *this = ::std::move(from);
  }

  inline Character& operator=(const Character& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character& operator=(Character&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character* internal_default_instance() {
    return reinterpret_cast<const Character*>(
               &_Character_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Character& a, Character& b) {
    a.Swap(&b);
  }
  inline void Swap(Character* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Character& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Character& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.characters.Character";
  }
  protected:
  explicit Character(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 2,
    kNameFieldNumber = 3,
    kGenderFieldNumber = 4,
    kRealmFieldNumber = 5,
    kPlayTimeFieldNumber = 7,
    kLocationFieldNumber = 8,
    kIdFieldNumber = 1,
  };
  // .google.protobuf.UInt64Value owner = 2;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& owner() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_owner();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_owner();
  void set_allocated_owner(::PROTOBUF_NAMESPACE_ID::UInt64Value* owner);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_owner() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* owner);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_owner();

  // .google.protobuf.StringValue name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& name() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_name();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_name();
  void set_allocated_name(::PROTOBUF_NAMESPACE_ID::StringValue* name);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_name() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::PROTOBUF_NAMESPACE_ID::StringValue* name);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_name();

  // .google.protobuf.UInt64Value gender = 4;
  bool has_gender() const;
  private:
  bool _internal_has_gender() const;
  public:
  void clear_gender();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& gender() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_gender();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_gender();
  void set_allocated_gender(::PROTOBUF_NAMESPACE_ID::UInt64Value* gender);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_gender() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_gender();
  public:
  void unsafe_arena_set_allocated_gender(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* gender);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_gender();

  // .google.protobuf.UInt64Value realm = 5;
  bool has_realm() const;
  private:
  bool _internal_has_realm() const;
  public:
  void clear_realm();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& realm() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_realm();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_realm();
  void set_allocated_realm(::PROTOBUF_NAMESPACE_ID::UInt64Value* realm);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_realm() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_realm();
  public:
  void unsafe_arena_set_allocated_realm(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* realm);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_realm();

  // .google.protobuf.UInt64Value play_time = 7;
  bool has_play_time() const;
  private:
  bool _internal_has_play_time() const;
  public:
  void clear_play_time();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& play_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_play_time();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_play_time();
  void set_allocated_play_time(::PROTOBUF_NAMESPACE_ID::UInt64Value* play_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_play_time() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_play_time();
  public:
  void unsafe_arena_set_allocated_play_time(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* play_time);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_play_time();

  // .sro.characters.Location location = 8;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::sro::characters::Location& location() const;
  PROTOBUF_NODISCARD ::sro::characters::Location* release_location();
  ::sro::characters::Location* mutable_location();
  void set_allocated_location(::sro::characters::Location* location);
  private:
  const ::sro::characters::Location& _internal_location() const;
  ::sro::characters::Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::sro::characters::Location* location);
  ::sro::characters::Location* unsafe_arena_release_location();

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.characters.Character)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* owner_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* name_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* gender_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* realm_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* play_time_;
  ::sro::characters::Location* location_;
  uint64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.characters.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit constexpr Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Location& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.characters.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // string world = 1;
  void clear_world();
  const std::string& world() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_world(ArgT0&& arg0, ArgT... args);
  std::string* mutable_world();
  PROTOBUF_NODISCARD std::string* release_world();
  void set_allocated_world(std::string* world);
  private:
  const std::string& _internal_world() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_world(const std::string& value);
  std::string* _internal_mutable_world();
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:sro.characters.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr world_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Characters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.characters.Characters) */ {
 public:
  inline Characters() : Characters(nullptr) {}
  ~Characters() override;
  explicit constexpr Characters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Characters(const Characters& from);
  Characters(Characters&& from) noexcept
    : Characters() {
    *this = ::std::move(from);
  }

  inline Characters& operator=(const Characters& from) {
    CopyFrom(from);
    return *this;
  }
  inline Characters& operator=(Characters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Characters& default_instance() {
    return *internal_default_instance();
  }
  static inline const Characters* internal_default_instance() {
    return reinterpret_cast<const Characters*>(
               &_Characters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Characters& a, Characters& b) {
    a.Swap(&b);
  }
  inline void Swap(Characters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Characters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Characters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Characters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Characters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Characters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Characters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.characters.Characters";
  }
  protected:
  explicit Characters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharactersFieldNumber = 1,
  };
  // repeated .sro.characters.Character characters = 1;
  int characters_size() const;
  private:
  int _internal_characters_size() const;
  public:
  void clear_characters();
  ::sro::characters::Character* mutable_characters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::characters::Character >*
      mutable_characters();
  private:
  const ::sro::characters::Character& _internal_characters(int index) const;
  ::sro::characters::Character* _internal_add_characters();
  public:
  const ::sro::characters::Character& characters(int index) const;
  ::sro::characters::Character* add_characters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::characters::Character >&
      characters() const;

  // @@protoc_insertion_point(class_scope:sro.characters.Characters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::characters::Character > characters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Gender final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.characters.Gender) */ {
 public:
  inline Gender() : Gender(nullptr) {}
  ~Gender() override;
  explicit constexpr Gender(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Gender(const Gender& from);
  Gender(Gender&& from) noexcept
    : Gender() {
    *this = ::std::move(from);
  }

  inline Gender& operator=(const Gender& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gender& operator=(Gender&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gender& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gender* internal_default_instance() {
    return reinterpret_cast<const Gender*>(
               &_Gender_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Gender& a, Gender& b) {
    a.Swap(&b);
  }
  inline void Swap(Gender* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gender* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gender* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Gender>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Gender& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Gender& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gender* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.characters.Gender";
  }
  protected:
  explicit Gender(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.characters.Gender)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Realm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.characters.Realm) */ {
 public:
  inline Realm() : Realm(nullptr) {}
  ~Realm() override;
  explicit constexpr Realm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Realm(const Realm& from);
  Realm(Realm&& from) noexcept
    : Realm() {
    *this = ::std::move(from);
  }

  inline Realm& operator=(const Realm& from) {
    CopyFrom(from);
    return *this;
  }
  inline Realm& operator=(Realm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Realm& default_instance() {
    return *internal_default_instance();
  }
  static inline const Realm* internal_default_instance() {
    return reinterpret_cast<const Realm*>(
               &_Realm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Realm& a, Realm& b) {
    a.Swap(&b);
  }
  inline void Swap(Realm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Realm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Realm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Realm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Realm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Realm& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Realm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.characters.Realm";
  }
  protected:
  explicit Realm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sro.characters.Realm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Genders final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.characters.Genders) */ {
 public:
  inline Genders() : Genders(nullptr) {}
  ~Genders() override;
  explicit constexpr Genders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Genders(const Genders& from);
  Genders(Genders&& from) noexcept
    : Genders() {
    *this = ::std::move(from);
  }

  inline Genders& operator=(const Genders& from) {
    CopyFrom(from);
    return *this;
  }
  inline Genders& operator=(Genders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Genders& default_instance() {
    return *internal_default_instance();
  }
  static inline const Genders* internal_default_instance() {
    return reinterpret_cast<const Genders*>(
               &_Genders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Genders& a, Genders& b) {
    a.Swap(&b);
  }
  inline void Swap(Genders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Genders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Genders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Genders>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Genders& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Genders& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Genders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.characters.Genders";
  }
  protected:
  explicit Genders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGendersFieldNumber = 1,
  };
  // repeated .sro.characters.Gender genders = 1;
  int genders_size() const;
  private:
  int _internal_genders_size() const;
  public:
  void clear_genders();
  ::sro::characters::Gender* mutable_genders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::characters::Gender >*
      mutable_genders();
  private:
  const ::sro::characters::Gender& _internal_genders(int index) const;
  ::sro::characters::Gender* _internal_add_genders();
  public:
  const ::sro::characters::Gender& genders(int index) const;
  ::sro::characters::Gender* add_genders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::characters::Gender >&
      genders() const;

  // @@protoc_insertion_point(class_scope:sro.characters.Genders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::characters::Gender > genders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Realms final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.characters.Realms) */ {
 public:
  inline Realms() : Realms(nullptr) {}
  ~Realms() override;
  explicit constexpr Realms(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Realms(const Realms& from);
  Realms(Realms&& from) noexcept
    : Realms() {
    *this = ::std::move(from);
  }

  inline Realms& operator=(const Realms& from) {
    CopyFrom(from);
    return *this;
  }
  inline Realms& operator=(Realms&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Realms& default_instance() {
    return *internal_default_instance();
  }
  static inline const Realms* internal_default_instance() {
    return reinterpret_cast<const Realms*>(
               &_Realms_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Realms& a, Realms& b) {
    a.Swap(&b);
  }
  inline void Swap(Realms* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Realms* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Realms* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Realms>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Realms& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Realms& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Realms* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sro.characters.Realms";
  }
  protected:
  explicit Realms(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealmsFieldNumber = 1,
  };
  // repeated .sro.characters.Realm realms = 1;
  int realms_size() const;
  private:
  int _internal_realms_size() const;
  public:
  void clear_realms();
  ::sro::characters::Realm* mutable_realms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::characters::Realm >*
      mutable_realms();
  private:
  const ::sro::characters::Realm& _internal_realms(int index) const;
  ::sro::characters::Realm* _internal_add_realms();
  public:
  const ::sro::characters::Realm& realms(int index) const;
  ::sro::characters::Realm* add_realms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::characters::Realm >&
      realms() const;

  // @@protoc_insertion_point(class_scope:sro.characters.Realms)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::characters::Realm > realms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayTimeMessage

// uint64 character_id = 1;
inline void PlayTimeMessage::clear_character_id() {
  character_id_ = uint64_t{0u};
}
inline uint64_t PlayTimeMessage::_internal_character_id() const {
  return character_id_;
}
inline uint64_t PlayTimeMessage::character_id() const {
  // @@protoc_insertion_point(field_get:sro.characters.PlayTimeMessage.character_id)
  return _internal_character_id();
}
inline void PlayTimeMessage::_internal_set_character_id(uint64_t value) {
  
  character_id_ = value;
}
inline void PlayTimeMessage::set_character_id(uint64_t value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:sro.characters.PlayTimeMessage.character_id)
}

// uint64 time = 2;
inline void PlayTimeMessage::clear_time() {
  time_ = uint64_t{0u};
}
inline uint64_t PlayTimeMessage::_internal_time() const {
  return time_;
}
inline uint64_t PlayTimeMessage::time() const {
  // @@protoc_insertion_point(field_get:sro.characters.PlayTimeMessage.time)
  return _internal_time();
}
inline void PlayTimeMessage::_internal_set_time(uint64_t value) {
  
  time_ = value;
}
inline void PlayTimeMessage::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:sro.characters.PlayTimeMessage.time)
}

// -------------------------------------------------------------------

// DeleteCharacterRequest

// uint64 character_id = 1;
inline void DeleteCharacterRequest::clear_character_id() {
  character_id_ = uint64_t{0u};
}
inline uint64_t DeleteCharacterRequest::_internal_character_id() const {
  return character_id_;
}
inline uint64_t DeleteCharacterRequest::character_id() const {
  // @@protoc_insertion_point(field_get:sro.characters.DeleteCharacterRequest.character_id)
  return _internal_character_id();
}
inline void DeleteCharacterRequest::_internal_set_character_id(uint64_t value) {
  
  character_id_ = value;
}
inline void DeleteCharacterRequest::set_character_id(uint64_t value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:sro.characters.DeleteCharacterRequest.character_id)
}

// -------------------------------------------------------------------

// CreateCharacterRequest

// uint64 user_id = 1;
inline void CreateCharacterRequest::clear_user_id() {
  user_id_ = uint64_t{0u};
}
inline uint64_t CreateCharacterRequest::_internal_user_id() const {
  return user_id_;
}
inline uint64_t CreateCharacterRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sro.characters.CreateCharacterRequest.user_id)
  return _internal_user_id();
}
inline void CreateCharacterRequest::_internal_set_user_id(uint64_t value) {
  
  user_id_ = value;
}
inline void CreateCharacterRequest::set_user_id(uint64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:sro.characters.CreateCharacterRequest.user_id)
}

// string name = 2;
inline void CreateCharacterRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateCharacterRequest::name() const {
  // @@protoc_insertion_point(field_get:sro.characters.CreateCharacterRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCharacterRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.characters.CreateCharacterRequest.name)
}
inline std::string* CreateCharacterRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.characters.CreateCharacterRequest.name)
  return _s;
}
inline const std::string& CreateCharacterRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateCharacterRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::release_name() {
  // @@protoc_insertion_point(field_release:sro.characters.CreateCharacterRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateCharacterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.characters.CreateCharacterRequest.name)
}

// uint64 gender = 3;
inline void CreateCharacterRequest::clear_gender() {
  gender_ = uint64_t{0u};
}
inline uint64_t CreateCharacterRequest::_internal_gender() const {
  return gender_;
}
inline uint64_t CreateCharacterRequest::gender() const {
  // @@protoc_insertion_point(field_get:sro.characters.CreateCharacterRequest.gender)
  return _internal_gender();
}
inline void CreateCharacterRequest::_internal_set_gender(uint64_t value) {
  
  gender_ = value;
}
inline void CreateCharacterRequest::set_gender(uint64_t value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:sro.characters.CreateCharacterRequest.gender)
}

// uint64 realm = 4;
inline void CreateCharacterRequest::clear_realm() {
  realm_ = uint64_t{0u};
}
inline uint64_t CreateCharacterRequest::_internal_realm() const {
  return realm_;
}
inline uint64_t CreateCharacterRequest::realm() const {
  // @@protoc_insertion_point(field_get:sro.characters.CreateCharacterRequest.realm)
  return _internal_realm();
}
inline void CreateCharacterRequest::_internal_set_realm(uint64_t value) {
  
  realm_ = value;
}
inline void CreateCharacterRequest::set_realm(uint64_t value) {
  _internal_set_realm(value);
  // @@protoc_insertion_point(field_set:sro.characters.CreateCharacterRequest.realm)
}

// -------------------------------------------------------------------

// UserTarget

// uint64 user_id = 1;
inline void UserTarget::clear_user_id() {
  user_id_ = uint64_t{0u};
}
inline uint64_t UserTarget::_internal_user_id() const {
  return user_id_;
}
inline uint64_t UserTarget::user_id() const {
  // @@protoc_insertion_point(field_get:sro.characters.UserTarget.user_id)
  return _internal_user_id();
}
inline void UserTarget::_internal_set_user_id(uint64_t value) {
  
  user_id_ = value;
}
inline void UserTarget::set_user_id(uint64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:sro.characters.UserTarget.user_id)
}

// -------------------------------------------------------------------

// CharacterTarget

// uint64 character_id = 1;
inline void CharacterTarget::clear_character_id() {
  character_id_ = uint64_t{0u};
}
inline uint64_t CharacterTarget::_internal_character_id() const {
  return character_id_;
}
inline uint64_t CharacterTarget::character_id() const {
  // @@protoc_insertion_point(field_get:sro.characters.CharacterTarget.character_id)
  return _internal_character_id();
}
inline void CharacterTarget::_internal_set_character_id(uint64_t value) {
  
  character_id_ = value;
}
inline void CharacterTarget::set_character_id(uint64_t value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:sro.characters.CharacterTarget.character_id)
}

// -------------------------------------------------------------------

// Character

// uint64 id = 1;
inline void Character::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t Character::_internal_id() const {
  return id_;
}
inline uint64_t Character::id() const {
  // @@protoc_insertion_point(field_get:sro.characters.Character.id)
  return _internal_id();
}
inline void Character::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void Character::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sro.characters.Character.id)
}

// .google.protobuf.UInt64Value owner = 2;
inline bool Character::_internal_has_owner() const {
  return this != internal_default_instance() && owner_ != nullptr;
}
inline bool Character::has_owner() const {
  return _internal_has_owner();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& Character::_internal_owner() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& Character::owner() const {
  // @@protoc_insertion_point(field_get:sro.characters.Character.owner)
  return _internal_owner();
}
inline void Character::unsafe_arena_set_allocated_owner(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.characters.Character.owner)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* Character::release_owner() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = owner_;
  owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* Character::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:sro.characters.Character.owner)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* Character::_internal_mutable_owner() {
  
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    owner_ = p;
  }
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* Character::mutable_owner() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:sro.characters.Character.owner)
  return _msg;
}
inline void Character::set_allocated_owner(::PROTOBUF_NAMESPACE_ID::UInt64Value* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner));
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:sro.characters.Character.owner)
}

// .google.protobuf.StringValue name = 3;
inline bool Character::_internal_has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline bool Character::has_name() const {
  return _internal_has_name();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Character::_internal_name() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Character::name() const {
  // @@protoc_insertion_point(field_get:sro.characters.Character.name)
  return _internal_name();
}
inline void Character::unsafe_arena_set_allocated_name(
    ::PROTOBUF_NAMESPACE_ID::StringValue* name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.characters.Character.name)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Character::release_name() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = name_;
  name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Character::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:sro.characters.Character.name)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Character::_internal_mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    name_ = p;
  }
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Character::mutable_name() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.characters.Character.name)
  return _msg;
}
inline void Character::set_allocated_name(::PROTOBUF_NAMESPACE_ID::StringValue* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name));
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:sro.characters.Character.name)
}

// .google.protobuf.UInt64Value gender = 4;
inline bool Character::_internal_has_gender() const {
  return this != internal_default_instance() && gender_ != nullptr;
}
inline bool Character::has_gender() const {
  return _internal_has_gender();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& Character::_internal_gender() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = gender_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& Character::gender() const {
  // @@protoc_insertion_point(field_get:sro.characters.Character.gender)
  return _internal_gender();
}
inline void Character::unsafe_arena_set_allocated_gender(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* gender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gender_);
  }
  gender_ = gender;
  if (gender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.characters.Character.gender)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* Character::release_gender() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = gender_;
  gender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* Character::unsafe_arena_release_gender() {
  // @@protoc_insertion_point(field_release:sro.characters.Character.gender)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = gender_;
  gender_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* Character::_internal_mutable_gender() {
  
  if (gender_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    gender_ = p;
  }
  return gender_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* Character::mutable_gender() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_gender();
  // @@protoc_insertion_point(field_mutable:sro.characters.Character.gender)
  return _msg;
}
inline void Character::set_allocated_gender(::PROTOBUF_NAMESPACE_ID::UInt64Value* gender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gender_);
  }
  if (gender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gender));
    if (message_arena != submessage_arena) {
      gender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gender, submessage_arena);
    }
    
  } else {
    
  }
  gender_ = gender;
  // @@protoc_insertion_point(field_set_allocated:sro.characters.Character.gender)
}

// .google.protobuf.UInt64Value realm = 5;
inline bool Character::_internal_has_realm() const {
  return this != internal_default_instance() && realm_ != nullptr;
}
inline bool Character::has_realm() const {
  return _internal_has_realm();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& Character::_internal_realm() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = realm_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& Character::realm() const {
  // @@protoc_insertion_point(field_get:sro.characters.Character.realm)
  return _internal_realm();
}
inline void Character::unsafe_arena_set_allocated_realm(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* realm) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(realm_);
  }
  realm_ = realm;
  if (realm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.characters.Character.realm)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* Character::release_realm() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = realm_;
  realm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* Character::unsafe_arena_release_realm() {
  // @@protoc_insertion_point(field_release:sro.characters.Character.realm)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = realm_;
  realm_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* Character::_internal_mutable_realm() {
  
  if (realm_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    realm_ = p;
  }
  return realm_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* Character::mutable_realm() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_realm();
  // @@protoc_insertion_point(field_mutable:sro.characters.Character.realm)
  return _msg;
}
inline void Character::set_allocated_realm(::PROTOBUF_NAMESPACE_ID::UInt64Value* realm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(realm_);
  }
  if (realm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(realm));
    if (message_arena != submessage_arena) {
      realm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, realm, submessage_arena);
    }
    
  } else {
    
  }
  realm_ = realm;
  // @@protoc_insertion_point(field_set_allocated:sro.characters.Character.realm)
}

// .google.protobuf.UInt64Value play_time = 7;
inline bool Character::_internal_has_play_time() const {
  return this != internal_default_instance() && play_time_ != nullptr;
}
inline bool Character::has_play_time() const {
  return _internal_has_play_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& Character::_internal_play_time() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = play_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& Character::play_time() const {
  // @@protoc_insertion_point(field_get:sro.characters.Character.play_time)
  return _internal_play_time();
}
inline void Character::unsafe_arena_set_allocated_play_time(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* play_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(play_time_);
  }
  play_time_ = play_time;
  if (play_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.characters.Character.play_time)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* Character::release_play_time() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = play_time_;
  play_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* Character::unsafe_arena_release_play_time() {
  // @@protoc_insertion_point(field_release:sro.characters.Character.play_time)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = play_time_;
  play_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* Character::_internal_mutable_play_time() {
  
  if (play_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    play_time_ = p;
  }
  return play_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* Character::mutable_play_time() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_play_time();
  // @@protoc_insertion_point(field_mutable:sro.characters.Character.play_time)
  return _msg;
}
inline void Character::set_allocated_play_time(::PROTOBUF_NAMESPACE_ID::UInt64Value* play_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(play_time_);
  }
  if (play_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(play_time));
    if (message_arena != submessage_arena) {
      play_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, play_time, submessage_arena);
    }
    
  } else {
    
  }
  play_time_ = play_time;
  // @@protoc_insertion_point(field_set_allocated:sro.characters.Character.play_time)
}

// .sro.characters.Location location = 8;
inline bool Character::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool Character::has_location() const {
  return _internal_has_location();
}
inline void Character::clear_location() {
  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::sro::characters::Location& Character::_internal_location() const {
  const ::sro::characters::Location* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::sro::characters::Location&>(
      ::sro::characters::_Location_default_instance_);
}
inline const ::sro::characters::Location& Character::location() const {
  // @@protoc_insertion_point(field_get:sro.characters.Character.location)
  return _internal_location();
}
inline void Character::unsafe_arena_set_allocated_location(
    ::sro::characters::Location* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.characters.Character.location)
}
inline ::sro::characters::Location* Character::release_location() {
  
  ::sro::characters::Location* temp = location_;
  location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sro::characters::Location* Character::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:sro.characters.Character.location)
  
  ::sro::characters::Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::sro::characters::Location* Character::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::sro::characters::Location>(GetArenaForAllocation());
    location_ = p;
  }
  return location_;
}
inline ::sro::characters::Location* Character::mutable_location() {
  ::sro::characters::Location* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:sro.characters.Character.location)
  return _msg;
}
inline void Character::set_allocated_location(::sro::characters::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sro::characters::Location>::GetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:sro.characters.Character.location)
}

// -------------------------------------------------------------------

// Location

// string world = 1;
inline void Location::clear_world() {
  world_.ClearToEmpty();
}
inline const std::string& Location::world() const {
  // @@protoc_insertion_point(field_get:sro.characters.Location.world)
  return _internal_world();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Location::set_world(ArgT0&& arg0, ArgT... args) {
 
 world_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.characters.Location.world)
}
inline std::string* Location::mutable_world() {
  std::string* _s = _internal_mutable_world();
  // @@protoc_insertion_point(field_mutable:sro.characters.Location.world)
  return _s;
}
inline const std::string& Location::_internal_world() const {
  return world_.Get();
}
inline void Location::_internal_set_world(const std::string& value) {
  
  world_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Location::_internal_mutable_world() {
  
  return world_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Location::release_world() {
  // @@protoc_insertion_point(field_release:sro.characters.Location.world)
  return world_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Location::set_allocated_world(std::string* world) {
  if (world != nullptr) {
    
  } else {
    
  }
  world_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), world,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (world_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    world_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.characters.Location.world)
}

// float x = 2;
inline void Location::clear_x() {
  x_ = 0;
}
inline float Location::_internal_x() const {
  return x_;
}
inline float Location::x() const {
  // @@protoc_insertion_point(field_get:sro.characters.Location.x)
  return _internal_x();
}
inline void Location::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Location::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:sro.characters.Location.x)
}

// float y = 3;
inline void Location::clear_y() {
  y_ = 0;
}
inline float Location::_internal_y() const {
  return y_;
}
inline float Location::y() const {
  // @@protoc_insertion_point(field_get:sro.characters.Location.y)
  return _internal_y();
}
inline void Location::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Location::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:sro.characters.Location.y)
}

// float z = 4;
inline void Location::clear_z() {
  z_ = 0;
}
inline float Location::_internal_z() const {
  return z_;
}
inline float Location::z() const {
  // @@protoc_insertion_point(field_get:sro.characters.Location.z)
  return _internal_z();
}
inline void Location::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Location::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:sro.characters.Location.z)
}

// -------------------------------------------------------------------

// Characters

// repeated .sro.characters.Character characters = 1;
inline int Characters::_internal_characters_size() const {
  return characters_.size();
}
inline int Characters::characters_size() const {
  return _internal_characters_size();
}
inline void Characters::clear_characters() {
  characters_.Clear();
}
inline ::sro::characters::Character* Characters::mutable_characters(int index) {
  // @@protoc_insertion_point(field_mutable:sro.characters.Characters.characters)
  return characters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::characters::Character >*
Characters::mutable_characters() {
  // @@protoc_insertion_point(field_mutable_list:sro.characters.Characters.characters)
  return &characters_;
}
inline const ::sro::characters::Character& Characters::_internal_characters(int index) const {
  return characters_.Get(index);
}
inline const ::sro::characters::Character& Characters::characters(int index) const {
  // @@protoc_insertion_point(field_get:sro.characters.Characters.characters)
  return _internal_characters(index);
}
inline ::sro::characters::Character* Characters::_internal_add_characters() {
  return characters_.Add();
}
inline ::sro::characters::Character* Characters::add_characters() {
  ::sro::characters::Character* _add = _internal_add_characters();
  // @@protoc_insertion_point(field_add:sro.characters.Characters.characters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::characters::Character >&
Characters::characters() const {
  // @@protoc_insertion_point(field_list:sro.characters.Characters.characters)
  return characters_;
}

// -------------------------------------------------------------------

// Gender

// uint64 id = 1;
inline void Gender::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t Gender::_internal_id() const {
  return id_;
}
inline uint64_t Gender::id() const {
  // @@protoc_insertion_point(field_get:sro.characters.Gender.id)
  return _internal_id();
}
inline void Gender::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void Gender::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sro.characters.Gender.id)
}

// string name = 2;
inline void Gender::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Gender::name() const {
  // @@protoc_insertion_point(field_get:sro.characters.Gender.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Gender::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.characters.Gender.name)
}
inline std::string* Gender::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.characters.Gender.name)
  return _s;
}
inline const std::string& Gender::_internal_name() const {
  return name_.Get();
}
inline void Gender::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Gender::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Gender::release_name() {
  // @@protoc_insertion_point(field_release:sro.characters.Gender.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Gender::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.characters.Gender.name)
}

// -------------------------------------------------------------------

// Realm

// uint64 id = 1;
inline void Realm::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t Realm::_internal_id() const {
  return id_;
}
inline uint64_t Realm::id() const {
  // @@protoc_insertion_point(field_get:sro.characters.Realm.id)
  return _internal_id();
}
inline void Realm::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void Realm::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sro.characters.Realm.id)
}

// string name = 2;
inline void Realm::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Realm::name() const {
  // @@protoc_insertion_point(field_get:sro.characters.Realm.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Realm::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.characters.Realm.name)
}
inline std::string* Realm::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.characters.Realm.name)
  return _s;
}
inline const std::string& Realm::_internal_name() const {
  return name_.Get();
}
inline void Realm::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Realm::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Realm::release_name() {
  // @@protoc_insertion_point(field_release:sro.characters.Realm.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Realm::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.characters.Realm.name)
}

// -------------------------------------------------------------------

// Genders

// repeated .sro.characters.Gender genders = 1;
inline int Genders::_internal_genders_size() const {
  return genders_.size();
}
inline int Genders::genders_size() const {
  return _internal_genders_size();
}
inline void Genders::clear_genders() {
  genders_.Clear();
}
inline ::sro::characters::Gender* Genders::mutable_genders(int index) {
  // @@protoc_insertion_point(field_mutable:sro.characters.Genders.genders)
  return genders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::characters::Gender >*
Genders::mutable_genders() {
  // @@protoc_insertion_point(field_mutable_list:sro.characters.Genders.genders)
  return &genders_;
}
inline const ::sro::characters::Gender& Genders::_internal_genders(int index) const {
  return genders_.Get(index);
}
inline const ::sro::characters::Gender& Genders::genders(int index) const {
  // @@protoc_insertion_point(field_get:sro.characters.Genders.genders)
  return _internal_genders(index);
}
inline ::sro::characters::Gender* Genders::_internal_add_genders() {
  return genders_.Add();
}
inline ::sro::characters::Gender* Genders::add_genders() {
  ::sro::characters::Gender* _add = _internal_add_genders();
  // @@protoc_insertion_point(field_add:sro.characters.Genders.genders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::characters::Gender >&
Genders::genders() const {
  // @@protoc_insertion_point(field_list:sro.characters.Genders.genders)
  return genders_;
}

// -------------------------------------------------------------------

// Realms

// repeated .sro.characters.Realm realms = 1;
inline int Realms::_internal_realms_size() const {
  return realms_.size();
}
inline int Realms::realms_size() const {
  return _internal_realms_size();
}
inline void Realms::clear_realms() {
  realms_.Clear();
}
inline ::sro::characters::Realm* Realms::mutable_realms(int index) {
  // @@protoc_insertion_point(field_mutable:sro.characters.Realms.realms)
  return realms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::characters::Realm >*
Realms::mutable_realms() {
  // @@protoc_insertion_point(field_mutable_list:sro.characters.Realms.realms)
  return &realms_;
}
inline const ::sro::characters::Realm& Realms::_internal_realms(int index) const {
  return realms_.Get(index);
}
inline const ::sro::characters::Realm& Realms::realms(int index) const {
  // @@protoc_insertion_point(field_get:sro.characters.Realms.realms)
  return _internal_realms(index);
}
inline ::sro::characters::Realm* Realms::_internal_add_realms() {
  return realms_.Add();
}
inline ::sro::characters::Realm* Realms::add_realms() {
  ::sro::characters::Realm* _add = _internal_add_realms();
  // @@protoc_insertion_point(field_add:sro.characters.Realms.realms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::characters::Realm >&
Realms::realms() const {
  // @@protoc_insertion_point(field_list:sro.characters.Realms.realms)
  return realms_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace characters
}  // namespace sro

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_characters_2eproto
