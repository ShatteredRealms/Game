// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user.proto

#include "user.pb.h"
#include "user.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sro {
namespace accounts {

static const char* UserService_method_names[] = {
  "/sro.accounts.UserService/GetAll",
  "/sro.accounts.UserService/Get",
  "/sro.accounts.UserService/Edit",
  "/sro.accounts.UserService/ChangePassword",
  "/sro.accounts.UserService/Ban",
  "/sro.accounts.UserService/UnBan",
  "/sro.accounts.UserService/GetStatus",
  "/sro.accounts.UserService/SetStatus",
};

std::unique_ptr< UserService::Stub> UserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserService::Stub> stub(new UserService::Stub(channel, options));
  return stub;
}

UserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetAll_(UserService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(UserService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Edit_(UserService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangePassword_(UserService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ban_(UserService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnBan_(UserService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStatus_(UserService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetStatus_(UserService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserService::Stub::GetAll(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::accounts::GetAllUsersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sro::accounts::GetAllUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAll_, context, request, response);
}

void UserService::Stub::async::GetAll(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::accounts::GetAllUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sro::accounts::GetAllUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAll_, context, request, response, std::move(f));
}

void UserService::Stub::async::GetAll(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::accounts::GetAllUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::GetAllUsersResponse>* UserService::Stub::PrepareAsyncGetAllRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::accounts::GetAllUsersResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAll_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::GetAllUsersResponse>* UserService::Stub::AsyncGetAllRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::Get(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage& request, ::sro::accounts::GetUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::GetUserMessage, ::sro::accounts::GetUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void UserService::Stub::async::Get(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage* request, ::sro::accounts::GetUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::GetUserMessage, ::sro::accounts::GetUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void UserService::Stub::async::Get(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage* request, ::sro::accounts::GetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::GetUserResponse>* UserService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::accounts::GetUserResponse, ::sro::accounts::GetUserMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::GetUserResponse>* UserService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::Edit(::grpc::ClientContext* context, const ::sro::accounts::EditUserDetailsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::EditUserDetailsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Edit_, context, request, response);
}

void UserService::Stub::async::Edit(::grpc::ClientContext* context, const ::sro::accounts::EditUserDetailsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::EditUserDetailsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Edit_, context, request, response, std::move(f));
}

void UserService::Stub::async::Edit(::grpc::ClientContext* context, const ::sro::accounts::EditUserDetailsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Edit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UserService::Stub::PrepareAsyncEditRaw(::grpc::ClientContext* context, const ::sro::accounts::EditUserDetailsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::accounts::EditUserDetailsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Edit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UserService::Stub::AsyncEditRaw(::grpc::ClientContext* context, const ::sro::accounts::EditUserDetailsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEditRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::ChangePassword(::grpc::ClientContext* context, const ::sro::accounts::ChangePasswordRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::ChangePasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangePassword_, context, request, response);
}

void UserService::Stub::async::ChangePassword(::grpc::ClientContext* context, const ::sro::accounts::ChangePasswordRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::ChangePasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, std::move(f));
}

void UserService::Stub::async::ChangePassword(::grpc::ClientContext* context, const ::sro::accounts::ChangePasswordRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UserService::Stub::PrepareAsyncChangePasswordRaw(::grpc::ClientContext* context, const ::sro::accounts::ChangePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::accounts::ChangePasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangePassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UserService::Stub::AsyncChangePasswordRaw(::grpc::ClientContext* context, const ::sro::accounts::ChangePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangePasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::Ban(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::GetUserMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ban_, context, request, response);
}

void UserService::Stub::async::Ban(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::GetUserMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ban_, context, request, response, std::move(f));
}

void UserService::Stub::async::Ban(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ban_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UserService::Stub::PrepareAsyncBanRaw(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::accounts::GetUserMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ban_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UserService::Stub::AsyncBanRaw(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::UnBan(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::GetUserMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnBan_, context, request, response);
}

void UserService::Stub::async::UnBan(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::GetUserMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnBan_, context, request, response, std::move(f));
}

void UserService::Stub::async::UnBan(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnBan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UserService::Stub::PrepareAsyncUnBanRaw(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::accounts::GetUserMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnBan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UserService::Stub::AsyncUnBanRaw(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnBanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::GetStatus(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage& request, ::sro::accounts::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::GetUserMessage, ::sro::accounts::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStatus_, context, request, response);
}

void UserService::Stub::async::GetStatus(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage* request, ::sro::accounts::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::GetUserMessage, ::sro::accounts::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, std::move(f));
}

void UserService::Stub::async::GetStatus(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage* request, ::sro::accounts::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::StatusResponse>* UserService::Stub::PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::accounts::StatusResponse, ::sro::accounts::GetUserMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::accounts::StatusResponse>* UserService::Stub::AsyncGetStatusRaw(::grpc::ClientContext* context, const ::sro::accounts::GetUserMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::SetStatus(::grpc::ClientContext* context, const ::sro::accounts::StatusRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::accounts::StatusRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetStatus_, context, request, response);
}

void UserService::Stub::async::SetStatus(::grpc::ClientContext* context, const ::sro::accounts::StatusRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::accounts::StatusRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetStatus_, context, request, response, std::move(f));
}

void UserService::Stub::async::SetStatus(::grpc::ClientContext* context, const ::sro::accounts::StatusRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UserService::Stub::PrepareAsyncSetStatusRaw(::grpc::ClientContext* context, const ::sro::accounts::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::accounts::StatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UserService::Stub::AsyncSetStatusRaw(::grpc::ClientContext* context, const ::sro::accounts::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

UserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::google::protobuf::Empty, ::sro::accounts::GetAllUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sro::accounts::GetAllUsersResponse* resp) {
               return service->GetAll(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sro::accounts::GetUserMessage, ::sro::accounts::GetUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::GetUserMessage* req,
             ::sro::accounts::GetUserResponse* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sro::accounts::EditUserDetailsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::EditUserDetailsRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Edit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sro::accounts::ChangePasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::ChangePasswordRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ChangePassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sro::accounts::GetUserMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::GetUserMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->Ban(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sro::accounts::GetUserMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::GetUserMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->UnBan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sro::accounts::GetUserMessage, ::sro::accounts::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::GetUserMessage* req,
             ::sro::accounts::StatusResponse* resp) {
               return service->GetStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sro::accounts::StatusRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::accounts::StatusRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetStatus(ctx, req, resp);
             }, this)));
}

UserService::Service::~Service() {
}

::grpc::Status UserService::Service::GetAll(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::accounts::GetAllUsersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::Get(::grpc::ServerContext* context, const ::sro::accounts::GetUserMessage* request, ::sro::accounts::GetUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::Edit(::grpc::ServerContext* context, const ::sro::accounts::EditUserDetailsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::ChangePassword(::grpc::ServerContext* context, const ::sro::accounts::ChangePasswordRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::Ban(::grpc::ServerContext* context, const ::sro::accounts::GetUserMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::UnBan(::grpc::ServerContext* context, const ::sro::accounts::GetUserMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetStatus(::grpc::ServerContext* context, const ::sro::accounts::GetUserMessage* request, ::sro::accounts::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::SetStatus(::grpc::ServerContext* context, const ::sro::accounts::StatusRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sro
}  // namespace accounts

