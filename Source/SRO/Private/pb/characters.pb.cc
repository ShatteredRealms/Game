#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: characters.proto

#include "characters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sro {
namespace characters {
constexpr PlayTimeMessage::PlayTimeMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : character_id_(uint64_t{0u})
  , time_(uint64_t{0u}){}
struct PlayTimeMessageDefaultTypeInternal {
  constexpr PlayTimeMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayTimeMessageDefaultTypeInternal() {}
  union {
    PlayTimeMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayTimeMessageDefaultTypeInternal _PlayTimeMessage_default_instance_;
constexpr DeleteCharacterRequest::DeleteCharacterRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : character_id_(uint64_t{0u}){}
struct DeleteCharacterRequestDefaultTypeInternal {
  constexpr DeleteCharacterRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteCharacterRequestDefaultTypeInternal() {}
  union {
    DeleteCharacterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteCharacterRequestDefaultTypeInternal _DeleteCharacterRequest_default_instance_;
constexpr CreateCharacterRequest::CreateCharacterRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(uint64_t{0u})
  , gender_(uint64_t{0u})
  , realm_(uint64_t{0u}){}
struct CreateCharacterRequestDefaultTypeInternal {
  constexpr CreateCharacterRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateCharacterRequestDefaultTypeInternal() {}
  union {
    CreateCharacterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateCharacterRequestDefaultTypeInternal _CreateCharacterRequest_default_instance_;
constexpr UserTarget::UserTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(uint64_t{0u}){}
struct UserTargetDefaultTypeInternal {
  constexpr UserTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserTargetDefaultTypeInternal() {}
  union {
    UserTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserTargetDefaultTypeInternal _UserTarget_default_instance_;
constexpr CharacterTarget::CharacterTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : character_id_(uint64_t{0u}){}
struct CharacterTargetDefaultTypeInternal {
  constexpr CharacterTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CharacterTargetDefaultTypeInternal() {}
  union {
    CharacterTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CharacterTargetDefaultTypeInternal _CharacterTarget_default_instance_;
constexpr Character::Character(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_(nullptr)
  , name_(nullptr)
  , gender_(nullptr)
  , realm_(nullptr)
  , play_time_(nullptr)
  , location_(nullptr)
  , id_(uint64_t{0u}){}
struct CharacterDefaultTypeInternal {
  constexpr CharacterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CharacterDefaultTypeInternal() {}
  union {
    Character _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CharacterDefaultTypeInternal _Character_default_instance_;
constexpr Location::Location(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : world_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_(0)
  , y_(0)
  , z_(0){}
struct LocationDefaultTypeInternal {
  constexpr LocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocationDefaultTypeInternal _Location_default_instance_;
constexpr Characters::Characters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : characters_(){}
struct CharactersDefaultTypeInternal {
  constexpr CharactersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CharactersDefaultTypeInternal() {}
  union {
    Characters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CharactersDefaultTypeInternal _Characters_default_instance_;
constexpr Gender::Gender(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(uint64_t{0u}){}
struct GenderDefaultTypeInternal {
  constexpr GenderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenderDefaultTypeInternal() {}
  union {
    Gender _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenderDefaultTypeInternal _Gender_default_instance_;
constexpr Realm::Realm(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(uint64_t{0u}){}
struct RealmDefaultTypeInternal {
  constexpr RealmDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RealmDefaultTypeInternal() {}
  union {
    Realm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RealmDefaultTypeInternal _Realm_default_instance_;
constexpr Genders::Genders(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : genders_(){}
struct GendersDefaultTypeInternal {
  constexpr GendersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GendersDefaultTypeInternal() {}
  union {
    Genders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GendersDefaultTypeInternal _Genders_default_instance_;
constexpr Realms::Realms(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : realms_(){}
struct RealmsDefaultTypeInternal {
  constexpr RealmsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RealmsDefaultTypeInternal() {}
  union {
    Realms _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RealmsDefaultTypeInternal _Realms_default_instance_;
}  // namespace characters
}  // namespace sro
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_characters_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_characters_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_characters_2eproto = nullptr;

const uint32_t TableStruct_characters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::PlayTimeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::PlayTimeMessage, character_id_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::PlayTimeMessage, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::DeleteCharacterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::DeleteCharacterRequest, character_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::CreateCharacterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::CreateCharacterRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::CreateCharacterRequest, name_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::CreateCharacterRequest, gender_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::CreateCharacterRequest, realm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::UserTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::UserTarget, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::CharacterTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::CharacterTarget, character_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Character, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Character, id_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::Character, owner_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::Character, name_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::Character, gender_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::Character, realm_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::Character, play_time_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::Character, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Location, world_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::Location, x_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::Location, y_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::Location, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Characters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Characters, characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Gender, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Gender, id_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::Gender, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Realm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Realm, id_),
  PROTOBUF_FIELD_OFFSET(::sro::characters::Realm, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Genders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Genders, genders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Realms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::characters::Realms, realms_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sro::characters::PlayTimeMessage)},
  { 8, -1, -1, sizeof(::sro::characters::DeleteCharacterRequest)},
  { 15, -1, -1, sizeof(::sro::characters::CreateCharacterRequest)},
  { 25, -1, -1, sizeof(::sro::characters::UserTarget)},
  { 32, -1, -1, sizeof(::sro::characters::CharacterTarget)},
  { 39, -1, -1, sizeof(::sro::characters::Character)},
  { 52, -1, -1, sizeof(::sro::characters::Location)},
  { 62, -1, -1, sizeof(::sro::characters::Characters)},
  { 69, -1, -1, sizeof(::sro::characters::Gender)},
  { 77, -1, -1, sizeof(::sro::characters::Realm)},
  { 85, -1, -1, sizeof(::sro::characters::Genders)},
  { 92, -1, -1, sizeof(::sro::characters::Realms)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_PlayTimeMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_DeleteCharacterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_CreateCharacterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_UserTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_CharacterTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_Character_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_Characters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_Gender_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_Realm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_Genders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::characters::_Realms_default_instance_),
};

const char descriptor_table_protodef_characters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020characters.proto\022\016sro.characters\032\034goog"
  "le/api/annotations.proto\032\033google/protobu"
  "f/empty.proto\032\036google/protobuf/wrappers."
  "proto\"5\n\017PlayTimeMessage\022\024\n\014character_id"
  "\030\001 \001(\004\022\014\n\004time\030\002 \001(\004\".\n\026DeleteCharacterR"
  "equest\022\024\n\014character_id\030\001 \001(\004\"V\n\026CreateCh"
  "aracterRequest\022\017\n\007user_id\030\001 \001(\004\022\014\n\004name\030"
  "\002 \001(\t\022\016\n\006gender\030\003 \001(\004\022\r\n\005realm\030\004 \001(\004\"\035\n\n"
  "UserTarget\022\017\n\007user_id\030\001 \001(\004\"\'\n\017Character"
  "Target\022\024\n\014character_id\030\001 \001(\004\"\250\002\n\tCharact"
  "er\022\n\n\002id\030\001 \001(\004\022+\n\005owner\030\002 \001(\0132\034.google.p"
  "rotobuf.UInt64Value\022*\n\004name\030\003 \001(\0132\034.goog"
  "le.protobuf.StringValue\022,\n\006gender\030\004 \001(\0132"
  "\034.google.protobuf.UInt64Value\022+\n\005realm\030\005"
  " \001(\0132\034.google.protobuf.UInt64Value\022/\n\tpl"
  "ay_time\030\007 \001(\0132\034.google.protobuf.UInt64Va"
  "lue\022*\n\010location\030\010 \001(\0132\030.sro.characters.L"
  "ocation\":\n\010Location\022\r\n\005world\030\001 \001(\t\022\t\n\001x\030"
  "\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\";\n\nCharacter"
  "s\022-\n\ncharacters\030\001 \003(\0132\031.sro.characters.C"
  "haracter\"\"\n\006Gender\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002"
  " \001(\t\"!\n\005Realm\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\""
  "2\n\007Genders\022\'\n\007genders\030\001 \003(\0132\026.sro.charac"
  "ters.Gender\"/\n\006Realms\022%\n\006realms\030\001 \003(\0132\025."
  "sro.characters.Realm2\345\007\n\021CharactersServi"
  "ce\022U\n\rGetAllGenders\022\026.google.protobuf.Em"
  "pty\032\027.sro.characters.Genders\"\023\202\323\344\223\002\r\022\013/v"
  "1/genders\022R\n\014GetAllRealms\022\026.google.proto"
  "buf.Empty\032\026.sro.characters.Realms\"\022\202\323\344\223\002"
  "\014\022\n/v1/realms\022^\n\020GetAllCharacters\022\026.goog"
  "le.protobuf.Empty\032\032.sro.characters.Chara"
  "cters\"\026\202\323\344\223\002\020\022\016/v1/characters\022y\n\027GetAllC"
  "haractersForUser\022\032.sro.characters.UserTa"
  "rget\032\032.sro.characters.Characters\"&\202\323\344\223\002 "
  "\022\036/v1/users/{user_id}/characters\022q\n\014GetC"
  "haracter\022\037.sro.characters.CharacterTarge"
  "t\032\031.sro.characters.Character\"%\202\323\344\223\002\037\022\035/v"
  "1/characters/{character_id}\022\177\n\017CreateCha"
  "racter\022&.sro.characters.CreateCharacterR"
  "equest\032\031.sro.characters.Character\")\202\323\344\223\002"
  "#\"\036/v1/users/{user_id}/characters:\001*\022a\n\017"
  "DeleteCharacter\022\031.sro.characters.Charact"
  "er\032\026.google.protobuf.Empty\"\033\202\323\344\223\002\025*\023/v1/"
  "characters/{id}\022e\n\rEditCharacter\022\031.sro.c"
  "haracters.Character\032\031.sro.characters.Cha"
  "racter\"\036\202\323\344\223\002\030\032\023/v1/characters/{id}:\001*\022\213"
  "\001\n\024AddCharacterPlayTime\022\037.sro.characters"
  ".PlayTimeMessage\032\037.sro.characters.PlayTi"
  "meMessage\"1\202\323\344\223\002+\032&/v1/characters/{chara"
  "cter_id}/playtime:\001*B\010Z\006pkg/pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_characters_2eproto_deps[3] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_characters_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_characters_2eproto = {
  false, false, 1998, descriptor_table_protodef_characters_2eproto, "characters.proto", 
  &descriptor_table_characters_2eproto_once, descriptor_table_characters_2eproto_deps, 3, 12,
  schemas, file_default_instances, TableStruct_characters_2eproto::offsets,
  file_level_metadata_characters_2eproto, file_level_enum_descriptors_characters_2eproto, file_level_service_descriptors_characters_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_characters_2eproto_getter() {
  return &descriptor_table_characters_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_characters_2eproto(&descriptor_table_characters_2eproto);
namespace sro {
namespace characters {

// ===================================================================

class PlayTimeMessage::_Internal {
 public:
};

PlayTimeMessage::PlayTimeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.PlayTimeMessage)
}
PlayTimeMessage::PlayTimeMessage(const PlayTimeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&character_id_, &from.character_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:sro.characters.PlayTimeMessage)
}

inline void PlayTimeMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(time_));
}

PlayTimeMessage::~PlayTimeMessage() {
  // @@protoc_insertion_point(destructor:sro.characters.PlayTimeMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayTimeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayTimeMessage::ArenaDtor(void* object) {
  PlayTimeMessage* _this = reinterpret_cast< PlayTimeMessage* >(object);
  (void)_this;
}
void PlayTimeMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayTimeMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayTimeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.PlayTimeMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&character_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&character_id_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayTimeMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayTimeMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.PlayTimeMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 character_id = 1;
  if (this->_internal_character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_character_id(), target);
  }

  // uint64 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.PlayTimeMessage)
  return target;
}

size_t PlayTimeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.PlayTimeMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 character_id = 1;
  if (this->_internal_character_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_character_id());
  }

  // uint64 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayTimeMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayTimeMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayTimeMessage::GetClassData() const { return &_class_data_; }

void PlayTimeMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayTimeMessage *>(to)->MergeFrom(
      static_cast<const PlayTimeMessage &>(from));
}


void PlayTimeMessage::MergeFrom(const PlayTimeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.PlayTimeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayTimeMessage::CopyFrom(const PlayTimeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.PlayTimeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayTimeMessage::IsInitialized() const {
  return true;
}

void PlayTimeMessage::InternalSwap(PlayTimeMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayTimeMessage, time_)
      + sizeof(PlayTimeMessage::time_)
      - PROTOBUF_FIELD_OFFSET(PlayTimeMessage, character_id_)>(
          reinterpret_cast<char*>(&character_id_),
          reinterpret_cast<char*>(&other->character_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayTimeMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_characters_2eproto_getter, &descriptor_table_characters_2eproto_once,
      file_level_metadata_characters_2eproto[0]);
}

// ===================================================================

class DeleteCharacterRequest::_Internal {
 public:
};

DeleteCharacterRequest::DeleteCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.DeleteCharacterRequest)
}
DeleteCharacterRequest::DeleteCharacterRequest(const DeleteCharacterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  character_id_ = from.character_id_;
  // @@protoc_insertion_point(copy_constructor:sro.characters.DeleteCharacterRequest)
}

inline void DeleteCharacterRequest::SharedCtor() {
character_id_ = uint64_t{0u};
}

DeleteCharacterRequest::~DeleteCharacterRequest() {
  // @@protoc_insertion_point(destructor:sro.characters.DeleteCharacterRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteCharacterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteCharacterRequest::ArenaDtor(void* object) {
  DeleteCharacterRequest* _this = reinterpret_cast< DeleteCharacterRequest* >(object);
  (void)_this;
}
void DeleteCharacterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteCharacterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteCharacterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.DeleteCharacterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  character_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCharacterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteCharacterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.DeleteCharacterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 character_id = 1;
  if (this->_internal_character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_character_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.DeleteCharacterRequest)
  return target;
}

size_t DeleteCharacterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.DeleteCharacterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 character_id = 1;
  if (this->_internal_character_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_character_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteCharacterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteCharacterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteCharacterRequest::GetClassData() const { return &_class_data_; }

void DeleteCharacterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteCharacterRequest *>(to)->MergeFrom(
      static_cast<const DeleteCharacterRequest &>(from));
}


void DeleteCharacterRequest::MergeFrom(const DeleteCharacterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.DeleteCharacterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteCharacterRequest::CopyFrom(const DeleteCharacterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.DeleteCharacterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCharacterRequest::IsInitialized() const {
  return true;
}

void DeleteCharacterRequest::InternalSwap(DeleteCharacterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(character_id_, other->character_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCharacterRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_characters_2eproto_getter, &descriptor_table_characters_2eproto_once,
      file_level_metadata_characters_2eproto[1]);
}

// ===================================================================

class CreateCharacterRequest::_Internal {
 public:
};

CreateCharacterRequest::CreateCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.CreateCharacterRequest)
}
CreateCharacterRequest::CreateCharacterRequest(const CreateCharacterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&realm_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(realm_));
  // @@protoc_insertion_point(copy_constructor:sro.characters.CreateCharacterRequest)
}

inline void CreateCharacterRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&realm_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(realm_));
}

CreateCharacterRequest::~CreateCharacterRequest() {
  // @@protoc_insertion_point(destructor:sro.characters.CreateCharacterRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateCharacterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateCharacterRequest::ArenaDtor(void* object) {
  CreateCharacterRequest* _this = reinterpret_cast< CreateCharacterRequest* >(object);
  (void)_this;
}
void CreateCharacterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateCharacterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateCharacterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.CreateCharacterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&realm_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(realm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCharacterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.CreateCharacterRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 realm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          realm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateCharacterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.CreateCharacterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.CreateCharacterRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint64 gender = 3;
  if (this->_internal_gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gender(), target);
  }

  // uint64 realm = 4;
  if (this->_internal_realm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_realm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.CreateCharacterRequest)
  return target;
}

size_t CreateCharacterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.CreateCharacterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint64 gender = 3;
  if (this->_internal_gender() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gender());
  }

  // uint64 realm = 4;
  if (this->_internal_realm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_realm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateCharacterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateCharacterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateCharacterRequest::GetClassData() const { return &_class_data_; }

void CreateCharacterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateCharacterRequest *>(to)->MergeFrom(
      static_cast<const CreateCharacterRequest &>(from));
}


void CreateCharacterRequest::MergeFrom(const CreateCharacterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.CreateCharacterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  if (from._internal_realm() != 0) {
    _internal_set_realm(from._internal_realm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateCharacterRequest::CopyFrom(const CreateCharacterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.CreateCharacterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCharacterRequest::IsInitialized() const {
  return true;
}

void CreateCharacterRequest::InternalSwap(CreateCharacterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateCharacterRequest, realm_)
      + sizeof(CreateCharacterRequest::realm_)
      - PROTOBUF_FIELD_OFFSET(CreateCharacterRequest, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCharacterRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_characters_2eproto_getter, &descriptor_table_characters_2eproto_once,
      file_level_metadata_characters_2eproto[2]);
}

// ===================================================================

class UserTarget::_Internal {
 public:
};

UserTarget::UserTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.UserTarget)
}
UserTarget::UserTarget(const UserTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:sro.characters.UserTarget)
}

inline void UserTarget::SharedCtor() {
user_id_ = uint64_t{0u};
}

UserTarget::~UserTarget() {
  // @@protoc_insertion_point(destructor:sro.characters.UserTarget)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserTarget::ArenaDtor(void* object) {
  UserTarget* _this = reinterpret_cast< UserTarget* >(object);
  (void)_this;
}
void UserTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.UserTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.UserTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.UserTarget)
  return target;
}

size_t UserTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.UserTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserTarget::GetClassData() const { return &_class_data_; }

void UserTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserTarget *>(to)->MergeFrom(
      static_cast<const UserTarget &>(from));
}


void UserTarget::MergeFrom(const UserTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.UserTarget)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserTarget::CopyFrom(const UserTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.UserTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTarget::IsInitialized() const {
  return true;
}

void UserTarget::InternalSwap(UserTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserTarget::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_characters_2eproto_getter, &descriptor_table_characters_2eproto_once,
      file_level_metadata_characters_2eproto[3]);
}

// ===================================================================

class CharacterTarget::_Internal {
 public:
};

CharacterTarget::CharacterTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.CharacterTarget)
}
CharacterTarget::CharacterTarget(const CharacterTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  character_id_ = from.character_id_;
  // @@protoc_insertion_point(copy_constructor:sro.characters.CharacterTarget)
}

inline void CharacterTarget::SharedCtor() {
character_id_ = uint64_t{0u};
}

CharacterTarget::~CharacterTarget() {
  // @@protoc_insertion_point(destructor:sro.characters.CharacterTarget)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CharacterTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CharacterTarget::ArenaDtor(void* object) {
  CharacterTarget* _this = reinterpret_cast< CharacterTarget* >(object);
  (void)_this;
}
void CharacterTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CharacterTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CharacterTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.CharacterTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  character_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.CharacterTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 character_id = 1;
  if (this->_internal_character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_character_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.CharacterTarget)
  return target;
}

size_t CharacterTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.CharacterTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 character_id = 1;
  if (this->_internal_character_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_character_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CharacterTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterTarget::GetClassData() const { return &_class_data_; }

void CharacterTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CharacterTarget *>(to)->MergeFrom(
      static_cast<const CharacterTarget &>(from));
}


void CharacterTarget::MergeFrom(const CharacterTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.CharacterTarget)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterTarget::CopyFrom(const CharacterTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.CharacterTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterTarget::IsInitialized() const {
  return true;
}

void CharacterTarget::InternalSwap(CharacterTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(character_id_, other->character_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterTarget::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_characters_2eproto_getter, &descriptor_table_characters_2eproto_once,
      file_level_metadata_characters_2eproto[4]);
}

// ===================================================================

class Character::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& owner(const Character* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& name(const Character* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& gender(const Character* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& realm(const Character* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& play_time(const Character* msg);
  static const ::sro::characters::Location& location(const Character* msg);
};

const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
Character::_Internal::owner(const Character* msg) {
  return *msg->owner_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Character::_Internal::name(const Character* msg) {
  return *msg->name_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
Character::_Internal::gender(const Character* msg) {
  return *msg->gender_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
Character::_Internal::realm(const Character* msg) {
  return *msg->realm_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
Character::_Internal::play_time(const Character* msg) {
  return *msg->play_time_;
}
const ::sro::characters::Location&
Character::_Internal::location(const Character* msg) {
  return *msg->location_;
}
void Character::clear_owner() {
  if (GetArenaForAllocation() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
void Character::clear_name() {
  if (GetArenaForAllocation() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
}
void Character::clear_gender() {
  if (GetArenaForAllocation() == nullptr && gender_ != nullptr) {
    delete gender_;
  }
  gender_ = nullptr;
}
void Character::clear_realm() {
  if (GetArenaForAllocation() == nullptr && realm_ != nullptr) {
    delete realm_;
  }
  realm_ = nullptr;
}
void Character::clear_play_time() {
  if (GetArenaForAllocation() == nullptr && play_time_ != nullptr) {
    delete play_time_;
  }
  play_time_ = nullptr;
}
Character::Character(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.Character)
}
Character::Character(const Character& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner()) {
    owner_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  if (from._internal_has_name()) {
    name_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.name_);
  } else {
    name_ = nullptr;
  }
  if (from._internal_has_gender()) {
    gender_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.gender_);
  } else {
    gender_ = nullptr;
  }
  if (from._internal_has_realm()) {
    realm_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.realm_);
  } else {
    realm_ = nullptr;
  }
  if (from._internal_has_play_time()) {
    play_time_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.play_time_);
  } else {
    play_time_ = nullptr;
  }
  if (from._internal_has_location()) {
    location_ = new ::sro::characters::Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sro.characters.Character)
}

inline void Character::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&owner_)) + sizeof(id_));
}

Character::~Character() {
  // @@protoc_insertion_point(destructor:sro.characters.Character)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Character::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete owner_;
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete gender_;
  if (this != internal_default_instance()) delete realm_;
  if (this != internal_default_instance()) delete play_time_;
  if (this != internal_default_instance()) delete location_;
}

void Character::ArenaDtor(void* object) {
  Character* _this = reinterpret_cast< Character* >(object);
  (void)_this;
}
void Character::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Character::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Character::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.Character)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  if (GetArenaForAllocation() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && gender_ != nullptr) {
    delete gender_;
  }
  gender_ = nullptr;
  if (GetArenaForAllocation() == nullptr && realm_ != nullptr) {
    delete realm_;
  }
  realm_ = nullptr;
  if (GetArenaForAllocation() == nullptr && play_time_ != nullptr) {
    delete play_time_;
  }
  play_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Character::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value gender = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gender(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value realm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_realm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value play_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_play_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sro.characters.Location location = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Character::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.Character)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // .google.protobuf.UInt64Value owner = 2;
  if (this->_internal_has_owner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::owner(this), target, stream);
  }

  // .google.protobuf.StringValue name = 3;
  if (this->_internal_has_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::name(this), target, stream);
  }

  // .google.protobuf.UInt64Value gender = 4;
  if (this->_internal_has_gender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gender(this), target, stream);
  }

  // .google.protobuf.UInt64Value realm = 5;
  if (this->_internal_has_realm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::realm(this), target, stream);
  }

  // .google.protobuf.UInt64Value play_time = 7;
  if (this->_internal_has_play_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::play_time(this), target, stream);
  }

  // .sro.characters.Location location = 8;
  if (this->_internal_has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.Character)
  return target;
}

size_t Character::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.Character)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.UInt64Value owner = 2;
  if (this->_internal_has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // .google.protobuf.StringValue name = 3;
  if (this->_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);
  }

  // .google.protobuf.UInt64Value gender = 4;
  if (this->_internal_has_gender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gender_);
  }

  // .google.protobuf.UInt64Value realm = 5;
  if (this->_internal_has_realm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *realm_);
  }

  // .google.protobuf.UInt64Value play_time = 7;
  if (this->_internal_has_play_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *play_time_);
  }

  // .sro.characters.Location location = 8;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Character::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Character::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Character::GetClassData() const { return &_class_data_; }

void Character::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Character *>(to)->MergeFrom(
      static_cast<const Character &>(from));
}


void Character::MergeFrom(const Character& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.Character)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_owner()) {
    _internal_mutable_owner()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_owner());
  }
  if (from._internal_has_name()) {
    _internal_mutable_name()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_name());
  }
  if (from._internal_has_gender()) {
    _internal_mutable_gender()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_gender());
  }
  if (from._internal_has_realm()) {
    _internal_mutable_realm()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_realm());
  }
  if (from._internal_has_play_time()) {
    _internal_mutable_play_time()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_play_time());
  }
  if (from._internal_has_location()) {
    _internal_mutable_location()->::sro::characters::Location::MergeFrom(from._internal_location());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Character::CopyFrom(const Character& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.Character)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Character::IsInitialized() const {
  return true;
}

void Character::InternalSwap(Character* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Character, id_)
      + sizeof(Character::id_)
      - PROTOBUF_FIELD_OFFSET(Character, owner_)>(
          reinterpret_cast<char*>(&owner_),
          reinterpret_cast<char*>(&other->owner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Character::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_characters_2eproto_getter, &descriptor_table_characters_2eproto_once,
      file_level_metadata_characters_2eproto[5]);
}

// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  world_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    world_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_world().empty()) {
    world_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_world(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:sro.characters.Location)
}

inline void Location::SharedCtor() {
world_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  world_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:sro.characters.Location)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  world_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Location::ArenaDtor(void* object) {
  Location* _this = reinterpret_cast< Location* >(object);
  (void)_this;
}
void Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  world_.ClearToEmpty();
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string world = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_world();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.Location.world"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string world = 1;
  if (!this->_internal_world().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_world().data(), static_cast<int>(this->_internal_world().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.Location.world");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_world(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string world = 1;
  if (!this->_internal_world().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_world());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }

void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Location *>(to)->MergeFrom(
      static_cast<const Location &>(from));
}


void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.Location)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_world().empty()) {
    _internal_set_world(from._internal_world());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &world_, lhs_arena,
      &other->world_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, z_)
      + sizeof(Location::z_)
      - PROTOBUF_FIELD_OFFSET(Location, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_characters_2eproto_getter, &descriptor_table_characters_2eproto_once,
      file_level_metadata_characters_2eproto[6]);
}

// ===================================================================

class Characters::_Internal {
 public:
};

Characters::Characters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  characters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.Characters)
}
Characters::Characters(const Characters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      characters_(from.characters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.characters.Characters)
}

inline void Characters::SharedCtor() {
}

Characters::~Characters() {
  // @@protoc_insertion_point(destructor:sro.characters.Characters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Characters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Characters::ArenaDtor(void* object) {
  Characters* _this = reinterpret_cast< Characters* >(object);
  (void)_this;
}
void Characters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Characters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Characters::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.Characters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  characters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Characters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sro.characters.Character characters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Characters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.Characters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sro.characters.Character characters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_characters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_characters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.Characters)
  return target;
}

size_t Characters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.Characters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.characters.Character characters = 1;
  total_size += 1UL * this->_internal_characters_size();
  for (const auto& msg : this->characters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Characters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Characters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Characters::GetClassData() const { return &_class_data_; }

void Characters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Characters *>(to)->MergeFrom(
      static_cast<const Characters &>(from));
}


void Characters::MergeFrom(const Characters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.Characters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  characters_.MergeFrom(from.characters_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Characters::CopyFrom(const Characters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.Characters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Characters::IsInitialized() const {
  return true;
}

void Characters::InternalSwap(Characters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  characters_.InternalSwap(&other->characters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Characters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_characters_2eproto_getter, &descriptor_table_characters_2eproto_once,
      file_level_metadata_characters_2eproto[7]);
}

// ===================================================================

class Gender::_Internal {
 public:
};

Gender::Gender(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.Gender)
}
Gender::Gender(const Gender& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sro.characters.Gender)
}

inline void Gender::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = uint64_t{0u};
}

Gender::~Gender() {
  // @@protoc_insertion_point(destructor:sro.characters.Gender)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Gender::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Gender::ArenaDtor(void* object) {
  Gender* _this = reinterpret_cast< Gender* >(object);
  (void)_this;
}
void Gender::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Gender::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Gender::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.Gender)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gender::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.Gender.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gender::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.Gender)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.Gender.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.Gender)
  return target;
}

size_t Gender::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.Gender)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gender::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Gender::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gender::GetClassData() const { return &_class_data_; }

void Gender::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Gender *>(to)->MergeFrom(
      static_cast<const Gender &>(from));
}


void Gender::MergeFrom(const Gender& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.Gender)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gender::CopyFrom(const Gender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.Gender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gender::IsInitialized() const {
  return true;
}

void Gender::InternalSwap(Gender* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gender::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_characters_2eproto_getter, &descriptor_table_characters_2eproto_once,
      file_level_metadata_characters_2eproto[8]);
}

// ===================================================================

class Realm::_Internal {
 public:
};

Realm::Realm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.Realm)
}
Realm::Realm(const Realm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sro.characters.Realm)
}

inline void Realm::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = uint64_t{0u};
}

Realm::~Realm() {
  // @@protoc_insertion_point(destructor:sro.characters.Realm)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Realm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Realm::ArenaDtor(void* object) {
  Realm* _this = reinterpret_cast< Realm* >(object);
  (void)_this;
}
void Realm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Realm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Realm::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.Realm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Realm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sro.characters.Realm.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Realm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.Realm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sro.characters.Realm.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.Realm)
  return target;
}

size_t Realm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.Realm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Realm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Realm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Realm::GetClassData() const { return &_class_data_; }

void Realm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Realm *>(to)->MergeFrom(
      static_cast<const Realm &>(from));
}


void Realm::MergeFrom(const Realm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.Realm)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Realm::CopyFrom(const Realm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.Realm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Realm::IsInitialized() const {
  return true;
}

void Realm::InternalSwap(Realm* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Realm::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_characters_2eproto_getter, &descriptor_table_characters_2eproto_once,
      file_level_metadata_characters_2eproto[9]);
}

// ===================================================================

class Genders::_Internal {
 public:
};

Genders::Genders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  genders_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.Genders)
}
Genders::Genders(const Genders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      genders_(from.genders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.characters.Genders)
}

inline void Genders::SharedCtor() {
}

Genders::~Genders() {
  // @@protoc_insertion_point(destructor:sro.characters.Genders)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Genders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Genders::ArenaDtor(void* object) {
  Genders* _this = reinterpret_cast< Genders* >(object);
  (void)_this;
}
void Genders::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Genders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Genders::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.Genders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  genders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Genders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sro.characters.Gender genders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_genders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Genders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.Genders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sro.characters.Gender genders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_genders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_genders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.Genders)
  return target;
}

size_t Genders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.Genders)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.characters.Gender genders = 1;
  total_size += 1UL * this->_internal_genders_size();
  for (const auto& msg : this->genders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Genders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Genders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Genders::GetClassData() const { return &_class_data_; }

void Genders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Genders *>(to)->MergeFrom(
      static_cast<const Genders &>(from));
}


void Genders::MergeFrom(const Genders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.Genders)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  genders_.MergeFrom(from.genders_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Genders::CopyFrom(const Genders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.Genders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Genders::IsInitialized() const {
  return true;
}

void Genders::InternalSwap(Genders* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  genders_.InternalSwap(&other->genders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Genders::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_characters_2eproto_getter, &descriptor_table_characters_2eproto_once,
      file_level_metadata_characters_2eproto[10]);
}

// ===================================================================

class Realms::_Internal {
 public:
};

Realms::Realms(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  realms_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.characters.Realms)
}
Realms::Realms(const Realms& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      realms_(from.realms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.characters.Realms)
}

inline void Realms::SharedCtor() {
}

Realms::~Realms() {
  // @@protoc_insertion_point(destructor:sro.characters.Realms)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Realms::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Realms::ArenaDtor(void* object) {
  Realms* _this = reinterpret_cast< Realms* >(object);
  (void)_this;
}
void Realms::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Realms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Realms::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.characters.Realms)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  realms_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Realms::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sro.characters.Realm realms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_realms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Realms::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.characters.Realms)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sro.characters.Realm realms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_realms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_realms(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.characters.Realms)
  return target;
}

size_t Realms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.characters.Realms)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.characters.Realm realms = 1;
  total_size += 1UL * this->_internal_realms_size();
  for (const auto& msg : this->realms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Realms::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Realms::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Realms::GetClassData() const { return &_class_data_; }

void Realms::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Realms *>(to)->MergeFrom(
      static_cast<const Realms &>(from));
}


void Realms::MergeFrom(const Realms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.characters.Realms)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  realms_.MergeFrom(from.realms_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Realms::CopyFrom(const Realms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.characters.Realms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Realms::IsInitialized() const {
  return true;
}

void Realms::InternalSwap(Realms* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  realms_.InternalSwap(&other->realms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Realms::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_characters_2eproto_getter, &descriptor_table_characters_2eproto_once,
      file_level_metadata_characters_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace characters
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sro::characters::PlayTimeMessage* Arena::CreateMaybeMessage< ::sro::characters::PlayTimeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::PlayTimeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::DeleteCharacterRequest* Arena::CreateMaybeMessage< ::sro::characters::DeleteCharacterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::DeleteCharacterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::CreateCharacterRequest* Arena::CreateMaybeMessage< ::sro::characters::CreateCharacterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::CreateCharacterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::UserTarget* Arena::CreateMaybeMessage< ::sro::characters::UserTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::UserTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::CharacterTarget* Arena::CreateMaybeMessage< ::sro::characters::CharacterTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::CharacterTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::Character* Arena::CreateMaybeMessage< ::sro::characters::Character >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::Character >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::Location* Arena::CreateMaybeMessage< ::sro::characters::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::Characters* Arena::CreateMaybeMessage< ::sro::characters::Characters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::Characters >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::Gender* Arena::CreateMaybeMessage< ::sro::characters::Gender >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::Gender >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::Realm* Arena::CreateMaybeMessage< ::sro::characters::Realm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::Realm >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::Genders* Arena::CreateMaybeMessage< ::sro::characters::Genders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::Genders >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::characters::Realms* Arena::CreateMaybeMessage< ::sro::characters::Realms >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::characters::Realms >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
