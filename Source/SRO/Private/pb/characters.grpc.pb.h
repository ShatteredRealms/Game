// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: characters.proto
#ifndef GRPC_characters_2eproto__INCLUDED
#define GRPC_characters_2eproto__INCLUDED

#include "characters.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace sro {
namespace characters {

class CharactersService final {
 public:
  static constexpr char const* service_full_name() {
    return "sro.characters.CharactersService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetAllGenders(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::characters::Genders* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Genders>> AsyncGetAllGenders(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Genders>>(AsyncGetAllGendersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Genders>> PrepareAsyncGetAllGenders(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Genders>>(PrepareAsyncGetAllGendersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllRealms(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::characters::Realms* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Realms>> AsyncGetAllRealms(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Realms>>(AsyncGetAllRealmsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Realms>> PrepareAsyncGetAllRealms(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Realms>>(PrepareAsyncGetAllRealmsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::characters::Characters* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Characters>> AsyncGetAllCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Characters>>(AsyncGetAllCharactersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Characters>> PrepareAsyncGetAllCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Characters>>(PrepareAsyncGetAllCharactersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::characters::UserTarget& request, ::sro::characters::Characters* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Characters>> AsyncGetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::characters::UserTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Characters>>(AsyncGetAllCharactersForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Characters>> PrepareAsyncGetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::characters::UserTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Characters>>(PrepareAsyncGetAllCharactersForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCharacter(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::sro::characters::Character* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>> AsyncGetCharacter(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>>(AsyncGetCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>> PrepareAsyncGetCharacter(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>>(PrepareAsyncGetCharacterRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateCharacter(::grpc::ClientContext* context, const ::sro::characters::CreateCharacterRequest& request, ::sro::characters::Character* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>> AsyncCreateCharacter(::grpc::ClientContext* context, const ::sro::characters::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>>(AsyncCreateCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>> PrepareAsyncCreateCharacter(::grpc::ClientContext* context, const ::sro::characters::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>>(PrepareAsyncCreateCharacterRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteCharacter(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteCharacter(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteCharacter(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteCharacterRaw(context, request, cq));
    }
    virtual ::grpc::Status EditCharacter(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::sro::characters::Character* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>> AsyncEditCharacter(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>>(AsyncEditCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>> PrepareAsyncEditCharacter(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>>(PrepareAsyncEditCharacterRaw(context, request, cq));
    }
    // Adds the given amount of playtime to the character and returns the total playtime
    virtual ::grpc::Status AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::characters::PlayTimeMessage& request, ::sro::characters::PlayTimeMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::PlayTimeMessage>> AsyncAddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::characters::PlayTimeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::PlayTimeMessage>>(AsyncAddCharacterPlayTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::PlayTimeMessage>> PrepareAsyncAddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::characters::PlayTimeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::PlayTimeMessage>>(PrepareAsyncAddCharacterPlayTimeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetAllGenders(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Genders* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllGenders(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Genders* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllRealms(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Realms* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllRealms(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Realms* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Characters* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Characters* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::characters::UserTarget* request, ::sro::characters::Characters* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::characters::UserTarget* request, ::sro::characters::Characters* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCharacter(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget* request, ::sro::characters::Character* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCharacter(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget* request, ::sro::characters::Character* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::sro::characters::CreateCharacterRequest* request, ::sro::characters::Character* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::sro::characters::CreateCharacterRequest* request, ::sro::characters::Character* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteCharacter(::grpc::ClientContext* context, const ::sro::characters::Character* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCharacter(::grpc::ClientContext* context, const ::sro::characters::Character* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EditCharacter(::grpc::ClientContext* context, const ::sro::characters::Character* request, ::sro::characters::Character* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EditCharacter(::grpc::ClientContext* context, const ::sro::characters::Character* request, ::sro::characters::Character* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Adds the given amount of playtime to the character and returns the total playtime
      virtual void AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::characters::PlayTimeMessage* request, ::sro::characters::PlayTimeMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::characters::PlayTimeMessage* request, ::sro::characters::PlayTimeMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Genders>* AsyncGetAllGendersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Genders>* PrepareAsyncGetAllGendersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Realms>* AsyncGetAllRealmsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Realms>* PrepareAsyncGetAllRealmsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Characters>* AsyncGetAllCharactersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Characters>* PrepareAsyncGetAllCharactersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Characters>* AsyncGetAllCharactersForUserRaw(::grpc::ClientContext* context, const ::sro::characters::UserTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Characters>* PrepareAsyncGetAllCharactersForUserRaw(::grpc::ClientContext* context, const ::sro::characters::UserTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>* AsyncGetCharacterRaw(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>* PrepareAsyncGetCharacterRaw(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>* AsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::sro::characters::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>* PrepareAsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::sro::characters::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>* AsyncEditCharacterRaw(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::Character>* PrepareAsyncEditCharacterRaw(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::PlayTimeMessage>* AsyncAddCharacterPlayTimeRaw(::grpc::ClientContext* context, const ::sro::characters::PlayTimeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::characters::PlayTimeMessage>* PrepareAsyncAddCharacterPlayTimeRaw(::grpc::ClientContext* context, const ::sro::characters::PlayTimeMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetAllGenders(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::characters::Genders* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Genders>> AsyncGetAllGenders(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Genders>>(AsyncGetAllGendersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Genders>> PrepareAsyncGetAllGenders(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Genders>>(PrepareAsyncGetAllGendersRaw(context, request, cq));
    }
    ::grpc::Status GetAllRealms(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::characters::Realms* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Realms>> AsyncGetAllRealms(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Realms>>(AsyncGetAllRealmsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Realms>> PrepareAsyncGetAllRealms(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Realms>>(PrepareAsyncGetAllRealmsRaw(context, request, cq));
    }
    ::grpc::Status GetAllCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::characters::Characters* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Characters>> AsyncGetAllCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Characters>>(AsyncGetAllCharactersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Characters>> PrepareAsyncGetAllCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Characters>>(PrepareAsyncGetAllCharactersRaw(context, request, cq));
    }
    ::grpc::Status GetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::characters::UserTarget& request, ::sro::characters::Characters* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Characters>> AsyncGetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::characters::UserTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Characters>>(AsyncGetAllCharactersForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Characters>> PrepareAsyncGetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::characters::UserTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Characters>>(PrepareAsyncGetAllCharactersForUserRaw(context, request, cq));
    }
    ::grpc::Status GetCharacter(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::sro::characters::Character* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>> AsyncGetCharacter(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>>(AsyncGetCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>> PrepareAsyncGetCharacter(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>>(PrepareAsyncGetCharacterRaw(context, request, cq));
    }
    ::grpc::Status CreateCharacter(::grpc::ClientContext* context, const ::sro::characters::CreateCharacterRequest& request, ::sro::characters::Character* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>> AsyncCreateCharacter(::grpc::ClientContext* context, const ::sro::characters::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>>(AsyncCreateCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>> PrepareAsyncCreateCharacter(::grpc::ClientContext* context, const ::sro::characters::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>>(PrepareAsyncCreateCharacterRaw(context, request, cq));
    }
    ::grpc::Status DeleteCharacter(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteCharacter(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteCharacter(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteCharacterRaw(context, request, cq));
    }
    ::grpc::Status EditCharacter(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::sro::characters::Character* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>> AsyncEditCharacter(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>>(AsyncEditCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>> PrepareAsyncEditCharacter(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>>(PrepareAsyncEditCharacterRaw(context, request, cq));
    }
    ::grpc::Status AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::characters::PlayTimeMessage& request, ::sro::characters::PlayTimeMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::PlayTimeMessage>> AsyncAddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::characters::PlayTimeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::PlayTimeMessage>>(AsyncAddCharacterPlayTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::PlayTimeMessage>> PrepareAsyncAddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::characters::PlayTimeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::characters::PlayTimeMessage>>(PrepareAsyncAddCharacterPlayTimeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetAllGenders(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Genders* response, std::function<void(::grpc::Status)>) override;
      void GetAllGenders(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Genders* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllRealms(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Realms* response, std::function<void(::grpc::Status)>) override;
      void GetAllRealms(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Realms* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Characters* response, std::function<void(::grpc::Status)>) override;
      void GetAllCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Characters* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::characters::UserTarget* request, ::sro::characters::Characters* response, std::function<void(::grpc::Status)>) override;
      void GetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::characters::UserTarget* request, ::sro::characters::Characters* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCharacter(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget* request, ::sro::characters::Character* response, std::function<void(::grpc::Status)>) override;
      void GetCharacter(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget* request, ::sro::characters::Character* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateCharacter(::grpc::ClientContext* context, const ::sro::characters::CreateCharacterRequest* request, ::sro::characters::Character* response, std::function<void(::grpc::Status)>) override;
      void CreateCharacter(::grpc::ClientContext* context, const ::sro::characters::CreateCharacterRequest* request, ::sro::characters::Character* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteCharacter(::grpc::ClientContext* context, const ::sro::characters::Character* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteCharacter(::grpc::ClientContext* context, const ::sro::characters::Character* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EditCharacter(::grpc::ClientContext* context, const ::sro::characters::Character* request, ::sro::characters::Character* response, std::function<void(::grpc::Status)>) override;
      void EditCharacter(::grpc::ClientContext* context, const ::sro::characters::Character* request, ::sro::characters::Character* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::characters::PlayTimeMessage* request, ::sro::characters::PlayTimeMessage* response, std::function<void(::grpc::Status)>) override;
      void AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::characters::PlayTimeMessage* request, ::sro::characters::PlayTimeMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sro::characters::Genders>* AsyncGetAllGendersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::characters::Genders>* PrepareAsyncGetAllGendersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::characters::Realms>* AsyncGetAllRealmsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::characters::Realms>* PrepareAsyncGetAllRealmsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::characters::Characters>* AsyncGetAllCharactersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::characters::Characters>* PrepareAsyncGetAllCharactersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::characters::Characters>* AsyncGetAllCharactersForUserRaw(::grpc::ClientContext* context, const ::sro::characters::UserTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::characters::Characters>* PrepareAsyncGetAllCharactersForUserRaw(::grpc::ClientContext* context, const ::sro::characters::UserTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>* AsyncGetCharacterRaw(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>* PrepareAsyncGetCharacterRaw(::grpc::ClientContext* context, const ::sro::characters::CharacterTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>* AsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::sro::characters::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>* PrepareAsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::sro::characters::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>* AsyncEditCharacterRaw(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::characters::Character>* PrepareAsyncEditCharacterRaw(::grpc::ClientContext* context, const ::sro::characters::Character& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::characters::PlayTimeMessage>* AsyncAddCharacterPlayTimeRaw(::grpc::ClientContext* context, const ::sro::characters::PlayTimeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::characters::PlayTimeMessage>* PrepareAsyncAddCharacterPlayTimeRaw(::grpc::ClientContext* context, const ::sro::characters::PlayTimeMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllGenders_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllRealms_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllCharacters_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllCharactersForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_EditCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_AddCharacterPlayTime_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetAllGenders(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Genders* response);
    virtual ::grpc::Status GetAllRealms(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Realms* response);
    virtual ::grpc::Status GetAllCharacters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Characters* response);
    virtual ::grpc::Status GetAllCharactersForUser(::grpc::ServerContext* context, const ::sro::characters::UserTarget* request, ::sro::characters::Characters* response);
    virtual ::grpc::Status GetCharacter(::grpc::ServerContext* context, const ::sro::characters::CharacterTarget* request, ::sro::characters::Character* response);
    virtual ::grpc::Status CreateCharacter(::grpc::ServerContext* context, const ::sro::characters::CreateCharacterRequest* request, ::sro::characters::Character* response);
    virtual ::grpc::Status DeleteCharacter(::grpc::ServerContext* context, const ::sro::characters::Character* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status EditCharacter(::grpc::ServerContext* context, const ::sro::characters::Character* request, ::sro::characters::Character* response);
    // Adds the given amount of playtime to the character and returns the total playtime
    virtual ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* context, const ::sro::characters::PlayTimeMessage* request, ::sro::characters::PlayTimeMessage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllGenders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllGenders() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAllGenders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllGenders(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Genders* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllGenders(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::sro::characters::Genders>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllRealms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllRealms() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetAllRealms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRealms(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Realms* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllRealms(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::sro::characters::Realms>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllCharacters() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetAllCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCharacters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllCharacters(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::sro::characters::Characters>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllCharactersForUser() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetAllCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::characters::UserTarget* /*request*/, ::sro::characters::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllCharactersForUser(::grpc::ServerContext* context, ::sro::characters::UserTarget* request, ::grpc::ServerAsyncResponseWriter< ::sro::characters::Characters>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCharacter() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCharacter(::grpc::ServerContext* context, ::sro::characters::CharacterTarget* request, ::grpc::ServerAsyncResponseWriter< ::sro::characters::Character>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::CreateCharacterRequest* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCharacter(::grpc::ServerContext* context, ::sro::characters::CreateCharacterRequest* request, ::grpc::ServerAsyncResponseWriter< ::sro::characters::Character>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::Character* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCharacter(::grpc::ServerContext* context, ::sro::characters::Character* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EditCharacter() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::Character* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditCharacter(::grpc::ServerContext* context, ::sro::characters::Character* request, ::grpc::ServerAsyncResponseWriter< ::sro::characters::Character>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::characters::PlayTimeMessage* /*request*/, ::sro::characters::PlayTimeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCharacterPlayTime(::grpc::ServerContext* context, ::sro::characters::PlayTimeMessage* request, ::grpc::ServerAsyncResponseWriter< ::sro::characters::PlayTimeMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAllGenders<WithAsyncMethod_GetAllRealms<WithAsyncMethod_GetAllCharacters<WithAsyncMethod_GetAllCharactersForUser<WithAsyncMethod_GetCharacter<WithAsyncMethod_CreateCharacter<WithAsyncMethod_DeleteCharacter<WithAsyncMethod_EditCharacter<WithAsyncMethod_AddCharacterPlayTime<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetAllGenders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllGenders() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::sro::characters::Genders>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Genders* response) { return this->GetAllGenders(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllGenders(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::sro::characters::Genders>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::sro::characters::Genders>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllGenders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllGenders(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Genders* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllGenders(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Genders* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllRealms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllRealms() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::sro::characters::Realms>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Realms* response) { return this->GetAllRealms(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllRealms(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::sro::characters::Realms>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::sro::characters::Realms>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllRealms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRealms(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Realms* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllRealms(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Realms* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllCharacters() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::sro::characters::Characters>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::sro::characters::Characters* response) { return this->GetAllCharacters(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllCharacters(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::sro::characters::Characters>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::sro::characters::Characters>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCharacters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllCharacters(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Characters* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllCharactersForUser() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::characters::UserTarget, ::sro::characters::Characters>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::characters::UserTarget* request, ::sro::characters::Characters* response) { return this->GetAllCharactersForUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllCharactersForUser(
        ::grpc::MessageAllocator< ::sro::characters::UserTarget, ::sro::characters::Characters>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::characters::UserTarget, ::sro::characters::Characters>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::characters::UserTarget* /*request*/, ::sro::characters::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllCharactersForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::characters::UserTarget* /*request*/, ::sro::characters::Characters* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCharacter() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::characters::CharacterTarget, ::sro::characters::Character>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::characters::CharacterTarget* request, ::sro::characters::Character* response) { return this->GetCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_GetCharacter(
        ::grpc::MessageAllocator< ::sro::characters::CharacterTarget, ::sro::characters::Character>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::characters::CharacterTarget, ::sro::characters::Character>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::sro::characters::Character* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::characters::CreateCharacterRequest, ::sro::characters::Character>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::characters::CreateCharacterRequest* request, ::sro::characters::Character* response) { return this->CreateCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCharacter(
        ::grpc::MessageAllocator< ::sro::characters::CreateCharacterRequest, ::sro::characters::Character>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::characters::CreateCharacterRequest, ::sro::characters::Character>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::CreateCharacterRequest* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::characters::CreateCharacterRequest* /*request*/, ::sro::characters::Character* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::characters::Character, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::characters::Character* request, ::google::protobuf::Empty* response) { return this->DeleteCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCharacter(
        ::grpc::MessageAllocator< ::sro::characters::Character, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::characters::Character, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::Character* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::characters::Character* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EditCharacter() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::characters::Character, ::sro::characters::Character>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::characters::Character* request, ::sro::characters::Character* response) { return this->EditCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_EditCharacter(
        ::grpc::MessageAllocator< ::sro::characters::Character, ::sro::characters::Character>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::characters::Character, ::sro::characters::Character>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::Character* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::characters::Character* /*request*/, ::sro::characters::Character* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::characters::PlayTimeMessage, ::sro::characters::PlayTimeMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::characters::PlayTimeMessage* request, ::sro::characters::PlayTimeMessage* response) { return this->AddCharacterPlayTime(context, request, response); }));}
    void SetMessageAllocatorFor_AddCharacterPlayTime(
        ::grpc::MessageAllocator< ::sro::characters::PlayTimeMessage, ::sro::characters::PlayTimeMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::characters::PlayTimeMessage, ::sro::characters::PlayTimeMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::characters::PlayTimeMessage* /*request*/, ::sro::characters::PlayTimeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddCharacterPlayTime(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::characters::PlayTimeMessage* /*request*/, ::sro::characters::PlayTimeMessage* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetAllGenders<WithCallbackMethod_GetAllRealms<WithCallbackMethod_GetAllCharacters<WithCallbackMethod_GetAllCharactersForUser<WithCallbackMethod_GetCharacter<WithCallbackMethod_CreateCharacter<WithCallbackMethod_DeleteCharacter<WithCallbackMethod_EditCharacter<WithCallbackMethod_AddCharacterPlayTime<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAllGenders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllGenders() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAllGenders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllGenders(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Genders* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllRealms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllRealms() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetAllRealms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRealms(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Realms* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllCharacters() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetAllCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCharacters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllCharactersForUser() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetAllCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::characters::UserTarget* /*request*/, ::sro::characters::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCharacter() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::CreateCharacterRequest* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::Character* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EditCharacter() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::Character* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::characters::PlayTimeMessage* /*request*/, ::sro::characters::PlayTimeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllGenders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllGenders() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAllGenders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllGenders(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Genders* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllGenders(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllRealms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllRealms() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetAllRealms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRealms(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Realms* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllRealms(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllCharacters() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetAllCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCharacters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllCharacters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllCharactersForUser() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetAllCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::characters::UserTarget* /*request*/, ::sro::characters::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllCharactersForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCharacter() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::CreateCharacterRequest* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::Character* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EditCharacter() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::Character* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::characters::PlayTimeMessage* /*request*/, ::sro::characters::PlayTimeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCharacterPlayTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllGenders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllGenders() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllGenders(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllGenders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllGenders(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Genders* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllGenders(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllRealms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllRealms() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllRealms(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllRealms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRealms(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Realms* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllRealms(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllCharacters() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllCharacters(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCharacters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllCharacters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllCharactersForUser() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllCharactersForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::characters::UserTarget* /*request*/, ::sro::characters::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllCharactersForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCharacter() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCharacter(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCharacter(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::CreateCharacterRequest* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCharacter(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::Character* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EditCharacter() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EditCharacter(context, request, response); }));
    }
    ~WithRawCallbackMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::Character* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddCharacterPlayTime(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::characters::PlayTimeMessage* /*request*/, ::sro::characters::PlayTimeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddCharacterPlayTime(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllGenders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllGenders() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::sro::characters::Genders>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::sro::characters::Genders>* streamer) {
                       return this->StreamedGetAllGenders(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllGenders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllGenders(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Genders* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllGenders(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::sro::characters::Genders>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllRealms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllRealms() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::sro::characters::Realms>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::sro::characters::Realms>* streamer) {
                       return this->StreamedGetAllRealms(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllRealms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllRealms(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Realms* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllRealms(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::sro::characters::Realms>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllCharacters() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::sro::characters::Characters>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::sro::characters::Characters>* streamer) {
                       return this->StreamedGetAllCharacters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllCharacters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::characters::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllCharacters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::sro::characters::Characters>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllCharactersForUser() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::characters::UserTarget, ::sro::characters::Characters>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::characters::UserTarget, ::sro::characters::Characters>* streamer) {
                       return this->StreamedGetAllCharactersForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::characters::UserTarget* /*request*/, ::sro::characters::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllCharactersForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::characters::UserTarget,::sro::characters::Characters>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCharacter() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::characters::CharacterTarget, ::sro::characters::Character>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::characters::CharacterTarget, ::sro::characters::Character>* streamer) {
                       return this->StreamedGetCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::CharacterTarget* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::characters::CharacterTarget,::sro::characters::Character>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::characters::CreateCharacterRequest, ::sro::characters::Character>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::characters::CreateCharacterRequest, ::sro::characters::Character>* streamer) {
                       return this->StreamedCreateCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::CreateCharacterRequest* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::characters::CreateCharacterRequest,::sro::characters::Character>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::characters::Character, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::characters::Character, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::Character* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::characters::Character,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EditCharacter() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::characters::Character, ::sro::characters::Character>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::characters::Character, ::sro::characters::Character>* streamer) {
                       return this->StreamedEditCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::characters::Character* /*request*/, ::sro::characters::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEditCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::characters::Character,::sro::characters::Character>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::characters::PlayTimeMessage, ::sro::characters::PlayTimeMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::characters::PlayTimeMessage, ::sro::characters::PlayTimeMessage>* streamer) {
                       return this->StreamedAddCharacterPlayTime(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::characters::PlayTimeMessage* /*request*/, ::sro::characters::PlayTimeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddCharacterPlayTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::characters::PlayTimeMessage,::sro::characters::PlayTimeMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAllGenders<WithStreamedUnaryMethod_GetAllRealms<WithStreamedUnaryMethod_GetAllCharacters<WithStreamedUnaryMethod_GetAllCharactersForUser<WithStreamedUnaryMethod_GetCharacter<WithStreamedUnaryMethod_CreateCharacter<WithStreamedUnaryMethod_DeleteCharacter<WithStreamedUnaryMethod_EditCharacter<WithStreamedUnaryMethod_AddCharacterPlayTime<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAllGenders<WithStreamedUnaryMethod_GetAllRealms<WithStreamedUnaryMethod_GetAllCharacters<WithStreamedUnaryMethod_GetAllCharactersForUser<WithStreamedUnaryMethod_GetCharacter<WithStreamedUnaryMethod_CreateCharacter<WithStreamedUnaryMethod_DeleteCharacter<WithStreamedUnaryMethod_EditCharacter<WithStreamedUnaryMethod_AddCharacterPlayTime<Service > > > > > > > > > StreamedService;
};

}  // namespace characters
}  // namespace sro


#endif  // GRPC_characters_2eproto__INCLUDED
