// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chat.proto

#include "chat.pb.h"
#include "chat.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sro {
namespace chat {

static const char* ChatService_method_names[] = {
  "/sro.chat.ChatService/ConnectChannel",
  "/sro.chat.ChatService/ConnectDirectMessage",
  "/sro.chat.ChatService/SendChatMessage",
  "/sro.chat.ChatService/SendDirectMessage",
  "/sro.chat.ChatService/GetChannel",
  "/sro.chat.ChatService/CreateChannel",
  "/sro.chat.ChatService/DeleteChannel",
  "/sro.chat.ChatService/EditChannel",
  "/sro.chat.ChatService/AllChatChannels",
};

std::unique_ptr< ChatService::Stub> ChatService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChatService::Stub> stub(new ChatService::Stub(channel, options));
  return stub;
}

ChatService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ConnectChannel_(ChatService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ConnectDirectMessage_(ChatService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendChatMessage_(ChatService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendDirectMessage_(ChatService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChannel_(ChatService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateChannel_(ChatService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteChannel_(ChatService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EditChannel_(ChatService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AllChatChannels_(ChatService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::sro::chat::ChatMessage>* ChatService::Stub::ConnectChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChannelIdMessage& request) {
  return ::grpc::internal::ClientReaderFactory< ::sro::chat::ChatMessage>::Create(channel_.get(), rpcmethod_ConnectChannel_, context, request);
}

void ChatService::Stub::async::ConnectChannel(::grpc::ClientContext* context, const ::sro::chat::ChannelIdMessage* request, ::grpc::ClientReadReactor< ::sro::chat::ChatMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sro::chat::ChatMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_ConnectChannel_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>* ChatService::Stub::AsyncConnectChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChannelIdMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sro::chat::ChatMessage>::Create(channel_.get(), cq, rpcmethod_ConnectChannel_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>* ChatService::Stub::PrepareAsyncConnectChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChannelIdMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sro::chat::ChatMessage>::Create(channel_.get(), cq, rpcmethod_ConnectChannel_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sro::chat::ChatMessage>* ChatService::Stub::ConnectDirectMessageRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sro::chat::ChatMessage>::Create(channel_.get(), rpcmethod_ConnectDirectMessage_, context, request);
}

void ChatService::Stub::async::ConnectDirectMessage(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::sro::chat::ChatMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sro::chat::ChatMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_ConnectDirectMessage_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>* ChatService::Stub::AsyncConnectDirectMessageRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sro::chat::ChatMessage>::Create(channel_.get(), cq, rpcmethod_ConnectDirectMessage_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>* ChatService::Stub::PrepareAsyncConnectDirectMessageRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sro::chat::ChatMessage>::Create(channel_.get(), cq, rpcmethod_ConnectDirectMessage_, context, request, false, nullptr);
}

::grpc::Status ChatService::Stub::SendChatMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::chat::SendChatMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendChatMessage_, context, request, response);
}

void ChatService::Stub::async::SendChatMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::chat::SendChatMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendChatMessage_, context, request, response, std::move(f));
}

void ChatService::Stub::async::SendChatMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendChatMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::PrepareAsyncSendChatMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::chat::SendChatMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendChatMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::AsyncSendChatMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendChatMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::chat::SendDirectMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendDirectMessage_, context, request, response);
}

void ChatService::Stub::async::SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::chat::SendDirectMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendDirectMessage_, context, request, response, std::move(f));
}

void ChatService::Stub::async::SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendDirectMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::PrepareAsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::chat::SendDirectMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendDirectMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::AsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendDirectMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::GetChannel(::grpc::ClientContext* context, const ::sro::chat::ChannelIdMessage& request, ::sro::chat::ChatChannel* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::chat::ChannelIdMessage, ::sro::chat::ChatChannel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChannel_, context, request, response);
}

void ChatService::Stub::async::GetChannel(::grpc::ClientContext* context, const ::sro::chat::ChannelIdMessage* request, ::sro::chat::ChatChannel* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::chat::ChannelIdMessage, ::sro::chat::ChatChannel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChannel_, context, request, response, std::move(f));
}

void ChatService::Stub::async::GetChannel(::grpc::ClientContext* context, const ::sro::chat::ChannelIdMessage* request, ::sro::chat::ChatChannel* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* ChatService::Stub::PrepareAsyncGetChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChannelIdMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::chat::ChatChannel, ::sro::chat::ChannelIdMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* ChatService::Stub::AsyncGetChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChannelIdMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::CreateChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::chat::CreateChannelMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateChannel_, context, request, response);
}

void ChatService::Stub::async::CreateChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::chat::CreateChannelMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChannel_, context, request, response, std::move(f));
}

void ChatService::Stub::async::CreateChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::PrepareAsyncCreateChannelRaw(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::chat::CreateChannelMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::AsyncCreateChannelRaw(::grpc::ClientContext* context, const ::sro::chat::CreateChannelMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::DeleteChannel(::grpc::ClientContext* context, const ::sro::chat::ChannelIdMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::chat::ChannelIdMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteChannel_, context, request, response);
}

void ChatService::Stub::async::DeleteChannel(::grpc::ClientContext* context, const ::sro::chat::ChannelIdMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::chat::ChannelIdMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteChannel_, context, request, response, std::move(f));
}

void ChatService::Stub::async::DeleteChannel(::grpc::ClientContext* context, const ::sro::chat::ChannelIdMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::PrepareAsyncDeleteChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChannelIdMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::chat::ChannelIdMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::AsyncDeleteChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ChannelIdMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::EditChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::chat::UpdateChatChannelRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EditChannel_, context, request, response);
}

void ChatService::Stub::async::EditChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::chat::UpdateChatChannelRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditChannel_, context, request, response, std::move(f));
}

void ChatService::Stub::async::EditChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::PrepareAsyncEditChannelRaw(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::chat::UpdateChatChannelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EditChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::AsyncEditChannelRaw(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEditChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::AllChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::chat::ChatChannels* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sro::chat::ChatChannels, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AllChatChannels_, context, request, response);
}

void ChatService::Stub::async::AllChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sro::chat::ChatChannels, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllChatChannels_, context, request, response, std::move(f));
}

void ChatService::Stub::async::AllChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllChatChannels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>* ChatService::Stub::PrepareAsyncAllChatChannelsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::chat::ChatChannels, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AllChatChannels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>* ChatService::Stub::AsyncAllChatChannelsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAllChatChannelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChatService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ChatService::Service, ::sro::chat::ChannelIdMessage, ::sro::chat::ChatMessage>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::chat::ChannelIdMessage* req,
             ::grpc::ServerWriter<::sro::chat::ChatMessage>* writer) {
               return service->ConnectChannel(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ChatService::Service, ::google::protobuf::Empty, ::sro::chat::ChatMessage>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sro::chat::ChatMessage>* writer) {
               return service->ConnectDirectMessage(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::chat::SendChatMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::chat::SendChatMessageRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SendChatMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::chat::SendDirectMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::chat::SendDirectMessageRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SendDirectMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::chat::ChannelIdMessage, ::sro::chat::ChatChannel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::chat::ChannelIdMessage* req,
             ::sro::chat::ChatChannel* resp) {
               return service->GetChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::chat::CreateChannelMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::chat::CreateChannelMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->CreateChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::chat::ChannelIdMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::chat::ChannelIdMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::chat::UpdateChatChannelRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::chat::UpdateChatChannelRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->EditChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::google::protobuf::Empty, ::sro::chat::ChatChannels, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sro::chat::ChatChannels* resp) {
               return service->AllChatChannels(ctx, req, resp);
             }, this)));
}

ChatService::Service::~Service() {
}

::grpc::Status ChatService::Service::ConnectChannel(::grpc::ServerContext* context, const ::sro::chat::ChannelIdMessage* request, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::ConnectDirectMessage(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::SendChatMessage(::grpc::ServerContext* context, const ::sro::chat::SendChatMessageRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::SendDirectMessage(::grpc::ServerContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::GetChannel(::grpc::ServerContext* context, const ::sro::chat::ChannelIdMessage* request, ::sro::chat::ChatChannel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::CreateChannel(::grpc::ServerContext* context, const ::sro::chat::CreateChannelMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::DeleteChannel(::grpc::ServerContext* context, const ::sro::chat::ChannelIdMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::EditChannel(::grpc::ServerContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::AllChatChannels(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sro
}  // namespace chat

