#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authorization.proto

#include "authorization.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sro {
namespace accounts {
constexpr IDMessage::IDMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(uint64_t{0u}){}
struct IDMessageDefaultTypeInternal {
  constexpr IDMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IDMessageDefaultTypeInternal() {}
  union {
    IDMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IDMessageDefaultTypeInternal _IDMessage_default_instance_;
constexpr Permission::Permission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permission_(nullptr){}
struct PermissionDefaultTypeInternal {
  constexpr PermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PermissionDefaultTypeInternal() {}
  union {
    Permission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PermissionDefaultTypeInternal _Permission_default_instance_;
constexpr UserPermission::UserPermission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permission_(nullptr)
  , other_(false){}
struct UserPermissionDefaultTypeInternal {
  constexpr UserPermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserPermissionDefaultTypeInternal() {}
  union {
    UserPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserPermissionDefaultTypeInternal _UserPermission_default_instance_;
constexpr UserPermissions::UserPermissions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permissions_(){}
struct UserPermissionsDefaultTypeInternal {
  constexpr UserPermissionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserPermissionsDefaultTypeInternal() {}
  union {
    UserPermissions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserPermissionsDefaultTypeInternal _UserPermissions_default_instance_;
constexpr UserRole::UserRole(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permissions_()
  , name_(nullptr)
  , id_(uint64_t{0u}){}
struct UserRoleDefaultTypeInternal {
  constexpr UserRoleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserRoleDefaultTypeInternal() {}
  union {
    UserRole _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserRoleDefaultTypeInternal _UserRole_default_instance_;
constexpr UserRoles::UserRoles(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_(){}
struct UserRolesDefaultTypeInternal {
  constexpr UserRolesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserRolesDefaultTypeInternal() {}
  union {
    UserRoles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserRolesDefaultTypeInternal _UserRoles_default_instance_;
constexpr AuthorizationMessage::AuthorizationMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_()
  , permissions_()
  , user_id_(uint64_t{0u}){}
struct AuthorizationMessageDefaultTypeInternal {
  constexpr AuthorizationMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthorizationMessageDefaultTypeInternal() {}
  union {
    AuthorizationMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthorizationMessageDefaultTypeInternal _AuthorizationMessage_default_instance_;
}  // namespace accounts
}  // namespace sro
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_authorization_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_authorization_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_authorization_2eproto = nullptr;

const uint32_t TableStruct_authorization_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::accounts::IDMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::accounts::IDMessage, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::accounts::Permission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::accounts::Permission, permission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::accounts::UserPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::accounts::UserPermission, permission_),
  PROTOBUF_FIELD_OFFSET(::sro::accounts::UserPermission, other_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::accounts::UserPermissions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::accounts::UserPermissions, permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::accounts::UserRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::accounts::UserRole, id_),
  PROTOBUF_FIELD_OFFSET(::sro::accounts::UserRole, name_),
  PROTOBUF_FIELD_OFFSET(::sro::accounts::UserRole, permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::accounts::UserRoles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::accounts::UserRoles, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sro::accounts::AuthorizationMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sro::accounts::AuthorizationMessage, user_id_),
  PROTOBUF_FIELD_OFFSET(::sro::accounts::AuthorizationMessage, roles_),
  PROTOBUF_FIELD_OFFSET(::sro::accounts::AuthorizationMessage, permissions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sro::accounts::IDMessage)},
  { 7, -1, -1, sizeof(::sro::accounts::Permission)},
  { 14, -1, -1, sizeof(::sro::accounts::UserPermission)},
  { 22, -1, -1, sizeof(::sro::accounts::UserPermissions)},
  { 29, -1, -1, sizeof(::sro::accounts::UserRole)},
  { 38, -1, -1, sizeof(::sro::accounts::UserRoles)},
  { 45, -1, -1, sizeof(::sro::accounts::AuthorizationMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::accounts::_IDMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::accounts::_Permission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::accounts::_UserPermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::accounts::_UserPermissions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::accounts::_UserRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::accounts::_UserRoles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sro::accounts::_AuthorizationMessage_default_instance_),
};

const char descriptor_table_protodef_authorization_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023authorization.proto\022\014sro.accounts\032\034goo"
  "gle/api/annotations.proto\032\033google/protob"
  "uf/empty.proto\032\036google/protobuf/wrappers"
  ".proto\"\027\n\tIDMessage\022\n\n\002id\030\001 \001(\004\">\n\nPermi"
  "ssion\0220\n\npermission\030\001 \001(\0132\034.google.proto"
  "buf.StringValue\"Q\n\016UserPermission\0220\n\nper"
  "mission\030\001 \001(\0132\034.google.protobuf.StringVa"
  "lue\022\r\n\005other\030\002 \001(\010\"D\n\017UserPermissions\0221\n"
  "\013permissions\030\001 \003(\0132\034.sro.accounts.UserPe"
  "rmission\"u\n\010UserRole\022\n\n\002id\030\001 \001(\004\022*\n\004name"
  "\030\002 \001(\0132\034.google.protobuf.StringValue\0221\n\013"
  "permissions\030\003 \003(\0132\034.sro.accounts.UserPer"
  "mission\"2\n\tUserRoles\022%\n\005roles\030\001 \003(\0132\026.sr"
  "o.accounts.UserRole\"\201\001\n\024AuthorizationMes"
  "sage\022\017\n\007user_id\030\001 \001(\004\022%\n\005roles\030\002 \003(\0132\026.s"
  "ro.accounts.UserRole\0221\n\013permissions\030\003 \003("
  "\0132\034.sro.accounts.UserPermission2\337\t\n\024Auth"
  "orizationService\022u\n\020GetAuthorization\022\027.s"
  "ro.accounts.IDMessage\032\".sro.accounts.Aut"
  "horizationMessage\"$\202\323\344\223\002\036\022\034/v1/users/{id"
  "}/authorization\022\200\001\n\020AddAuthorization\022\".s"
  "ro.accounts.AuthorizationMessage\032\026.googl"
  "e.protobuf.Empty\"0\202\323\344\223\002*\"%/v1/users/{use"
  "r_id}/authorization/add:\001*\022\206\001\n\023RemoveAut"
  "horization\022\".sro.accounts.AuthorizationM"
  "essage\032\026.google.protobuf.Empty\"3\202\323\344\223\002-\"("
  "/v1/users/{user_id}/authorization/remove"
  ":\001*\022\\\n\010GetRoles\022\026.google.protobuf.Empty\032"
  "\027.sro.accounts.UserRoles\"\037\202\323\344\223\002\031\022\027/v1/au"
  "thorization/roles\022`\n\007GetRole\022\027.sro.accou"
  "nts.IDMessage\032\026.sro.accounts.UserRole\"$\202"
  "\323\344\223\002\036\022\034/v1/authorization/roles/{id}\022`\n\nC"
  "reateRole\022\026.sro.accounts.UserRole\032\026.goog"
  "le.protobuf.Empty\"\"\202\323\344\223\002\034\"\027/v1/authoriza"
  "tion/roles:\001*\022c\n\010EditRole\022\026.sro.accounts"
  ".UserRole\032\026.google.protobuf.Empty\"\'\202\323\344\223\002"
  "!\032\034/v1/authorization/roles/{id}:\001*\022b\n\nDe"
  "leteRole\022\026.sro.accounts.UserRole\032\026.googl"
  "e.protobuf.Empty\"$\202\323\344\223\002\036*\034/v1/authorizat"
  "ion/roles/{id}\022q\n\021GetAllPermissions\022\026.go"
  "ogle.protobuf.Empty\032\035.sro.accounts.UserP"
  "ermissions\"%\202\323\344\223\002\037\022\035/v1/authorization/pe"
  "rmissions\022r\n\024SubscribeUserUpdates\022\026.goog"
  "le.protobuf.Empty\032\027.sro.accounts.IDMessa"
  "ge\"\'\202\323\344\223\002!\022\037/v1/authorization/updates/us"
  "ers0\001\022r\n\024SubscribeRoleUpdates\022\026.google.p"
  "rotobuf.Empty\032\027.sro.accounts.IDMessage\"\'"
  "\202\323\344\223\002!\022\037/v1/authorization/updates/roles0"
  "\001B\010Z\006pkg/pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_authorization_2eproto_deps[3] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_authorization_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_authorization_2eproto = {
  false, false, 1939, descriptor_table_protodef_authorization_2eproto, "authorization.proto", 
  &descriptor_table_authorization_2eproto_once, descriptor_table_authorization_2eproto_deps, 3, 7,
  schemas, file_default_instances, TableStruct_authorization_2eproto::offsets,
  file_level_metadata_authorization_2eproto, file_level_enum_descriptors_authorization_2eproto, file_level_service_descriptors_authorization_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_authorization_2eproto_getter() {
  return &descriptor_table_authorization_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_authorization_2eproto(&descriptor_table_authorization_2eproto);
namespace sro {
namespace accounts {

// ===================================================================

class IDMessage::_Internal {
 public:
};

IDMessage::IDMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.accounts.IDMessage)
}
IDMessage::IDMessage(const IDMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sro.accounts.IDMessage)
}

inline void IDMessage::SharedCtor() {
id_ = uint64_t{0u};
}

IDMessage::~IDMessage() {
  // @@protoc_insertion_point(destructor:sro.accounts.IDMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IDMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IDMessage::ArenaDtor(void* object) {
  IDMessage* _this = reinterpret_cast< IDMessage* >(object);
  (void)_this;
}
void IDMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IDMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IDMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.accounts.IDMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IDMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IDMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.accounts.IDMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.accounts.IDMessage)
  return target;
}

size_t IDMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.accounts.IDMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IDMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IDMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IDMessage::GetClassData() const { return &_class_data_; }

void IDMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IDMessage *>(to)->MergeFrom(
      static_cast<const IDMessage &>(from));
}


void IDMessage::MergeFrom(const IDMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.accounts.IDMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IDMessage::CopyFrom(const IDMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.accounts.IDMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDMessage::IsInitialized() const {
  return true;
}

void IDMessage::InternalSwap(IDMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IDMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_authorization_2eproto_getter, &descriptor_table_authorization_2eproto_once,
      file_level_metadata_authorization_2eproto[0]);
}

// ===================================================================

class Permission::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& permission(const Permission* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
Permission::_Internal::permission(const Permission* msg) {
  return *msg->permission_;
}
void Permission::clear_permission() {
  if (GetArenaForAllocation() == nullptr && permission_ != nullptr) {
    delete permission_;
  }
  permission_ = nullptr;
}
Permission::Permission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.accounts.Permission)
}
Permission::Permission(const Permission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_permission()) {
    permission_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.permission_);
  } else {
    permission_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sro.accounts.Permission)
}

inline void Permission::SharedCtor() {
permission_ = nullptr;
}

Permission::~Permission() {
  // @@protoc_insertion_point(destructor:sro.accounts.Permission)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Permission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete permission_;
}

void Permission::ArenaDtor(void* object) {
  Permission* _this = reinterpret_cast< Permission* >(object);
  (void)_this;
}
void Permission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Permission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Permission::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.accounts.Permission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && permission_ != nullptr) {
    delete permission_;
  }
  permission_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Permission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue permission = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Permission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.accounts.Permission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue permission = 1;
  if (this->_internal_has_permission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::permission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.accounts.Permission)
  return target;
}

size_t Permission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.accounts.Permission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue permission = 1;
  if (this->_internal_has_permission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *permission_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Permission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Permission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Permission::GetClassData() const { return &_class_data_; }

void Permission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Permission *>(to)->MergeFrom(
      static_cast<const Permission &>(from));
}


void Permission::MergeFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.accounts.Permission)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_permission()) {
    _internal_mutable_permission()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_permission());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Permission::CopyFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.accounts.Permission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Permission::IsInitialized() const {
  return true;
}

void Permission::InternalSwap(Permission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(permission_, other->permission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Permission::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_authorization_2eproto_getter, &descriptor_table_authorization_2eproto_once,
      file_level_metadata_authorization_2eproto[1]);
}

// ===================================================================

class UserPermission::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& permission(const UserPermission* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
UserPermission::_Internal::permission(const UserPermission* msg) {
  return *msg->permission_;
}
void UserPermission::clear_permission() {
  if (GetArenaForAllocation() == nullptr && permission_ != nullptr) {
    delete permission_;
  }
  permission_ = nullptr;
}
UserPermission::UserPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.accounts.UserPermission)
}
UserPermission::UserPermission(const UserPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_permission()) {
    permission_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.permission_);
  } else {
    permission_ = nullptr;
  }
  other_ = from.other_;
  // @@protoc_insertion_point(copy_constructor:sro.accounts.UserPermission)
}

inline void UserPermission::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&permission_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&other_) -
    reinterpret_cast<char*>(&permission_)) + sizeof(other_));
}

UserPermission::~UserPermission() {
  // @@protoc_insertion_point(destructor:sro.accounts.UserPermission)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete permission_;
}

void UserPermission::ArenaDtor(void* object) {
  UserPermission* _this = reinterpret_cast< UserPermission* >(object);
  (void)_this;
}
void UserPermission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.accounts.UserPermission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && permission_ != nullptr) {
    delete permission_;
  }
  permission_ = nullptr;
  other_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserPermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue permission = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool other = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          other_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserPermission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.accounts.UserPermission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue permission = 1;
  if (this->_internal_has_permission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::permission(this), target, stream);
  }

  // bool other = 2;
  if (this->_internal_other() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_other(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.accounts.UserPermission)
  return target;
}

size_t UserPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.accounts.UserPermission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue permission = 1;
  if (this->_internal_has_permission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *permission_);
  }

  // bool other = 2;
  if (this->_internal_other() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserPermission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserPermission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserPermission::GetClassData() const { return &_class_data_; }

void UserPermission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserPermission *>(to)->MergeFrom(
      static_cast<const UserPermission &>(from));
}


void UserPermission::MergeFrom(const UserPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.accounts.UserPermission)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_permission()) {
    _internal_mutable_permission()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_permission());
  }
  if (from._internal_other() != 0) {
    _internal_set_other(from._internal_other());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserPermission::CopyFrom(const UserPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.accounts.UserPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPermission::IsInitialized() const {
  return true;
}

void UserPermission::InternalSwap(UserPermission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserPermission, other_)
      + sizeof(UserPermission::other_)
      - PROTOBUF_FIELD_OFFSET(UserPermission, permission_)>(
          reinterpret_cast<char*>(&permission_),
          reinterpret_cast<char*>(&other->permission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserPermission::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_authorization_2eproto_getter, &descriptor_table_authorization_2eproto_once,
      file_level_metadata_authorization_2eproto[2]);
}

// ===================================================================

class UserPermissions::_Internal {
 public:
};

UserPermissions::UserPermissions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  permissions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.accounts.UserPermissions)
}
UserPermissions::UserPermissions(const UserPermissions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.accounts.UserPermissions)
}

inline void UserPermissions::SharedCtor() {
}

UserPermissions::~UserPermissions() {
  // @@protoc_insertion_point(destructor:sro.accounts.UserPermissions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserPermissions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserPermissions::ArenaDtor(void* object) {
  UserPermissions* _this = reinterpret_cast< UserPermissions* >(object);
  (void)_this;
}
void UserPermissions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserPermissions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserPermissions::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.accounts.UserPermissions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserPermissions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sro.accounts.UserPermission permissions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserPermissions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.accounts.UserPermissions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sro.accounts.UserPermission permissions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_permissions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.accounts.UserPermissions)
  return target;
}

size_t UserPermissions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.accounts.UserPermissions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.accounts.UserPermission permissions = 1;
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserPermissions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserPermissions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserPermissions::GetClassData() const { return &_class_data_; }

void UserPermissions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserPermissions *>(to)->MergeFrom(
      static_cast<const UserPermissions &>(from));
}


void UserPermissions::MergeFrom(const UserPermissions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.accounts.UserPermissions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_.MergeFrom(from.permissions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserPermissions::CopyFrom(const UserPermissions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.accounts.UserPermissions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPermissions::IsInitialized() const {
  return true;
}

void UserPermissions::InternalSwap(UserPermissions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  permissions_.InternalSwap(&other->permissions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserPermissions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_authorization_2eproto_getter, &descriptor_table_authorization_2eproto_once,
      file_level_metadata_authorization_2eproto[3]);
}

// ===================================================================

class UserRole::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& name(const UserRole* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
UserRole::_Internal::name(const UserRole* msg) {
  return *msg->name_;
}
void UserRole::clear_name() {
  if (GetArenaForAllocation() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
}
UserRole::UserRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  permissions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.accounts.UserRole)
}
UserRole::UserRole(const UserRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_name()) {
    name_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.name_);
  } else {
    name_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sro.accounts.UserRole)
}

inline void UserRole::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&name_)) + sizeof(id_));
}

UserRole::~UserRole() {
  // @@protoc_insertion_point(destructor:sro.accounts.UserRole)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserRole::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete name_;
}

void UserRole::ArenaDtor(void* object) {
  UserRole* _this = reinterpret_cast< UserRole* >(object);
  (void)_this;
}
void UserRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserRole::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.accounts.UserRole)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_.Clear();
  if (GetArenaForAllocation() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
  id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sro.accounts.UserPermission permissions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserRole::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.accounts.UserRole)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // .google.protobuf.StringValue name = 2;
  if (this->_internal_has_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::name(this), target, stream);
  }

  // repeated .sro.accounts.UserPermission permissions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_permissions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.accounts.UserRole)
  return target;
}

size_t UserRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.accounts.UserRole)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.accounts.UserPermission permissions = 3;
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.StringValue name = 2;
  if (this->_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserRole::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserRole::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserRole::GetClassData() const { return &_class_data_; }

void UserRole::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserRole *>(to)->MergeFrom(
      static_cast<const UserRole &>(from));
}


void UserRole::MergeFrom(const UserRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.accounts.UserRole)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_.MergeFrom(from.permissions_);
  if (from._internal_has_name()) {
    _internal_mutable_name()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserRole::CopyFrom(const UserRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.accounts.UserRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRole::IsInitialized() const {
  return true;
}

void UserRole::InternalSwap(UserRole* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  permissions_.InternalSwap(&other->permissions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserRole, id_)
      + sizeof(UserRole::id_)
      - PROTOBUF_FIELD_OFFSET(UserRole, name_)>(
          reinterpret_cast<char*>(&name_),
          reinterpret_cast<char*>(&other->name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRole::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_authorization_2eproto_getter, &descriptor_table_authorization_2eproto_once,
      file_level_metadata_authorization_2eproto[4]);
}

// ===================================================================

class UserRoles::_Internal {
 public:
};

UserRoles::UserRoles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.accounts.UserRoles)
}
UserRoles::UserRoles(const UserRoles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.accounts.UserRoles)
}

inline void UserRoles::SharedCtor() {
}

UserRoles::~UserRoles() {
  // @@protoc_insertion_point(destructor:sro.accounts.UserRoles)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserRoles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserRoles::ArenaDtor(void* object) {
  UserRoles* _this = reinterpret_cast< UserRoles* >(object);
  (void)_this;
}
void UserRoles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserRoles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserRoles::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.accounts.UserRoles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRoles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sro.accounts.UserRole roles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserRoles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.accounts.UserRoles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sro.accounts.UserRole roles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_roles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.accounts.UserRoles)
  return target;
}

size_t UserRoles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.accounts.UserRoles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.accounts.UserRole roles = 1;
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserRoles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserRoles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserRoles::GetClassData() const { return &_class_data_; }

void UserRoles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserRoles *>(to)->MergeFrom(
      static_cast<const UserRoles &>(from));
}


void UserRoles::MergeFrom(const UserRoles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.accounts.UserRoles)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserRoles::CopyFrom(const UserRoles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.accounts.UserRoles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRoles::IsInitialized() const {
  return true;
}

void UserRoles::InternalSwap(UserRoles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRoles::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_authorization_2eproto_getter, &descriptor_table_authorization_2eproto_once,
      file_level_metadata_authorization_2eproto[5]);
}

// ===================================================================

class AuthorizationMessage::_Internal {
 public:
};

AuthorizationMessage::AuthorizationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena),
  permissions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sro.accounts.AuthorizationMessage)
}
AuthorizationMessage::AuthorizationMessage(const AuthorizationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:sro.accounts.AuthorizationMessage)
}

inline void AuthorizationMessage::SharedCtor() {
user_id_ = uint64_t{0u};
}

AuthorizationMessage::~AuthorizationMessage() {
  // @@protoc_insertion_point(destructor:sro.accounts.AuthorizationMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthorizationMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AuthorizationMessage::ArenaDtor(void* object) {
  AuthorizationMessage* _this = reinterpret_cast< AuthorizationMessage* >(object);
  (void)_this;
}
void AuthorizationMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthorizationMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthorizationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.accounts.AuthorizationMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  permissions_.Clear();
  user_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthorizationMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sro.accounts.UserRole roles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sro.accounts.UserPermission permissions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthorizationMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.accounts.AuthorizationMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // repeated .sro.accounts.UserRole roles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_roles(i), target, stream);
  }

  // repeated .sro.accounts.UserPermission permissions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_permissions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.accounts.AuthorizationMessage)
  return target;
}

size_t AuthorizationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.accounts.AuthorizationMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.accounts.UserRole roles = 2;
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sro.accounts.UserPermission permissions = 3;
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthorizationMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthorizationMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthorizationMessage::GetClassData() const { return &_class_data_; }

void AuthorizationMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthorizationMessage *>(to)->MergeFrom(
      static_cast<const AuthorizationMessage &>(from));
}


void AuthorizationMessage::MergeFrom(const AuthorizationMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sro.accounts.AuthorizationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  permissions_.MergeFrom(from.permissions_);
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthorizationMessage::CopyFrom(const AuthorizationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.accounts.AuthorizationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorizationMessage::IsInitialized() const {
  return true;
}

void AuthorizationMessage::InternalSwap(AuthorizationMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  permissions_.InternalSwap(&other->permissions_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthorizationMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_authorization_2eproto_getter, &descriptor_table_authorization_2eproto_once,
      file_level_metadata_authorization_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace accounts
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sro::accounts::IDMessage* Arena::CreateMaybeMessage< ::sro::accounts::IDMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::accounts::IDMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::accounts::Permission* Arena::CreateMaybeMessage< ::sro::accounts::Permission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::accounts::Permission >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::accounts::UserPermission* Arena::CreateMaybeMessage< ::sro::accounts::UserPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::accounts::UserPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::accounts::UserPermissions* Arena::CreateMaybeMessage< ::sro::accounts::UserPermissions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::accounts::UserPermissions >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::accounts::UserRole* Arena::CreateMaybeMessage< ::sro::accounts::UserRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::accounts::UserRole >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::accounts::UserRoles* Arena::CreateMaybeMessage< ::sro::accounts::UserRoles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::accounts::UserRoles >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::accounts::AuthorizationMessage* Arena::CreateMaybeMessage< ::sro::accounts::AuthorizationMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::accounts::AuthorizationMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
